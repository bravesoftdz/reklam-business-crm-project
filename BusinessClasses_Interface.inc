(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 27.09.2006 1:26:02          *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF BusinessClasses_Interface.inc}
{$DEFINE BusinessClasses_Interface.inc}

{$IFNDEF BusinessClasses_unitheader}
unit BusinessClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TLinkimeet_harakt_klientaharakterizuet_klienta = class;
  TLinkimeet_harakt_klientaharakterizuet_klientaList = class;
  TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi = class;
  TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList = class;
  TVypusk_gazety = class;
  TVypusk_gazetyList = class;
  TVyhod = class;
  TVyhodList = class;
  TDokument = class;
  TDokumentList = class;
  TLog_operacii = class;
  TLog_operaciiList = class;
  TNastroiki = class;
  TNastroikiList = class;
  TOplata = class;
  TOplataList = class;
  TPersona = class;
  TPersonaList = class;
  TPrichina = class;
  TPrichinaList = class;
  TPrichina_uslov = class;
  TPrichina_uslovList = class;
  TProekt = class;
  TProektList = class;
  TRazmeshenie_reklamy = class;
  TRazmeshenie_reklamyList = class;
  TRazreshenie = class;
  TRazreshenieList = class;
  TReiting_klienta = class;
  TReiting_klientaList = class;
  TSootn_so_skidk = class;
  TSootn_so_skidkList = class;
  TSootn_tipa_so_skidk = class;
  TSootn_tipa_so_skidkList = class;
  TSostoyanie_kontakta = class;
  TSostoyanie_kontaktaList = class;
  TSpravochnik = class;
  TSpravochnikList = class;
  TSchyot = class;
  TSchyotList = class;
  TEffekt = class;
  TEffektList = class;
  TOrganizaciya = class;
  TOrganizaciyaList = class;
  TRazreshenie_vyhoditj = class;
  TRazreshenie_vyhoditjList = class;
  TRazreshenie_prosmatrivatj = class;
  TRazreshenie_prosmatrivatjList = class;
  TRazreshenie_ustanavl = class;
  TRazreshenie_ustanavlList = class;
  TAbstraktnyi_standart = class;
  TAbstraktnyi_standartList = class;
  TDobavochnaya_stoim = class;
  TDobavochnaya_stoimList = class;
  TDolgnostj = class;
  TDolgnostjList = class;
  TZadacha = class;
  TZadachaList = class;
  TIzdanie = class;
  TIzdanieList = class;
  TKontakt = class;
  TKontaktList = class;
  TNapominanie = class;
  TNapominanieList = class;
  TPozic_schta = class;
  TPozic_schtaList = class;
  TRazdel_izdaniya = class;
  TRazdel_izdaniyaList = class;
  TRazmery = class;
  TRazmeryList = class;
  TSkidka = class;
  TSkidkaList = class;
  TSpecif_organizacii = class;
  TSpecif_organizaciiList = class;
  TStoimostj = class;
  TStoimostjList = class;
  TTip_kontakta = class;
  TTip_kontaktaList = class;
  TTip_reklamy = class;
  TTip_reklamyList = class;
  TUsloviya = class;
  TUsloviyaList = class;
  THarakteristika_klienta = class;
  THarakteristika_klientaList = class;
  TKlient = class;
  TKlientList = class;
  TPersonal = class;
  TPersonalList = class;
  TRealjnaya_prichina = class;
  TRealjnaya_prichinaList = class;
  TStandartnaya_zadacha = class;
  TStandartnaya_zadachaList = class;
  TStandartnaya_prichina = class;
  TStandartnaya_prichinaList = class;
  TStandartnoe_napominanie = class;
  TStandartnoe_napominanieList = class;
  TStandartnoe_uslovie = class;
  TStandartnoe_uslovieList = class;
  TStandartnyi_effekt = class;
  TStandartnyi_effektList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TLinkimeet_harakt_klientaharakterizuet_klienta = class(TBusinessClassesRoot)
  private
    function _Getharakterizuet_klienta: TKlient;
    function _Get_M_harakterizuet_klienta: TBoldObjectReference;
    function _Getimeet_harakt_klienta: THarakteristika_klienta;
    function _Get_M_imeet_harakt_klienta: TBoldObjectReference;
  protected
  public
    property M_harakterizuet_klienta: TBoldObjectReference read _Get_M_harakterizuet_klienta;
    property M_imeet_harakt_klienta: TBoldObjectReference read _Get_M_imeet_harakt_klienta;
    property harakterizuet_klienta: TKlient read _Getharakterizuet_klienta;
    property imeet_harakt_klienta: THarakteristika_klienta read _Getimeet_harakt_klienta;
  end;

  TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi = class(TBusinessClassesRoot)
  private
    function _Getimeet_v_osnove_zadachi: TZadacha;
    function _Get_M_imeet_v_osnove_zadachi: TBoldObjectReference;
    function _Getotnos_kak_zadach_k_prich: TRealjnaya_prichina;
    function _Get_M_otnos_kak_zadach_k_prich: TBoldObjectReference;
  protected
  public
    property M_imeet_v_osnove_zadachi: TBoldObjectReference read _Get_M_imeet_v_osnove_zadachi;
    property M_otnos_kak_zadach_k_prich: TBoldObjectReference read _Get_M_otnos_kak_zadach_k_prich;
    property imeet_v_osnove_zadachi: TZadacha read _Getimeet_v_osnove_zadachi;
    property otnos_kak_zadach_k_prich: TRealjnaya_prichina read _Getotnos_kak_zadach_k_prich;
  end;

  TVypusk_gazety = class(TBusinessClassesRoot)
  private
    function _Get_M_Nomer_vypuska: TBAInteger;
    function _GetNomer_vypuska: Integer;
    procedure _SetNomer_vypuska(const NewValue: Integer);
    function _Get_M_Data_vypuska: TBADateTime;
    function _GetData_vypuska: TDateTime;
    procedure _SetData_vypuska(const NewValue: TDateTime);
    function _Get_M_God_vypuska: TBAInteger;
    function _GetGod_vypuska: Integer;
    procedure _SetGod_vypuska(const NewValue: Integer);
    function _Get_M_sort: TBAInteger;
    function _Getsort: Integer;
    function _Getimeet_razmesheniya: TRazmeshenie_reklamyList;
    function _GetVyhod: TVyhodList;
    function _Getvyhod_izdaniya: TIzdanie;
    function _Get_M_vyhod_izdaniya: TBoldObjectReference;
    procedure _Setvyhod_izdaniya(const value: TIzdanie);
    function _Getyavl_tek_vypuskom_dlya: TIzdanieList;
  protected
  public
    property M_Nomer_vypuska: TBAInteger read _Get_M_Nomer_vypuska;
    property M_Data_vypuska: TBADateTime read _Get_M_Data_vypuska;
    property M_God_vypuska: TBAInteger read _Get_M_God_vypuska;
    property M_sort: TBAInteger read _Get_M_sort;
    property M_imeet_razmesheniya: TRazmeshenie_reklamyList read _Getimeet_razmesheniya;
    property M_Vyhod: TVyhodList read _GetVyhod;
    property M_vyhod_izdaniya: TBoldObjectReference read _Get_M_vyhod_izdaniya;
    property M_yavl_tek_vypuskom_dlya: TIzdanieList read _Getyavl_tek_vypuskom_dlya;
    property Nomer_vypuska: Integer read _GetNomer_vypuska write _SetNomer_vypuska;
    property Data_vypuska: TDateTime read _GetData_vypuska write _SetData_vypuska;
    property God_vypuska: Integer read _GetGod_vypuska write _SetGod_vypuska;
    property sort: Integer read _Getsort;
    property imeet_razmesheniya: TRazmeshenie_reklamyList read _Getimeet_razmesheniya;
    property Vyhod: TVyhodList read _GetVyhod;
    property vyhod_izdaniya: TIzdanie read _Getvyhod_izdaniya write _Setvyhod_izdaniya;
    property yavl_tek_vypuskom_dlya: TIzdanieList read _Getyavl_tek_vypuskom_dlya;
  end;

  TVyhod = class(TBusinessClassesRoot)
  private
    function _Get_M_Bonusnyi_vyhod: TBABoolean;
    function _GetBonusnyi_vyhod: Boolean;
    function _Get_M_Izmenitj_kol_strok: TBABoolean;
    function _GetIzmenitj_kol_strok: Boolean;
    procedure _SetIzmenitj_kol_strok(const NewValue: Boolean);
    function _Get_M_Nov_kol_strok: TBAInteger;
    function _GetNov_kol_strok: Integer;
    procedure _SetNov_kol_strok(const NewValue: Integer);
    function _Get_M_Vsego_dob_stoim: TBAFloat;
    function _GetVsego_dob_stoim: double;
    function _Get_M_Proc_skidka_na_vyh: TBABoolean;
    function _GetProc_skidka_na_vyh: Boolean;
    function _Get_M_Vyhodov_do: TBAInteger;
    function _GetVyhodov_do: Integer;
    function _Get_M_Izmenyon: TBABoolean;
    function _GetIzmenyon: Boolean;
    procedure _SetIzmenyon(const NewValue: Boolean);
    function _Get_M_Izmen_uchteny_korrektorom: TBABoolean;
    function _GetIzmen_uchteny_korrektorom: Boolean;
    procedure _SetIzmen_uchteny_korrektorom(const NewValue: Boolean);
    function _Get_M_Posledn_nezap: TBAInteger;
    function _GetPosledn_nezap: Integer;
    function _Get_M_Stoim_vyhoda: TBAFloat;
    function _GetStoim_vyhoda: double;
    function _Get_M_Primechanie: TBAString;
    function _GetPrimechanie: String;
    procedure _SetPrimechanie(const NewValue: String);
    function _Get_M_Kol_objyavl: TBAInteger;
    function _GetKol_objyavl: Integer;
    procedure _SetKol_objyavl(const NewValue: Integer);
    function _Get_M_Vyh_po_inoi_cene: TBABoolean;
    function _GetVyh_po_inoi_cene: Boolean;
    procedure _SetVyh_po_inoi_cene(const NewValue: Boolean);
    function _Get_M_Ustan_cena: TBAFloat;
    function _GetUstan_cena: double;
    procedure _SetUstan_cena(const NewValue: double);
    function _Get_M_Stoim_ot_razmesh: TBAFloat;
    function _GetStoim_ot_razmesh: double;
    function _Get_M_V_dolg: TBABoolean;
    function _GetV_dolg: Boolean;
    function _Get_M_Kolichestvo_strok: TBAInteger;
    function _GetKolichestvo_strok: Integer;
    function _Getimeet_dobav_stoim: TDobavochnaya_stoimList;
    function _Getimeet_razmesheniya: TRazmeshenie_reklamy;
    function _Get_M_imeet_razmesheniya: TBoldObjectReference;
    function _Getvyhodit_v_vypuskah: TVypusk_gazety;
    function _Get_M_vyhodit_v_vypuskah: TBoldObjectReference;
  protected
    procedure _Proc_skidka_na_vyh_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    property M_Bonusnyi_vyhod: TBABoolean read _Get_M_Bonusnyi_vyhod;
    property M_Izmenitj_kol_strok: TBABoolean read _Get_M_Izmenitj_kol_strok;
    property M_Nov_kol_strok: TBAInteger read _Get_M_Nov_kol_strok;
    property M_Vsego_dob_stoim: TBAFloat read _Get_M_Vsego_dob_stoim;
    property M_Proc_skidka_na_vyh: TBABoolean read _Get_M_Proc_skidka_na_vyh;
    property M_Vyhodov_do: TBAInteger read _Get_M_Vyhodov_do;
    property M_Izmenyon: TBABoolean read _Get_M_Izmenyon;
    property M_Izmen_uchteny_korrektorom: TBABoolean read _Get_M_Izmen_uchteny_korrektorom;
    property M_Posledn_nezap: TBAInteger read _Get_M_Posledn_nezap;
    property M_Stoim_vyhoda: TBAFloat read _Get_M_Stoim_vyhoda;
    property M_Primechanie: TBAString read _Get_M_Primechanie;
    property M_Kol_objyavl: TBAInteger read _Get_M_Kol_objyavl;
    property M_Vyh_po_inoi_cene: TBABoolean read _Get_M_Vyh_po_inoi_cene;
    property M_Ustan_cena: TBAFloat read _Get_M_Ustan_cena;
    property M_Stoim_ot_razmesh: TBAFloat read _Get_M_Stoim_ot_razmesh;
    property M_V_dolg: TBABoolean read _Get_M_V_dolg;
    property M_Kolichestvo_strok: TBAInteger read _Get_M_Kolichestvo_strok;
    property M_imeet_dobav_stoim: TDobavochnaya_stoimList read _Getimeet_dobav_stoim;
    property M_imeet_razmesheniya: TBoldObjectReference read _Get_M_imeet_razmesheniya;
    property M_vyhodit_v_vypuskah: TBoldObjectReference read _Get_M_vyhodit_v_vypuskah;
    property Bonusnyi_vyhod: Boolean read _GetBonusnyi_vyhod;
    property Izmenitj_kol_strok: Boolean read _GetIzmenitj_kol_strok write _SetIzmenitj_kol_strok;
    property Nov_kol_strok: Integer read _GetNov_kol_strok write _SetNov_kol_strok;
    property Vsego_dob_stoim: double read _GetVsego_dob_stoim;
    property Proc_skidka_na_vyh: Boolean read _GetProc_skidka_na_vyh;
    property Vyhodov_do: Integer read _GetVyhodov_do;
    property Izmenyon: Boolean read _GetIzmenyon write _SetIzmenyon;
    property Izmen_uchteny_korrektorom: Boolean read _GetIzmen_uchteny_korrektorom write _SetIzmen_uchteny_korrektorom;
    property Posledn_nezap: Integer read _GetPosledn_nezap;
    property Stoim_vyhoda: double read _GetStoim_vyhoda;
    property Primechanie: String read _GetPrimechanie write _SetPrimechanie;
    property Kol_objyavl: Integer read _GetKol_objyavl write _SetKol_objyavl;
    property Vyh_po_inoi_cene: Boolean read _GetVyh_po_inoi_cene write _SetVyh_po_inoi_cene;
    property Ustan_cena: double read _GetUstan_cena write _SetUstan_cena;
    property Stoim_ot_razmesh: double read _GetStoim_ot_razmesh;
    property V_dolg: Boolean read _GetV_dolg;
    property Kolichestvo_strok: Integer read _GetKolichestvo_strok;
    property imeet_dobav_stoim: TDobavochnaya_stoimList read _Getimeet_dobav_stoim;
    property imeet_razmesheniya: TRazmeshenie_reklamy read _Getimeet_razmesheniya;
    property vyhodit_v_vypuskah: TVypusk_gazety read _Getvyhodit_v_vypuskah;
  end;

  TDokument = class(TBusinessClassesRoot)
  private
    function _Get_M_Nomer_dogovora: TBAString;
    function _GetNomer_dogovora: String;
    procedure _SetNomer_dogovora(const NewValue: String);
    function _Get_M_Naimenovanie_dogovora: TBAString;
    function _GetNaimenovanie_dogovora: String;
    procedure _SetNaimenovanie_dogovora(const NewValue: String);
    function _Get_M_Opisanie_dogovora: TBAString;
    function _GetOpisanie_dogovora: String;
    procedure _SetOpisanie_dogovora(const NewValue: String);
    function _Getdok_vhod_v_sost_proekta: TProekt;
    function _Get_M_dok_vhod_v_sost_proekta: TBoldObjectReference;
    procedure _Setdok_vhod_v_sost_proekta(const value: TProekt);
  protected
  public
    property M_Nomer_dogovora: TBAString read _Get_M_Nomer_dogovora;
    property M_Naimenovanie_dogovora: TBAString read _Get_M_Naimenovanie_dogovora;
    property M_Opisanie_dogovora: TBAString read _Get_M_Opisanie_dogovora;
    property M_dok_vhod_v_sost_proekta: TBoldObjectReference read _Get_M_dok_vhod_v_sost_proekta;
    property Nomer_dogovora: String read _GetNomer_dogovora write _SetNomer_dogovora;
    property Naimenovanie_dogovora: String read _GetNaimenovanie_dogovora write _SetNaimenovanie_dogovora;
    property Opisanie_dogovora: String read _GetOpisanie_dogovora write _SetOpisanie_dogovora;
    property dok_vhod_v_sost_proekta: TProekt read _Getdok_vhod_v_sost_proekta write _Setdok_vhod_v_sost_proekta;
  end;

  TLog_operacii = class(TBusinessClassesRoot)
  private
    function _Get_M_Naimenovanie_operacii: TBAString;
    function _GetNaimenovanie_operacii: String;
    procedure _SetNaimenovanie_operacii(const NewValue: String);
    function _Get_M_Subjekt: TBAString;
    function _GetSubjekt: String;
    function _Get_M_Data_i_vremya: TBAString;
    function _GetData_i_vremya: String;
    function _Get_M_Data: TBADate;
    function _GetData: TDate;
    procedure _SetData(const NewValue: TDate);
    function _Get_M_Vremya: TBAString;
    function _GetVremya: String;
    procedure _SetVremya(const NewValue: String);
    function _Getot_deistvii: TPersonal;
    function _Get_M_ot_deistvii: TBoldObjectReference;
    procedure _Setot_deistvii(const value: TPersonal);
  protected
  public
    property M_Naimenovanie_operacii: TBAString read _Get_M_Naimenovanie_operacii;
    property M_Subjekt: TBAString read _Get_M_Subjekt;
    property M_Data_i_vremya: TBAString read _Get_M_Data_i_vremya;
    property M_Data: TBADate read _Get_M_Data;
    property M_Vremya: TBAString read _Get_M_Vremya;
    property M_ot_deistvii: TBoldObjectReference read _Get_M_ot_deistvii;
    property Naimenovanie_operacii: String read _GetNaimenovanie_operacii write _SetNaimenovanie_operacii;
    property Subjekt: String read _GetSubjekt;
    property Data_i_vremya: String read _GetData_i_vremya;
    property Data: TDate read _GetData write _SetData;
    property Vremya: String read _GetVremya write _SetVremya;
    property ot_deistvii: TPersonal read _Getot_deistvii write _Setot_deistvii;
  end;

  TNastroiki = class(TBusinessClassesRoot)
  private
    function _Get_M_Cvet_neoplachenyh: TBAString;
    function _GetCvet_neoplachenyh: String;
    procedure _SetCvet_neoplachenyh(const NewValue: String);
    function _Get_M_Cvet_idushih: TBAString;
    function _GetCvet_idushih: String;
    procedure _SetCvet_idushih(const NewValue: String);
    function _Get_M_Cvet_pod_voprosom: TBAString;
    function _GetCvet_pod_voprosom: String;
    procedure _SetCvet_pod_voprosom(const NewValue: String);
    function _Get_M_Chislo_vyh_bonus: TBAInteger;
    function _GetChislo_vyh_bonus: Integer;
    procedure _SetChislo_vyh_bonus(const NewValue: Integer);
    function _Get_M_Nomer_start_vyp: TBAInteger;
    function _GetNomer_start_vyp: Integer;
    procedure _SetNomer_start_vyp(const NewValue: Integer);
    function _Get_M_God_start_vyp: TBAInteger;
    function _GetGod_start_vyp: Integer;
    procedure _SetGod_start_vyp(const NewValue: Integer);
    function _Get_M_Skidka_povt_vyh: TBAFloat;
    function _GetSkidka_povt_vyh: double;
    procedure _SetSkidka_povt_vyh(const NewValue: double);
    function _Get_M_Dlina_intervala: TBAInteger;
    function _GetDlina_intervala: Integer;
    procedure _SetDlina_intervala(const NewValue: Integer);
    function _Get_M_Tek_vremya: TBADateTime;
    function _GetTek_vremya: TDateTime;
    procedure _SetTek_vremya(const NewValue: TDateTime);
    function _Get_M_Stoim_za_stroku: TBAFloat;
    function _GetStoim_za_stroku: double;
    procedure _SetStoim_za_stroku(const NewValue: double);
    function _Get_M_Stoim_za_stroku_opt: TBAFloat;
    function _GetStoim_za_stroku_opt: double;
    procedure _SetStoim_za_stroku_opt(const NewValue: double);
    function _Get_M_Kolich_strok_opt: TBAFloat;
    function _GetKolich_strok_opt: double;
    procedure _SetKolich_strok_opt(const NewValue: double);
    function _Get_M_Post_proc_sbavki: TBAFloat;
    function _GetPost_proc_sbavki: double;
    procedure _SetPost_proc_sbavki(const NewValue: double);
    function _Get_M_Dnei_napom_ob_okonch: TBAFloat;
    function _GetDnei_napom_ob_okonch: double;
    procedure _SetDnei_napom_ob_okonch(const NewValue: double);
  protected
  public
    property M_Cvet_neoplachenyh: TBAString read _Get_M_Cvet_neoplachenyh;
    property M_Cvet_idushih: TBAString read _Get_M_Cvet_idushih;
    property M_Cvet_pod_voprosom: TBAString read _Get_M_Cvet_pod_voprosom;
    property M_Chislo_vyh_bonus: TBAInteger read _Get_M_Chislo_vyh_bonus;
    property M_Nomer_start_vyp: TBAInteger read _Get_M_Nomer_start_vyp;
    property M_God_start_vyp: TBAInteger read _Get_M_God_start_vyp;
    property M_Skidka_povt_vyh: TBAFloat read _Get_M_Skidka_povt_vyh;
    property M_Dlina_intervala: TBAInteger read _Get_M_Dlina_intervala;
    property M_Tek_vremya: TBADateTime read _Get_M_Tek_vremya;
    property M_Stoim_za_stroku: TBAFloat read _Get_M_Stoim_za_stroku;
    property M_Stoim_za_stroku_opt: TBAFloat read _Get_M_Stoim_za_stroku_opt;
    property M_Kolich_strok_opt: TBAFloat read _Get_M_Kolich_strok_opt;
    property M_Post_proc_sbavki: TBAFloat read _Get_M_Post_proc_sbavki;
    property M_Dnei_napom_ob_okonch: TBAFloat read _Get_M_Dnei_napom_ob_okonch;
    property Cvet_neoplachenyh: String read _GetCvet_neoplachenyh write _SetCvet_neoplachenyh;
    property Cvet_idushih: String read _GetCvet_idushih write _SetCvet_idushih;
    property Cvet_pod_voprosom: String read _GetCvet_pod_voprosom write _SetCvet_pod_voprosom;
    property Chislo_vyh_bonus: Integer read _GetChislo_vyh_bonus write _SetChislo_vyh_bonus;
    property Nomer_start_vyp: Integer read _GetNomer_start_vyp write _SetNomer_start_vyp;
    property God_start_vyp: Integer read _GetGod_start_vyp write _SetGod_start_vyp;
    property Skidka_povt_vyh: double read _GetSkidka_povt_vyh write _SetSkidka_povt_vyh;
    property Dlina_intervala: Integer read _GetDlina_intervala write _SetDlina_intervala;
    property Tek_vremya: TDateTime read _GetTek_vremya write _SetTek_vremya;
    property Stoim_za_stroku: double read _GetStoim_za_stroku write _SetStoim_za_stroku;
    property Stoim_za_stroku_opt: double read _GetStoim_za_stroku_opt write _SetStoim_za_stroku_opt;
    property Kolich_strok_opt: double read _GetKolich_strok_opt write _SetKolich_strok_opt;
    property Post_proc_sbavki: double read _GetPost_proc_sbavki write _SetPost_proc_sbavki;
    property Dnei_napom_ob_okonch: double read _GetDnei_napom_ob_okonch write _SetDnei_napom_ob_okonch;
  end;

  TOplata = class(TBusinessClassesRoot)
  private
    function _Get_M_Summa: TBAFloat;
    function _GetSumma: double;
    procedure _SetSumma(const NewValue: double);
    function _Get_M_Data_oplaty: TBADateTime;
    function _GetData_oplaty: TDateTime;
    procedure _SetData_oplaty(const NewValue: TDateTime);
    function _Get_M_Osnovanie: TBAString;
    function _GetOsnovanie: String;
    procedure _SetOsnovanie(const NewValue: String);
    function _Get_M_Bez_nal: TBABoolean;
    function _GetBez_nal: Boolean;
    procedure _SetBez_nal(const NewValue: Boolean);
    function _Get_M_Nomer_vypis_schyota: TBAInteger;
    function _GetNomer_vypis_schyota: Integer;
    procedure _SetNomer_vypis_schyota(const NewValue: Integer);
    function _Get_M_Nomer_prih_ordera: TBAString;
    function _GetNomer_prih_ordera: String;
    procedure _SetNomer_prih_ordera(const NewValue: String);
    function _Get_M_Obozn_schyota: TBAString;
    function _GetObozn_schyota: String;
    procedure _SetObozn_schyota(const NewValue: String);
    function _Get_M_Primechanie: TBAString;
    function _GetPrimechanie: String;
    procedure _SetPrimechanie(const NewValue: String);
    function _Getyavl_oplatoi_za: TRazmeshenie_reklamy;
    function _Get_M_yavl_oplatoi_za: TBoldObjectReference;
    procedure _Setyavl_oplatoi_za(const value: TRazmeshenie_reklamy);
    function _Getosush_za_schyot: TKlient;
    function _Get_M_osush_za_schyot: TBoldObjectReference;
    procedure _Setosush_za_schyot(const value: TKlient);
    function _Getoplata_po_schyotu: TSchyot;
    function _Get_M_oplata_po_schyotu: TBoldObjectReference;
    procedure _Setoplata_po_schyotu(const value: TSchyot);
    function _Getotnositsya_k_kampanii: TRazmeshenie_reklamy;
    function _Get_M_otnositsya_k_kampanii: TBoldObjectReference;
    procedure _Setotnositsya_k_kampanii(const value: TRazmeshenie_reklamy);
  protected
  public
    property M_Summa: TBAFloat read _Get_M_Summa;
    property M_Data_oplaty: TBADateTime read _Get_M_Data_oplaty;
    property M_Osnovanie: TBAString read _Get_M_Osnovanie;
    property M_Bez_nal: TBABoolean read _Get_M_Bez_nal;
    property M_Nomer_vypis_schyota: TBAInteger read _Get_M_Nomer_vypis_schyota;
    property M_Nomer_prih_ordera: TBAString read _Get_M_Nomer_prih_ordera;
    property M_Obozn_schyota: TBAString read _Get_M_Obozn_schyota;
    property M_Primechanie: TBAString read _Get_M_Primechanie;
    property M_yavl_oplatoi_za: TBoldObjectReference read _Get_M_yavl_oplatoi_za;
    property M_osush_za_schyot: TBoldObjectReference read _Get_M_osush_za_schyot;
    property M_oplata_po_schyotu: TBoldObjectReference read _Get_M_oplata_po_schyotu;
    property M_otnositsya_k_kampanii: TBoldObjectReference read _Get_M_otnositsya_k_kampanii;
    property Summa: double read _GetSumma write _SetSumma;
    property Data_oplaty: TDateTime read _GetData_oplaty write _SetData_oplaty;
    property Osnovanie: String read _GetOsnovanie write _SetOsnovanie;
    property Bez_nal: Boolean read _GetBez_nal write _SetBez_nal;
    property Nomer_vypis_schyota: Integer read _GetNomer_vypis_schyota write _SetNomer_vypis_schyota;
    property Nomer_prih_ordera: String read _GetNomer_prih_ordera write _SetNomer_prih_ordera;
    property Obozn_schyota: String read _GetObozn_schyota write _SetObozn_schyota;
    property Primechanie: String read _GetPrimechanie write _SetPrimechanie;
    property yavl_oplatoi_za: TRazmeshenie_reklamy read _Getyavl_oplatoi_za write _Setyavl_oplatoi_za;
    property osush_za_schyot: TKlient read _Getosush_za_schyot write _Setosush_za_schyot;
    property oplata_po_schyotu: TSchyot read _Getoplata_po_schyotu write _Setoplata_po_schyotu;
    property otnositsya_k_kampanii: TRazmeshenie_reklamy read _Getotnositsya_k_kampanii write _Setotnositsya_k_kampanii;
  end;

  TPersona = class(TBusinessClassesRoot)
  private
    function _Get_M_Familiya: TBAString;
    function _GetFamiliya: String;
    procedure _SetFamiliya(const NewValue: String);
    function _Get_M_Imya: TBAString;
    function _GetImya: String;
    procedure _SetImya(const NewValue: String);
    function _Get_M_Otchestvo: TBAString;
    function _GetOtchestvo: String;
    procedure _SetOtchestvo(const NewValue: String);
    function _Get_M_Ulica: TBAString;
    function _GetUlica: String;
    procedure _SetUlica(const NewValue: String);
    function _Get_M_Dom: TBAInteger;
    function _GetDom: Integer;
    procedure _SetDom(const NewValue: Integer);
    function _Get_M_Kvartira: TBAInteger;
    function _GetKvartira: Integer;
    procedure _SetKvartira(const NewValue: Integer);
    function _Get_M_Korpus: TBAInteger;
    function _GetKorpus: Integer;
    procedure _SetKorpus(const NewValue: Integer);
    function _Get_M_Mobiljnyi_telefon: TBAString;
    function _GetMobiljnyi_telefon: String;
    procedure _SetMobiljnyi_telefon(const NewValue: String);
    function _Get_M_Rabochii_telefon: TBAString;
    function _GetRabochii_telefon: String;
    procedure _SetRabochii_telefon(const NewValue: String);
    function _Get_M_Domashnii_telefon: TBAString;
    function _GetDomashnii_telefon: String;
    procedure _SetDomashnii_telefon(const NewValue: String);
    function _Get_M_Elektronnyi_adres: TBAString;
    function _GetElektronnyi_adres: String;
    procedure _SetElektronnyi_adres(const NewValue: String);
    function _Get_M_Polnoe_imya: TBAString;
    function _GetPolnoe_imya: String;
    function _Get_M_Data_rogdeniya: TBADateTime;
    function _GetData_rogdeniya: TDateTime;
    procedure _SetData_rogdeniya(const NewValue: TDateTime);
  protected
  public
    property M_Familiya: TBAString read _Get_M_Familiya;
    property M_Imya: TBAString read _Get_M_Imya;
    property M_Otchestvo: TBAString read _Get_M_Otchestvo;
    property M_Ulica: TBAString read _Get_M_Ulica;
    property M_Dom: TBAInteger read _Get_M_Dom;
    property M_Kvartira: TBAInteger read _Get_M_Kvartira;
    property M_Korpus: TBAInteger read _Get_M_Korpus;
    property M_Mobiljnyi_telefon: TBAString read _Get_M_Mobiljnyi_telefon;
    property M_Rabochii_telefon: TBAString read _Get_M_Rabochii_telefon;
    property M_Domashnii_telefon: TBAString read _Get_M_Domashnii_telefon;
    property M_Elektronnyi_adres: TBAString read _Get_M_Elektronnyi_adres;
    property M_Polnoe_imya: TBAString read _Get_M_Polnoe_imya;
    property M_Data_rogdeniya: TBADateTime read _Get_M_Data_rogdeniya;
    property Familiya: String read _GetFamiliya write _SetFamiliya;
    property Imya: String read _GetImya write _SetImya;
    property Otchestvo: String read _GetOtchestvo write _SetOtchestvo;
    property Ulica: String read _GetUlica write _SetUlica;
    property Dom: Integer read _GetDom write _SetDom;
    property Kvartira: Integer read _GetKvartira write _SetKvartira;
    property Korpus: Integer read _GetKorpus write _SetKorpus;
    property Mobiljnyi_telefon: String read _GetMobiljnyi_telefon write _SetMobiljnyi_telefon;
    property Rabochii_telefon: String read _GetRabochii_telefon write _SetRabochii_telefon;
    property Domashnii_telefon: String read _GetDomashnii_telefon write _SetDomashnii_telefon;
    property Elektronnyi_adres: String read _GetElektronnyi_adres write _SetElektronnyi_adres;
    property Polnoe_imya: String read _GetPolnoe_imya;
    property Data_rogdeniya: TDateTime read _GetData_rogdeniya write _SetData_rogdeniya;
  end;

  TPrichina = class(TBusinessClassesRoot)
  private
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
    function _Getotnositsya_kstandartu: TStandartnaya_prichina;
    function _Get_M_otnositsya_kstandartu: TBoldObjectReference;
    procedure _Setotnositsya_kstandartu(const value: TStandartnaya_prichina);
    function _Getyavl_konc_perehoda_iz: TSostoyanie_kontakta;
    function _Get_M_yavl_konc_perehoda_iz: TBoldObjectReference;
    function _Getimeet_perehodnye: TSostoyanie_kontakta;
    function _Get_M_imeet_perehodnye: TBoldObjectReference;
  protected
  public
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property M_otnositsya_kstandartu: TBoldObjectReference read _Get_M_otnositsya_kstandartu;
    property M_yavl_konc_perehoda_iz: TBoldObjectReference read _Get_M_yavl_konc_perehoda_iz;
    property M_imeet_perehodnye: TBoldObjectReference read _Get_M_imeet_perehodnye;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
    property otnositsya_kstandartu: TStandartnaya_prichina read _Getotnositsya_kstandartu write _Setotnositsya_kstandartu;
    property yavl_konc_perehoda_iz: TSostoyanie_kontakta read _Getyavl_konc_perehoda_iz;
    property imeet_perehodnye: TSostoyanie_kontakta read _Getimeet_perehodnye;
  end;

  TPrichina_uslov = class(TBusinessClassesRoot)
  private
    function _Getformir_iz_stand_usl: TStandartnoe_uslovie;
    function _Get_M_formir_iz_stand_usl: TBoldObjectReference;
    function _Getformir_stand_prich: TStandartnaya_prichina;
    function _Get_M_formir_stand_prich: TBoldObjectReference;
  protected
  public
    property M_formir_iz_stand_usl: TBoldObjectReference read _Get_M_formir_iz_stand_usl;
    property M_formir_stand_prich: TBoldObjectReference read _Get_M_formir_stand_prich;
    property formir_iz_stand_usl: TStandartnoe_uslovie read _Getformir_iz_stand_usl;
    property formir_stand_prich: TStandartnaya_prichina read _Getformir_stand_prich;
  end;

  TProekt = class(TBusinessClassesRoot)
  private
    function _Get_M_Nomer_proekta: TBAString;
    function _GetNomer_proekta: String;
    procedure _SetNomer_proekta(const NewValue: String);
    function _Get_M_Naimenovanie_proekta: TBAString;
    function _GetNaimenovanie_proekta: String;
    procedure _SetNaimenovanie_proekta(const NewValue: String);
    function _Get_M_Opisanie_proekta: TBAString;
    function _GetOpisanie_proekta: String;
    procedure _SetOpisanie_proekta(const NewValue: String);
    function _Getimeet_v_sostave_zadachi: TZadachaList;
    function _Getproekt_sost_iz_dok: TDokumentList;
    function _Getproekt_imeet_rezuljt: TEffektList;
    function _Getimeet_stoim_vhod_v: TDobavochnaya_stoimList;
  protected
  public
    property M_Nomer_proekta: TBAString read _Get_M_Nomer_proekta;
    property M_Naimenovanie_proekta: TBAString read _Get_M_Naimenovanie_proekta;
    property M_Opisanie_proekta: TBAString read _Get_M_Opisanie_proekta;
    property M_imeet_v_sostave_zadachi: TZadachaList read _Getimeet_v_sostave_zadachi;
    property M_proekt_sost_iz_dok: TDokumentList read _Getproekt_sost_iz_dok;
    property M_proekt_imeet_rezuljt: TEffektList read _Getproekt_imeet_rezuljt;
    property M_imeet_stoim_vhod_v: TDobavochnaya_stoimList read _Getimeet_stoim_vhod_v;
    property Nomer_proekta: String read _GetNomer_proekta write _SetNomer_proekta;
    property Naimenovanie_proekta: String read _GetNaimenovanie_proekta write _SetNaimenovanie_proekta;
    property Opisanie_proekta: String read _GetOpisanie_proekta write _SetOpisanie_proekta;
    property imeet_v_sostave_zadachi: TZadachaList read _Getimeet_v_sostave_zadachi;
    property proekt_sost_iz_dok: TDokumentList read _Getproekt_sost_iz_dok;
    property proekt_imeet_rezuljt: TEffektList read _Getproekt_imeet_rezuljt;
    property imeet_stoim_vhod_v: TDobavochnaya_stoimList read _Getimeet_stoim_vhod_v;
  end;

  TRazmeshenie_reklamy = class(TBusinessClassesRoot)
  private
    function _Get_M_Data: TBADateTime;
    function _GetData: TDateTime;
    procedure _SetData(const NewValue: TDateTime);
    function _Get_M_Fail_imya: TBAString;
    function _GetFail_imya: String;
    procedure _SetFail_imya(const NewValue: String);
    function _Get_M_Stoimostj_po_plosh: TBAFloat;
    function _GetStoimostj_po_plosh: double;
    function _Get_M_Isp_ustan_stoim: TBABoolean;
    function _GetIsp_ustan_stoim: Boolean;
    procedure _SetIsp_ustan_stoim(const NewValue: Boolean);
    function _Get_M_Ustan_stoim: TBAFloat;
    function _GetUstan_stoim: double;
    procedure _SetUstan_stoim(const NewValue: double);
    function _Get_M_Vsego_stoim: TBAFloat;
    function _GetVsego_stoim: double;
    function _Get_M_Proshlo: TBABoolean;
    function _GetProshlo: Boolean;
    procedure _SetProshlo(const NewValue: Boolean);
    function _Get_M_Ploshadj: TBAFloat;
    function _GetPloshadj: double;
    function _Get_M_Oboznach_strok: TBAString;
    function _GetOboznach_strok: String;
    procedure _SetOboznach_strok(const NewValue: String);
    function _Get_M_Identifikator_risunka: TBAInteger;
    function _GetIdentifikator_risunka: Integer;
    procedure _SetIdentifikator_risunka(const NewValue: Integer);
    function _Get_M_Nomer_stranicy: TBAInteger;
    function _GetNomer_stranicy: Integer;
    procedure _SetNomer_stranicy(const NewValue: Integer);
    function _Get_M_Zakryt: TBABoolean;
    function _GetZakryt: Boolean;
    procedure _SetZakryt(const NewValue: Boolean);
    function _Get_M_Opisanie: TBAString;
    function _GetOpisanie: String;
    procedure _SetOpisanie(const NewValue: String);
    function _Get_M_Kolichestvo_strok: TBAInteger;
    function _GetKolichestvo_strok: Integer;
    procedure _SetKolichestvo_strok(const NewValue: Integer);
    function _Get_M_Bez_skidok: TBABoolean;
    function _GetBez_skidok: Boolean;
    procedure _SetBez_skidok(const NewValue: Boolean);
    function _Get_M_Vysota: TBAFloat;
    function _GetVysota: double;
    procedure _SetVysota(const NewValue: double);
    function _Get_M_Shirina: TBAFloat;
    function _GetShirina: double;
    procedure _SetShirina(const NewValue: double);
    function _Get_M_Isp_stand_razmer: TBABoolean;
    function _GetIsp_stand_razmer: Boolean;
    procedure _SetIsp_stand_razmer(const NewValue: Boolean);
    function _Get_M_Bonus: TBABoolean;
    function _GetBonus: Boolean;
    function _Get_M_Opt_dlya_dolgih: TBABoolean;
    function _GetOpt_dlya_dolgih: Boolean;
    function _Get_M_Za_chisl_strok: TBABoolean;
    function _GetZa_chisl_strok: Boolean;
    function _Get_M_Chislo_strok: TBAFloat;
    function _GetChislo_strok: double;
    function _Get_M_Opt_procent: TBAFloat;
    function _GetOpt_procent: double;
    function _Get_M_Bonus_vyhod: TBAFloat;
    function _GetBonus_vyhod: double;
    function _Get_M_Stoim_stroki: TBAFloat;
    function _GetStoim_stroki: double;
    function _Get_M_Vsego_stoim_po_vyh: TBAFloat;
    function _GetVsego_stoim_po_vyh: double;
    function _Get_M_Vsego_dob_stoim: TBAFloat;
    function _GetVsego_dob_stoim: double;
    function _Get_M_Vsego_dob_stoim_po_vyh: TBAFloat;
    function _GetVsego_dob_stoim_po_vyh: double;
    function _Get_M_Obshaya_stoim: TBAFloat;
    function _GetObshaya_stoim: double;
    function _Get_M_Nulevaya_stoim: TBAFloat;
    function _GetNulevaya_stoim: double;
    function _Get_M_Razm_objyavl: TBABoolean;
    function _GetRazm_objyavl: Boolean;
    procedure _SetRazm_objyavl(const NewValue: Boolean);
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
    function _Get_M_Razr_mnogitelj: TBABoolean;
    function _GetRazr_mnogitelj: Boolean;
    function _Get_M_Mnogitelj: TBAFloat;
    function _GetMnogitelj: double;
    procedure _SetMnogitelj(const NewValue: double);
    function _Get_M_Oplachen: TBABoolean;
    function _GetOplachen: Boolean;
    function _Get_M_Ne_vystavlen: TBABoolean;
    function _GetNe_vystavlen: Boolean;
    function _Get_M_Oplacheno_itogo: TBAFloat;
    function _GetOplacheno_itogo: double;
    function _Get_M_Dolg_itogo: TBAFloat;
    function _GetDolg_itogo: double;
    function _Get_M_Nalich_dolg: TBAFloat;
    function _GetNalich_dolg: double;
    function _Get_M_Stoim_nal: TBAFloat;
    function _GetStoim_nal: double;
    function _Getrazm_reklamu_v: TRazdel_izdaniya;
    function _Get_M_razm_reklamu_v: TBoldObjectReference;
    procedure _Setrazm_reklamu_v(const value: TRazdel_izdaniya);
    function _Getimeet_razmery: TRazmery;
    function _Get_M_imeet_razmery: TBoldObjectReference;
    procedure _Setimeet_razmery(const value: TRazmery);
    function _Getimeet_stoim_kv_sm: TStoimostj;
    function _Get_M_imeet_stoim_kv_sm: TBoldObjectReference;
    procedure _Setimeet_stoim_kv_sm(const value: TStoimostj);
    function _Getrazmesh_kak_sledstv: TKontakt;
    function _Get_M_razmesh_kak_sledstv: TBoldObjectReference;
    procedure _Setrazmesh_kak_sledstv(const value: TKontakt);
    function _Getvyhodit_v_vypuskah: TVypusk_gazetyList;
    function _GetVyhod: TVyhodList;
    function _Getimeet_oplaty: TOplataList;
    function _Getimeet_tip_reklamy: TTip_reklamy;
    function _Get_M_imeet_tip_reklamy: TBoldObjectReference;
    procedure _Setimeet_tip_reklamy(const value: TTip_reklamy);
    function _Getyavl_reklamoi_dlya: TKlient;
    function _Get_M_yavl_reklamoi_dlya: TBoldObjectReference;
    procedure _Setyavl_reklamoi_dlya(const value: TKlient);
    function _Getimeet_skidki: TSkidkaList;
    function _GetSootn_so_skidk: TSootn_so_skidkList;
    function _Getimeet_stoim_dop_rab: TDobavochnaya_stoimList;
    function _Getimeet_scheta_oplaty: TPozic_schtaList;
    function _Getvedyotsya_sotrudnikom: TPersonal;
    function _Get_M_vedyotsya_sotrudnikom: TBoldObjectReference;
    procedure _Setvedyotsya_sotrudnikom(const value: TPersonal);
    function _Getimeet_otnos_oplaty: TOplataList;
  protected
  public
    property M_Data: TBADateTime read _Get_M_Data;
    property M_Fail_imya: TBAString read _Get_M_Fail_imya;
    property M_Stoimostj_po_plosh: TBAFloat read _Get_M_Stoimostj_po_plosh;
    property M_Isp_ustan_stoim: TBABoolean read _Get_M_Isp_ustan_stoim;
    property M_Ustan_stoim: TBAFloat read _Get_M_Ustan_stoim;
    property M_Vsego_stoim: TBAFloat read _Get_M_Vsego_stoim;
    property M_Proshlo: TBABoolean read _Get_M_Proshlo;
    property M_Ploshadj: TBAFloat read _Get_M_Ploshadj;
    property M_Oboznach_strok: TBAString read _Get_M_Oboznach_strok;
    property M_Identifikator_risunka: TBAInteger read _Get_M_Identifikator_risunka;
    property M_Nomer_stranicy: TBAInteger read _Get_M_Nomer_stranicy;
    property M_Zakryt: TBABoolean read _Get_M_Zakryt;
    property M_Opisanie: TBAString read _Get_M_Opisanie;
    property M_Kolichestvo_strok: TBAInteger read _Get_M_Kolichestvo_strok;
    property M_Bez_skidok: TBABoolean read _Get_M_Bez_skidok;
    property M_Vysota: TBAFloat read _Get_M_Vysota;
    property M_Shirina: TBAFloat read _Get_M_Shirina;
    property M_Isp_stand_razmer: TBABoolean read _Get_M_Isp_stand_razmer;
    property M_Bonus: TBABoolean read _Get_M_Bonus;
    property M_Opt_dlya_dolgih: TBABoolean read _Get_M_Opt_dlya_dolgih;
    property M_Za_chisl_strok: TBABoolean read _Get_M_Za_chisl_strok;
    property M_Chislo_strok: TBAFloat read _Get_M_Chislo_strok;
    property M_Opt_procent: TBAFloat read _Get_M_Opt_procent;
    property M_Bonus_vyhod: TBAFloat read _Get_M_Bonus_vyhod;
    property M_Stoim_stroki: TBAFloat read _Get_M_Stoim_stroki;
    property M_Vsego_stoim_po_vyh: TBAFloat read _Get_M_Vsego_stoim_po_vyh;
    property M_Vsego_dob_stoim: TBAFloat read _Get_M_Vsego_dob_stoim;
    property M_Vsego_dob_stoim_po_vyh: TBAFloat read _Get_M_Vsego_dob_stoim_po_vyh;
    property M_Obshaya_stoim: TBAFloat read _Get_M_Obshaya_stoim;
    property M_Nulevaya_stoim: TBAFloat read _Get_M_Nulevaya_stoim;
    property M_Razm_objyavl: TBABoolean read _Get_M_Razm_objyavl;
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property M_Razr_mnogitelj: TBABoolean read _Get_M_Razr_mnogitelj;
    property M_Mnogitelj: TBAFloat read _Get_M_Mnogitelj;
    property M_Oplachen: TBABoolean read _Get_M_Oplachen;
    property M_Ne_vystavlen: TBABoolean read _Get_M_Ne_vystavlen;
    property M_Oplacheno_itogo: TBAFloat read _Get_M_Oplacheno_itogo;
    property M_Dolg_itogo: TBAFloat read _Get_M_Dolg_itogo;
    property M_Nalich_dolg: TBAFloat read _Get_M_Nalich_dolg;
    property M_Stoim_nal: TBAFloat read _Get_M_Stoim_nal;
    property M_razm_reklamu_v: TBoldObjectReference read _Get_M_razm_reklamu_v;
    property M_imeet_razmery: TBoldObjectReference read _Get_M_imeet_razmery;
    property M_imeet_stoim_kv_sm: TBoldObjectReference read _Get_M_imeet_stoim_kv_sm;
    property M_razmesh_kak_sledstv: TBoldObjectReference read _Get_M_razmesh_kak_sledstv;
    property M_vyhodit_v_vypuskah: TVypusk_gazetyList read _Getvyhodit_v_vypuskah;
    property M_Vyhod: TVyhodList read _GetVyhod;
    property M_imeet_oplaty: TOplataList read _Getimeet_oplaty;
    property M_imeet_tip_reklamy: TBoldObjectReference read _Get_M_imeet_tip_reklamy;
    property M_yavl_reklamoi_dlya: TBoldObjectReference read _Get_M_yavl_reklamoi_dlya;
    property M_imeet_skidki: TSkidkaList read _Getimeet_skidki;
    property M_Sootn_so_skidk: TSootn_so_skidkList read _GetSootn_so_skidk;
    property M_imeet_stoim_dop_rab: TDobavochnaya_stoimList read _Getimeet_stoim_dop_rab;
    property M_imeet_scheta_oplaty: TPozic_schtaList read _Getimeet_scheta_oplaty;
    property M_vedyotsya_sotrudnikom: TBoldObjectReference read _Get_M_vedyotsya_sotrudnikom;
    property M_imeet_otnos_oplaty: TOplataList read _Getimeet_otnos_oplaty;
    property Data: TDateTime read _GetData write _SetData;
    property Fail_imya: String read _GetFail_imya write _SetFail_imya;
    property Stoimostj_po_plosh: double read _GetStoimostj_po_plosh;
    property Isp_ustan_stoim: Boolean read _GetIsp_ustan_stoim write _SetIsp_ustan_stoim;
    property Ustan_stoim: double read _GetUstan_stoim write _SetUstan_stoim;
    property Vsego_stoim: double read _GetVsego_stoim;
    property Proshlo: Boolean read _GetProshlo write _SetProshlo;
    property Ploshadj: double read _GetPloshadj;
    property Oboznach_strok: String read _GetOboznach_strok write _SetOboznach_strok;
    property Identifikator_risunka: Integer read _GetIdentifikator_risunka write _SetIdentifikator_risunka;
    property Nomer_stranicy: Integer read _GetNomer_stranicy write _SetNomer_stranicy;
    property Zakryt: Boolean read _GetZakryt write _SetZakryt;
    property Opisanie: String read _GetOpisanie write _SetOpisanie;
    property Kolichestvo_strok: Integer read _GetKolichestvo_strok write _SetKolichestvo_strok;
    property Bez_skidok: Boolean read _GetBez_skidok write _SetBez_skidok;
    property Vysota: double read _GetVysota write _SetVysota;
    property Shirina: double read _GetShirina write _SetShirina;
    property Isp_stand_razmer: Boolean read _GetIsp_stand_razmer write _SetIsp_stand_razmer;
    property Bonus: Boolean read _GetBonus;
    property Opt_dlya_dolgih: Boolean read _GetOpt_dlya_dolgih;
    property Za_chisl_strok: Boolean read _GetZa_chisl_strok;
    property Chislo_strok: double read _GetChislo_strok;
    property Opt_procent: double read _GetOpt_procent;
    property Bonus_vyhod: double read _GetBonus_vyhod;
    property Stoim_stroki: double read _GetStoim_stroki;
    property Vsego_stoim_po_vyh: double read _GetVsego_stoim_po_vyh;
    property Vsego_dob_stoim: double read _GetVsego_dob_stoim;
    property Vsego_dob_stoim_po_vyh: double read _GetVsego_dob_stoim_po_vyh;
    property Obshaya_stoim: double read _GetObshaya_stoim;
    property Nulevaya_stoim: double read _GetNulevaya_stoim;
    property Razm_objyavl: Boolean read _GetRazm_objyavl write _SetRazm_objyavl;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
    property Razr_mnogitelj: Boolean read _GetRazr_mnogitelj;
    property Mnogitelj: double read _GetMnogitelj write _SetMnogitelj;
    property Oplachen: Boolean read _GetOplachen;
    property Ne_vystavlen: Boolean read _GetNe_vystavlen;
    property Oplacheno_itogo: double read _GetOplacheno_itogo;
    property Dolg_itogo: double read _GetDolg_itogo;
    property Nalich_dolg: double read _GetNalich_dolg;
    property Stoim_nal: double read _GetStoim_nal;
    property razm_reklamu_v: TRazdel_izdaniya read _Getrazm_reklamu_v write _Setrazm_reklamu_v;
    property imeet_razmery: TRazmery read _Getimeet_razmery write _Setimeet_razmery;
    property imeet_stoim_kv_sm: TStoimostj read _Getimeet_stoim_kv_sm write _Setimeet_stoim_kv_sm;
    property razmesh_kak_sledstv: TKontakt read _Getrazmesh_kak_sledstv write _Setrazmesh_kak_sledstv;
    property vyhodit_v_vypuskah: TVypusk_gazetyList read _Getvyhodit_v_vypuskah;
    property Vyhod: TVyhodList read _GetVyhod;
    property imeet_oplaty: TOplataList read _Getimeet_oplaty;
    property imeet_tip_reklamy: TTip_reklamy read _Getimeet_tip_reklamy write _Setimeet_tip_reklamy;
    property yavl_reklamoi_dlya: TKlient read _Getyavl_reklamoi_dlya write _Setyavl_reklamoi_dlya;
    property imeet_skidki: TSkidkaList read _Getimeet_skidki;
    property Sootn_so_skidk: TSootn_so_skidkList read _GetSootn_so_skidk;
    property imeet_stoim_dop_rab: TDobavochnaya_stoimList read _Getimeet_stoim_dop_rab;
    property imeet_scheta_oplaty: TPozic_schtaList read _Getimeet_scheta_oplaty;
    property vedyotsya_sotrudnikom: TPersonal read _Getvedyotsya_sotrudnikom write _Setvedyotsya_sotrudnikom;
    property imeet_otnos_oplaty: TOplataList read _Getimeet_otnos_oplaty;
  end;

  TRazreshenie = class(TBusinessClassesRoot)
  private
    function _Get_M_Razreshitj: TBABoolean;
    function _GetRazreshitj: Boolean;
    procedure _SetRazreshitj(const NewValue: Boolean);
  protected
  public
    property M_Razreshitj: TBABoolean read _Get_M_Razreshitj;
    property Razreshitj: Boolean read _GetRazreshitj write _SetRazreshitj;
  end;

  TReiting_klienta = class(TBusinessClassesRoot)
  private
    function _Get_M_Reiting: TBAInteger;
    function _GetReiting: Integer;
    procedure _SetReiting(const NewValue: Integer);
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
    function _Get_M_V_chyornom_spiske: TBABoolean;
    function _GetV_chyornom_spiske: Boolean;
    procedure _SetV_chyornom_spiske(const NewValue: Boolean);
    function _Get_M_Somniteljnyi: TBABoolean;
    function _GetSomniteljnyi: Boolean;
    procedure _SetSomniteljnyi(const NewValue: Boolean);
    function _Get_M_Vagnyi: TBABoolean;
    function _GetVagnyi: Boolean;
    procedure _SetVagnyi(const NewValue: Boolean);
    function _Get_M_Privilegir: TBABoolean;
    function _GetPrivilegir: Boolean;
    procedure _SetPrivilegir(const NewValue: Boolean);
    function _Getharakteriz_klienta: TKlientList;
  protected
  public
    property M_Reiting: TBAInteger read _Get_M_Reiting;
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property M_V_chyornom_spiske: TBABoolean read _Get_M_V_chyornom_spiske;
    property M_Somniteljnyi: TBABoolean read _Get_M_Somniteljnyi;
    property M_Vagnyi: TBABoolean read _Get_M_Vagnyi;
    property M_Privilegir: TBABoolean read _Get_M_Privilegir;
    property M_harakteriz_klienta: TKlientList read _Getharakteriz_klienta;
    property Reiting: Integer read _GetReiting write _SetReiting;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
    property V_chyornom_spiske: Boolean read _GetV_chyornom_spiske write _SetV_chyornom_spiske;
    property Somniteljnyi: Boolean read _GetSomniteljnyi write _SetSomniteljnyi;
    property Vagnyi: Boolean read _GetVagnyi write _SetVagnyi;
    property Privilegir: Boolean read _GetPrivilegir write _SetPrivilegir;
    property harakteriz_klienta: TKlientList read _Getharakteriz_klienta;
  end;

  TSootn_so_skidk = class(TBusinessClassesRoot)
  private
    function _Getimeet_skidki: TSkidka;
    function _Get_M_imeet_skidki: TBoldObjectReference;
    function _Getformir_cenu_na: TRazmeshenie_reklamy;
    function _Get_M_formir_cenu_na: TBoldObjectReference;
  protected
  public
    property M_imeet_skidki: TBoldObjectReference read _Get_M_imeet_skidki;
    property M_formir_cenu_na: TBoldObjectReference read _Get_M_formir_cenu_na;
    property imeet_skidki: TSkidka read _Getimeet_skidki;
    property formir_cenu_na: TRazmeshenie_reklamy read _Getformir_cenu_na;
  end;

  TSootn_tipa_so_skidk = class(TBusinessClassesRoot)
  private
    function _Gettip_rekl_imeet_skidki: TSkidka;
    function _Get_M_tip_rekl_imeet_skidki: TBoldObjectReference;
    function _Getharakt_skidk_tip_rekl: TTip_reklamy;
    function _Get_M_harakt_skidk_tip_rekl: TBoldObjectReference;
  protected
  public
    property M_tip_rekl_imeet_skidki: TBoldObjectReference read _Get_M_tip_rekl_imeet_skidki;
    property M_harakt_skidk_tip_rekl: TBoldObjectReference read _Get_M_harakt_skidk_tip_rekl;
    property tip_rekl_imeet_skidki: TSkidka read _Gettip_rekl_imeet_skidki;
    property harakt_skidk_tip_rekl: TTip_reklamy read _Getharakt_skidk_tip_rekl;
  end;

  TSostoyanie_kontakta = class(TBusinessClassesRoot)
  private
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
    function _Getopis_sost_kontakta: TKontaktList;
    function _Getpromatriv_pers: TPersonalList;
    function _GetRazreshenie_prosmatrivatj: TRazreshenie_prosmatrivatjList;
    function _Getustanavlivaetsya: TPersonalList;
    function _GetRazreshenie_ustanavl: TRazreshenie_ustanavlList;
    function _Getizmenyaetsya: TPersonalList;
    function _GetRazreshenie_vyhoditj: TRazreshenie_vyhoditjList;
    function _Getimeet_perehodnye: TSostoyanie_kontaktaList;
    function _Getimeet_perehodnyePrichina: TPrichinaList;
    function _Getyavl_konc_perehoda_iz: TSostoyanie_kontaktaList;
    function _Getyavl_konc_perehoda_izPrichina: TPrichinaList;
    function _Getotnositsya_k_tipu_kontakt: TTip_kontaktaList;
  protected
  public
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property M_opis_sost_kontakta: TKontaktList read _Getopis_sost_kontakta;
    property M_promatriv_pers: TPersonalList read _Getpromatriv_pers;
    property M_Razreshenie_prosmatrivatj: TRazreshenie_prosmatrivatjList read _GetRazreshenie_prosmatrivatj;
    property M_ustanavlivaetsya: TPersonalList read _Getustanavlivaetsya;
    property M_Razreshenie_ustanavl: TRazreshenie_ustanavlList read _GetRazreshenie_ustanavl;
    property M_izmenyaetsya: TPersonalList read _Getizmenyaetsya;
    property M_Razreshenie_vyhoditj: TRazreshenie_vyhoditjList read _GetRazreshenie_vyhoditj;
    property M_imeet_perehodnye: TSostoyanie_kontaktaList read _Getimeet_perehodnye;
    property M_imeet_perehodnyePrichina: TPrichinaList read _Getimeet_perehodnyePrichina;
    property M_yavl_konc_perehoda_iz: TSostoyanie_kontaktaList read _Getyavl_konc_perehoda_iz;
    property M_yavl_konc_perehoda_izPrichina: TPrichinaList read _Getyavl_konc_perehoda_izPrichina;
    property M_otnositsya_k_tipu_kontakt: TTip_kontaktaList read _Getotnositsya_k_tipu_kontakt;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
    property opis_sost_kontakta: TKontaktList read _Getopis_sost_kontakta;
    property promatriv_pers: TPersonalList read _Getpromatriv_pers;
    property Razreshenie_prosmatrivatj: TRazreshenie_prosmatrivatjList read _GetRazreshenie_prosmatrivatj;
    property ustanavlivaetsya: TPersonalList read _Getustanavlivaetsya;
    property Razreshenie_ustanavl: TRazreshenie_ustanavlList read _GetRazreshenie_ustanavl;
    property izmenyaetsya: TPersonalList read _Getizmenyaetsya;
    property Razreshenie_vyhoditj: TRazreshenie_vyhoditjList read _GetRazreshenie_vyhoditj;
    property imeet_perehodnye: TSostoyanie_kontaktaList read _Getimeet_perehodnye;
    property imeet_perehodnyePrichina: TPrichinaList read _Getimeet_perehodnyePrichina;
    property yavl_konc_perehoda_iz: TSostoyanie_kontaktaList read _Getyavl_konc_perehoda_iz;
    property yavl_konc_perehoda_izPrichina: TPrichinaList read _Getyavl_konc_perehoda_izPrichina;
    property otnositsya_k_tipu_kontakt: TTip_kontaktaList read _Getotnositsya_k_tipu_kontakt;
  end;

  TSpravochnik = class(TBusinessClassesRoot)
  private
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
    function _Get_M_Ustarevshaya: TBABoolean;
    function _GetUstarevshaya: Boolean;
    procedure _SetUstarevshaya(const NewValue: Boolean);
  protected
  public
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property M_Ustarevshaya: TBABoolean read _Get_M_Ustarevshaya;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
    property Ustarevshaya: Boolean read _GetUstarevshaya write _SetUstarevshaya;
  end;

  TSchyot = class(TBusinessClassesRoot)
  private
    function _Get_M_Opisanie: TBAString;
    function _GetOpisanie: String;
    procedure _SetOpisanie(const NewValue: String);
    function _Get_M_Nomer_schyota: TBAInteger;
    function _GetNomer_schyota: Integer;
    procedure _SetNomer_schyota(const NewValue: Integer);
    function _Get_M_Summa: TBAFloat;
    function _GetSumma: double;
    function _Get_M_Vystavlen: TBABoolean;
    function _GetVystavlen: Boolean;
    procedure _SetVystavlen(const NewValue: Boolean);
    function _Get_M_Oplachen: TBABoolean;
    function _GetOplachen: Boolean;
    procedure _SetOplachen(const NewValue: Boolean);
    function _Get_M_Primechanie: TBAString;
    function _GetPrimechanie: String;
    procedure _SetPrimechanie(const NewValue: String);
    function _Get_M_Opl_po_prih_ord: TBABoolean;
    function _GetOpl_po_prih_ord: Boolean;
    procedure _SetOpl_po_prih_ord(const NewValue: Boolean);
    function _Get_M_Oplach_po_summe: TBABoolean;
    function _GetOplach_po_summe: Boolean;
    function _Get_M_Onulirovan: TBABoolean;
    function _GetOnulirovan: Boolean;
    procedure _SetOnulirovan(const NewValue: Boolean);
    function _Get_M_Data: TBADateTime;
    function _GetData: TDateTime;
    procedure _SetData(const NewValue: TDateTime);
    function _Getvklyuchaet_oplatu: TOplataList;
    function _Getimeet_pozic_opl_reklamy: TKlient;
    function _Get_M_imeet_pozic_opl_reklamy: TBoldObjectReference;
    procedure _Setimeet_pozic_opl_reklamy(const value: TKlient);
    function _Getsostoit_iz_pozicii: TPozic_schtaList;
  protected
  public
    property M_Opisanie: TBAString read _Get_M_Opisanie;
    property M_Nomer_schyota: TBAInteger read _Get_M_Nomer_schyota;
    property M_Summa: TBAFloat read _Get_M_Summa;
    property M_Vystavlen: TBABoolean read _Get_M_Vystavlen;
    property M_Oplachen: TBABoolean read _Get_M_Oplachen;
    property M_Primechanie: TBAString read _Get_M_Primechanie;
    property M_Opl_po_prih_ord: TBABoolean read _Get_M_Opl_po_prih_ord;
    property M_Oplach_po_summe: TBABoolean read _Get_M_Oplach_po_summe;
    property M_Onulirovan: TBABoolean read _Get_M_Onulirovan;
    property M_Data: TBADateTime read _Get_M_Data;
    property M_vklyuchaet_oplatu: TOplataList read _Getvklyuchaet_oplatu;
    property M_imeet_pozic_opl_reklamy: TBoldObjectReference read _Get_M_imeet_pozic_opl_reklamy;
    property M_sostoit_iz_pozicii: TPozic_schtaList read _Getsostoit_iz_pozicii;
    property Opisanie: String read _GetOpisanie write _SetOpisanie;
    property Nomer_schyota: Integer read _GetNomer_schyota write _SetNomer_schyota;
    property Summa: double read _GetSumma;
    property Vystavlen: Boolean read _GetVystavlen write _SetVystavlen;
    property Oplachen: Boolean read _GetOplachen write _SetOplachen;
    property Primechanie: String read _GetPrimechanie write _SetPrimechanie;
    property Opl_po_prih_ord: Boolean read _GetOpl_po_prih_ord write _SetOpl_po_prih_ord;
    property Oplach_po_summe: Boolean read _GetOplach_po_summe;
    property Onulirovan: Boolean read _GetOnulirovan write _SetOnulirovan;
    property Data: TDateTime read _GetData write _SetData;
    property vklyuchaet_oplatu: TOplataList read _Getvklyuchaet_oplatu;
    property imeet_pozic_opl_reklamy: TKlient read _Getimeet_pozic_opl_reklamy write _Setimeet_pozic_opl_reklamy;
    property sostoit_iz_pozicii: TPozic_schtaList read _Getsostoit_iz_pozicii;
  end;

  TEffekt = class(TBusinessClassesRoot)
  private
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
    function _Get_M_Nesyot_proekt: TBABoolean;
    function _GetNesyot_proekt: Boolean;
    procedure _SetNesyot_proekt(const NewValue: Boolean);
    function _Get_M_Nesyot_dokument: TBABoolean;
    function _GetNesyot_dokument: Boolean;
    procedure _SetNesyot_dokument(const NewValue: Boolean);
    function _Getsledstvie_kontakta: TKontaktList;
    function _Getotnositsya_po_tipu: TStandartnyi_effekt;
    function _Get_M_otnositsya_po_tipu: TBoldObjectReference;
    procedure _Setotnositsya_po_tipu(const value: TStandartnyi_effekt);
    function _Getopis_effekt_ot_proekta: TProekt;
    function _Get_M_opis_effekt_ot_proekta: TBoldObjectReference;
    procedure _Setopis_effekt_ot_proekta(const value: TProekt);
    function _Getopis_effekt_ot_zadach: TZadacha;
    function _Get_M_opis_effekt_ot_zadach: TBoldObjectReference;
    procedure _Setopis_effekt_ot_zadach(const value: TZadacha);
  protected
  public
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property M_Nesyot_proekt: TBABoolean read _Get_M_Nesyot_proekt;
    property M_Nesyot_dokument: TBABoolean read _Get_M_Nesyot_dokument;
    property M_sledstvie_kontakta: TKontaktList read _Getsledstvie_kontakta;
    property M_otnositsya_po_tipu: TBoldObjectReference read _Get_M_otnositsya_po_tipu;
    property M_opis_effekt_ot_proekta: TBoldObjectReference read _Get_M_opis_effekt_ot_proekta;
    property M_opis_effekt_ot_zadach: TBoldObjectReference read _Get_M_opis_effekt_ot_zadach;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
    property Nesyot_proekt: Boolean read _GetNesyot_proekt write _SetNesyot_proekt;
    property Nesyot_dokument: Boolean read _GetNesyot_dokument write _SetNesyot_dokument;
    property sledstvie_kontakta: TKontaktList read _Getsledstvie_kontakta;
    property otnositsya_po_tipu: TStandartnyi_effekt read _Getotnositsya_po_tipu write _Setotnositsya_po_tipu;
    property opis_effekt_ot_proekta: TProekt read _Getopis_effekt_ot_proekta write _Setopis_effekt_ot_proekta;
    property opis_effekt_ot_zadach: TZadacha read _Getopis_effekt_ot_zadach write _Setopis_effekt_ot_zadach;
  end;

  TOrganizaciya = class(TPersona)
  private
    function _Get_M_Strana: TBAString;
    function _GetStrana: String;
    procedure _SetStrana(const NewValue: String);
    function _Get_M_Oblastj: TBAString;
    function _GetOblastj: String;
    procedure _SetOblastj(const NewValue: String);
    function _Get_M_Gorod: TBAString;
    function _GetGorod: String;
    procedure _SetGorod(const NewValue: String);
    function _Get_M_BIK: TBAString;
    function _GetBIK: String;
    procedure _SetBIK(const NewValue: String);
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_YavlyaetsyaVlad: TBABoolean;
    function _GetYavlyaetsyaVlad: Boolean;
    procedure _SetYavlyaetsyaVlad(const NewValue: Boolean);
    function _Get_M_Rukovoditelj: TBAString;
    function _GetRukovoditelj: String;
    procedure _SetRukovoditelj(const NewValue: String);
    function _Get_M_GlBuhgalter: TBAString;
    function _GetGlBuhgalter: String;
    procedure _SetGlBuhgalter(const NewValue: String);
    function _Get_M_INN: TBAString;
    function _GetINN: String;
    procedure _SetINN(const NewValue: String);
    function _Get_M_Rasch__schet: TBAString;
    function _GetRasch__schet: String;
    procedure _SetRasch__schet(const NewValue: String);
    function _Get_M_KPP: TBAString;
    function _GetKPP: String;
    procedure _SetKPP(const NewValue: String);
    function _Get_M_Tip_organizacii: TBAString;
    function _GetTip_organizacii: String;
    procedure _SetTip_organizacii(const NewValue: String);
    function _Get_M_Kor_schet: TBAString;
    function _GetKor_schet: String;
    procedure _SetKor_schet(const NewValue: String);
    function _Get_M_Naim__banka: TBAString;
    function _GetNaim__banka: String;
    procedure _SetNaim__banka(const NewValue: String);
    function _Get_M_Telefon_buhgaltera: TBAString;
    function _GetTelefon_buhgaltera: String;
    procedure _SetTelefon_buhgaltera(const NewValue: String);
    function _Get_M_Telefon_rukovoditelya: TBAString;
    function _GetTelefon_rukovoditelya: String;
    procedure _SetTelefon_rukovoditelya(const NewValue: String);
    function _Get_M_Telef_menedgera: TBAString;
    function _GetTelef_menedgera: String;
    procedure _SetTelef_menedgera(const NewValue: String);
    function _Get_M_Tip_sobstvennosti: TBAString;
    function _GetTip_sobstvennosti: String;
    procedure _SetTip_sobstvennosti(const NewValue: String);
    function _Get_M_Adres_saita: TBAString;
    function _GetAdres_saita: String;
    procedure _SetAdres_saita(const NewValue: String);
  protected
  public
    property M_Strana: TBAString read _Get_M_Strana;
    property M_Oblastj: TBAString read _Get_M_Oblastj;
    property M_Gorod: TBAString read _Get_M_Gorod;
    property M_BIK: TBAString read _Get_M_BIK;
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_YavlyaetsyaVlad: TBABoolean read _Get_M_YavlyaetsyaVlad;
    property M_Rukovoditelj: TBAString read _Get_M_Rukovoditelj;
    property M_GlBuhgalter: TBAString read _Get_M_GlBuhgalter;
    property M_INN: TBAString read _Get_M_INN;
    property M_Rasch__schet: TBAString read _Get_M_Rasch__schet;
    property M_KPP: TBAString read _Get_M_KPP;
    property M_Tip_organizacii: TBAString read _Get_M_Tip_organizacii;
    property M_Kor_schet: TBAString read _Get_M_Kor_schet;
    property M_Naim__banka: TBAString read _Get_M_Naim__banka;
    property M_Telefon_buhgaltera: TBAString read _Get_M_Telefon_buhgaltera;
    property M_Telefon_rukovoditelya: TBAString read _Get_M_Telefon_rukovoditelya;
    property M_Telef_menedgera: TBAString read _Get_M_Telef_menedgera;
    property M_Tip_sobstvennosti: TBAString read _Get_M_Tip_sobstvennosti;
    property M_Adres_saita: TBAString read _Get_M_Adres_saita;
    property Strana: String read _GetStrana write _SetStrana;
    property Oblastj: String read _GetOblastj write _SetOblastj;
    property Gorod: String read _GetGorod write _SetGorod;
    property BIK: String read _GetBIK write _SetBIK;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property YavlyaetsyaVlad: Boolean read _GetYavlyaetsyaVlad write _SetYavlyaetsyaVlad;
    property Rukovoditelj: String read _GetRukovoditelj write _SetRukovoditelj;
    property GlBuhgalter: String read _GetGlBuhgalter write _SetGlBuhgalter;
    property INN: String read _GetINN write _SetINN;
    property Rasch__schet: String read _GetRasch__schet write _SetRasch__schet;
    property KPP: String read _GetKPP write _SetKPP;
    property Tip_organizacii: String read _GetTip_organizacii write _SetTip_organizacii;
    property Kor_schet: String read _GetKor_schet write _SetKor_schet;
    property Naim__banka: String read _GetNaim__banka write _SetNaim__banka;
    property Telefon_buhgaltera: String read _GetTelefon_buhgaltera write _SetTelefon_buhgaltera;
    property Telefon_rukovoditelya: String read _GetTelefon_rukovoditelya write _SetTelefon_rukovoditelya;
    property Telef_menedgera: String read _GetTelef_menedgera write _SetTelef_menedgera;
    property Tip_sobstvennosti: String read _GetTip_sobstvennosti write _SetTip_sobstvennosti;
    property Adres_saita: String read _GetAdres_saita write _SetAdres_saita;
  end;

  TRazreshenie_vyhoditj = class(TRazreshenie)
  private
    function _Getizmenyaetsya: TPersonal;
    function _Get_M_izmenyaetsya: TBoldObjectReference;
    function _Getimeet_pravo_izmenyatj: TSostoyanie_kontakta;
    function _Get_M_imeet_pravo_izmenyatj: TBoldObjectReference;
  protected
  public
    property M_izmenyaetsya: TBoldObjectReference read _Get_M_izmenyaetsya;
    property M_imeet_pravo_izmenyatj: TBoldObjectReference read _Get_M_imeet_pravo_izmenyatj;
    property izmenyaetsya: TPersonal read _Getizmenyaetsya;
    property imeet_pravo_izmenyatj: TSostoyanie_kontakta read _Getimeet_pravo_izmenyatj;
  end;

  TRazreshenie_prosmatrivatj = class(TRazreshenie)
  private
    function _Getpromatriv_pers: TPersonal;
    function _Get_M_promatriv_pers: TBoldObjectReference;
    function _Getmog_prosmatrivatj: TSostoyanie_kontakta;
    function _Get_M_mog_prosmatrivatj: TBoldObjectReference;
  protected
  public
    property M_promatriv_pers: TBoldObjectReference read _Get_M_promatriv_pers;
    property M_mog_prosmatrivatj: TBoldObjectReference read _Get_M_mog_prosmatrivatj;
    property promatriv_pers: TPersonal read _Getpromatriv_pers;
    property mog_prosmatrivatj: TSostoyanie_kontakta read _Getmog_prosmatrivatj;
  end;

  TRazreshenie_ustanavl = class(TRazreshenie)
  private
    function _Getustanavlivaetsya: TPersonal;
    function _Get_M_ustanavlivaetsya: TBoldObjectReference;
    function _Getimeet_pravo_ustanavl: TSostoyanie_kontakta;
    function _Get_M_imeet_pravo_ustanavl: TBoldObjectReference;
  protected
  public
    property M_ustanavlivaetsya: TBoldObjectReference read _Get_M_ustanavlivaetsya;
    property M_imeet_pravo_ustanavl: TBoldObjectReference read _Get_M_imeet_pravo_ustanavl;
    property ustanavlivaetsya: TPersonal read _Getustanavlivaetsya;
    property imeet_pravo_ustanavl: TSostoyanie_kontakta read _Getimeet_pravo_ustanavl;
  end;

  TAbstraktnyi_standart = class(TSpravochnik)
  private
    function _Get_M_Kod: TBAString;
    function _GetKod: String;
    procedure _SetKod(const NewValue: String);
  protected
  public
    property M_Kod: TBAString read _Get_M_Kod;
    property Kod: String read _GetKod write _SetKod;
  end;

  TDobavochnaya_stoim = class(TSpravochnik)
  private
    function _Get_M_Summa: TBAFloat;
    function _GetSumma: double;
    procedure _SetSumma(const NewValue: double);
    function _Getotnositsya_k_konkr_razm: TVyhod;
    function _Get_M_otnositsya_k_konkr_razm: TBoldObjectReference;
    procedure _Setotnositsya_k_konkr_razm(const value: TVyhod);
    function _Getopis_raboty_po_reklame: TRazmeshenie_reklamy;
    function _Get_M_opis_raboty_po_reklame: TBoldObjectReference;
    procedure _Setopis_raboty_po_reklame(const value: TRazmeshenie_reklamy);
    function _Getopisyvaet_stoim_razrab: TProekt;
    function _Get_M_opisyvaet_stoim_razrab: TBoldObjectReference;
    procedure _Setopisyvaet_stoim_razrab(const value: TProekt);
  protected
  public
    property M_Summa: TBAFloat read _Get_M_Summa;
    property M_otnositsya_k_konkr_razm: TBoldObjectReference read _Get_M_otnositsya_k_konkr_razm;
    property M_opis_raboty_po_reklame: TBoldObjectReference read _Get_M_opis_raboty_po_reklame;
    property M_opisyvaet_stoim_razrab: TBoldObjectReference read _Get_M_opisyvaet_stoim_razrab;
    property Summa: double read _GetSumma write _SetSumma;
    property otnositsya_k_konkr_razm: TVyhod read _Getotnositsya_k_konkr_razm write _Setotnositsya_k_konkr_razm;
    property opis_raboty_po_reklame: TRazmeshenie_reklamy read _Getopis_raboty_po_reklame write _Setopis_raboty_po_reklame;
    property opisyvaet_stoim_razrab: TProekt read _Getopisyvaet_stoim_razrab write _Setopisyvaet_stoim_razrab;
  end;

  TDolgnostj = class(TSpravochnik)
  private
    function _Getopr_dolgnostj_dlya: TPersonalList;
  protected
  public
    property M_opr_dolgnostj_dlya: TPersonalList read _Getopr_dolgnostj_dlya;
    property opr_dolgnostj_dlya: TPersonalList read _Getopr_dolgnostj_dlya;
  end;

  TZadacha = class(TSpravochnik)
  private
    function _Get_M_Imenovanie: TBAString;
    function _GetImenovanie: String;
    procedure _SetImenovanie(const NewValue: String);
    function _Get_M_Vypolnena: TBABoolean;
    function _GetVypolnena: Boolean;
    procedure _SetVypolnena(const NewValue: Boolean);
    function _Get_M_Nachalo_plan: TBADateTime;
    function _GetNachalo_plan: TDateTime;
    procedure _SetNachalo_plan(const NewValue: TDateTime);
    function _Get_M_Konec_plan: TBADateTime;
    function _GetKonec_plan: TDateTime;
    procedure _SetKonec_plan(const NewValue: TDateTime);
    function _Get_M_Nachalo_fakt: TBADateTime;
    function _GetNachalo_fakt: TDateTime;
    procedure _SetNachalo_fakt(const NewValue: TDateTime);
    function _Get_M_Konec_fakt: TBADateTime;
    function _GetKonec_fakt: TDateTime;
    procedure _SetKonec_fakt(const NewValue: TDateTime);
    function _Getorientir_na: TKlient;
    function _Get_M_orientir_na: TBoldObjectReference;
    procedure _Setorientir_na(const value: TKlient);
    function _Getimeet_napominaniya: TNapominanieList;
    function _Getotnos__k_stand_zadach: TStandartnaya_zadacha;
    function _Get_M_otnos__k_stand_zadach: TBoldObjectReference;
    procedure _Setotnos__k_stand_zadach(const value: TStandartnaya_zadacha);
    function _Getotnos_kak_zadach_k_prich: TRealjnaya_prichinaList;
    function _GetLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList;
    function _Getvhodit_v_sost_proekta: TProekt;
    function _Get_M_vhodit_v_sost_proekta: TBoldObjectReference;
    procedure _Setvhodit_v_sost_proekta(const value: TProekt);
    function _Getzadacha_imeet_effekty: TEffektList;
  protected
  public
    property M_Imenovanie: TBAString read _Get_M_Imenovanie;
    property M_Vypolnena: TBABoolean read _Get_M_Vypolnena;
    property M_Nachalo_plan: TBADateTime read _Get_M_Nachalo_plan;
    property M_Konec_plan: TBADateTime read _Get_M_Konec_plan;
    property M_Nachalo_fakt: TBADateTime read _Get_M_Nachalo_fakt;
    property M_Konec_fakt: TBADateTime read _Get_M_Konec_fakt;
    property M_orientir_na: TBoldObjectReference read _Get_M_orientir_na;
    property M_imeet_napominaniya: TNapominanieList read _Getimeet_napominaniya;
    property M_otnos__k_stand_zadach: TBoldObjectReference read _Get_M_otnos__k_stand_zadach;
    property M_otnos_kak_zadach_k_prich: TRealjnaya_prichinaList read _Getotnos_kak_zadach_k_prich;
    property M_Linkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList read _GetLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi;
    property M_vhodit_v_sost_proekta: TBoldObjectReference read _Get_M_vhodit_v_sost_proekta;
    property M_zadacha_imeet_effekty: TEffektList read _Getzadacha_imeet_effekty;
    property Imenovanie: String read _GetImenovanie write _SetImenovanie;
    property Vypolnena: Boolean read _GetVypolnena write _SetVypolnena;
    property Nachalo_plan: TDateTime read _GetNachalo_plan write _SetNachalo_plan;
    property Konec_plan: TDateTime read _GetKonec_plan write _SetKonec_plan;
    property Nachalo_fakt: TDateTime read _GetNachalo_fakt write _SetNachalo_fakt;
    property Konec_fakt: TDateTime read _GetKonec_fakt write _SetKonec_fakt;
    property orientir_na: TKlient read _Getorientir_na write _Setorientir_na;
    property imeet_napominaniya: TNapominanieList read _Getimeet_napominaniya;
    property otnos__k_stand_zadach: TStandartnaya_zadacha read _Getotnos__k_stand_zadach write _Setotnos__k_stand_zadach;
    property otnos_kak_zadach_k_prich: TRealjnaya_prichinaList read _Getotnos_kak_zadach_k_prich;
    property Linkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList read _GetLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi;
    property vhodit_v_sost_proekta: TProekt read _Getvhodit_v_sost_proekta write _Setvhodit_v_sost_proekta;
    property zadacha_imeet_effekty: TEffektList read _Getzadacha_imeet_effekty;
  end;

  TIzdanie = class(TSpravochnik)
  private
    function _Getsostoit_iz_reklamnyh: TRazdel_izdaniyaList;
    function _Getimeet_vyhody: TVypusk_gazetyList;
    function _Getimeet_tekushii_vypusk: TVypusk_gazety;
    function _Get_M_imeet_tekushii_vypusk: TBoldObjectReference;
    procedure _Setimeet_tekushii_vypusk(const value: TVypusk_gazety);
  protected
  public
    property M_sostoit_iz_reklamnyh: TRazdel_izdaniyaList read _Getsostoit_iz_reklamnyh;
    property M_imeet_vyhody: TVypusk_gazetyList read _Getimeet_vyhody;
    property M_imeet_tekushii_vypusk: TBoldObjectReference read _Get_M_imeet_tekushii_vypusk;
    property sostoit_iz_reklamnyh: TRazdel_izdaniyaList read _Getsostoit_iz_reklamnyh;
    property imeet_vyhody: TVypusk_gazetyList read _Getimeet_vyhody;
    property imeet_tekushii_vypusk: TVypusk_gazety read _Getimeet_tekushii_vypusk write _Setimeet_tekushii_vypusk;
  end;

  TKontakt = class(TSpravochnik)
  private
    function _Get_M_Rezuljtat: TBAString;
    function _GetRezuljtat: String;
    procedure _SetRezuljtat(const NewValue: String);
    function _Get_M_Dog_na_razm_reklamy: TBABoolean;
    function _GetDog_na_razm_reklamy: Boolean;
    procedure _SetDog_na_razm_reklamy(const NewValue: Boolean);
    function _Get_M_Data: TBADateTime;
    function _GetData: TDateTime;
    procedure _SetData(const NewValue: TDateTime);
    function _Getyavl_kontaktom_s: TKlient;
    function _Get_M_yavl_kontaktom_s: TBoldObjectReference;
    procedure _Setyavl_kontaktom_s(const value: TKlient);
    function _Getyavl_prich_razm_rekl: TRazmeshenie_reklamyList;
    function _Getimeet_tip_kontakta: TTip_kontakta;
    function _Get_M_imeet_tip_kontakta: TBoldObjectReference;
    procedure _Setimeet_tip_kontakta(const value: TTip_kontakta);
    function _Getnahoditsya_v_sost: TSostoyanie_kontakta;
    function _Get_M_nahoditsya_v_sost: TBoldObjectReference;
    procedure _Setnahoditsya_v_sost(const value: TSostoyanie_kontakta);
    function _Getimeet_effekt: TEffekt;
    function _Get_M_imeet_effekt: TBoldObjectReference;
    procedure _Setimeet_effekt(const value: TEffekt);
    function _Getkontakt_imeet_napom: TNapominanieList;
  protected
  public
    property M_Rezuljtat: TBAString read _Get_M_Rezuljtat;
    property M_Dog_na_razm_reklamy: TBABoolean read _Get_M_Dog_na_razm_reklamy;
    property M_Data: TBADateTime read _Get_M_Data;
    property M_yavl_kontaktom_s: TBoldObjectReference read _Get_M_yavl_kontaktom_s;
    property M_yavl_prich_razm_rekl: TRazmeshenie_reklamyList read _Getyavl_prich_razm_rekl;
    property M_imeet_tip_kontakta: TBoldObjectReference read _Get_M_imeet_tip_kontakta;
    property M_nahoditsya_v_sost: TBoldObjectReference read _Get_M_nahoditsya_v_sost;
    property M_imeet_effekt: TBoldObjectReference read _Get_M_imeet_effekt;
    property M_kontakt_imeet_napom: TNapominanieList read _Getkontakt_imeet_napom;
    property Rezuljtat: String read _GetRezuljtat write _SetRezuljtat;
    property Dog_na_razm_reklamy: Boolean read _GetDog_na_razm_reklamy write _SetDog_na_razm_reklamy;
    property Data: TDateTime read _GetData write _SetData;
    property yavl_kontaktom_s: TKlient read _Getyavl_kontaktom_s write _Setyavl_kontaktom_s;
    property yavl_prich_razm_rekl: TRazmeshenie_reklamyList read _Getyavl_prich_razm_rekl;
    property imeet_tip_kontakta: TTip_kontakta read _Getimeet_tip_kontakta write _Setimeet_tip_kontakta;
    property nahoditsya_v_sost: TSostoyanie_kontakta read _Getnahoditsya_v_sost write _Setnahoditsya_v_sost;
    property imeet_effekt: TEffekt read _Getimeet_effekt write _Setimeet_effekt;
    property kontakt_imeet_napom: TNapominanieList read _Getkontakt_imeet_napom;
  end;

  TNapominanie = class(TSpravochnik)
  private
    function _Get_M_Imenovanie: TBAString;
    function _GetImenovanie: String;
    procedure _SetImenovanie(const NewValue: String);
    function _Get_M_Uchteno: TBABoolean;
    function _GetUchteno: Boolean;
    procedure _SetUchteno(const NewValue: Boolean);
    function _Get_M_Data: TBADateTime;
    function _GetData: TDateTime;
    procedure _SetData(const NewValue: TDateTime);
    function _Get_M_Data_vych: TBADateTime;
    function _GetData_vych: TDateTime;
    function _Get_M_Naim_vych: TBAString;
    function _GetNaim_vych: String;
    function _Get_M_Ot_kamp: TBABoolean;
    function _GetOt_kamp: Boolean;
    function _Getotnos_k_zadache: TZadacha;
    function _Get_M_otnos_k_zadache: TBoldObjectReference;
    procedure _Setotnos_k_zadache(const value: TZadacha);
    function _Getformir_uslovie: TUsloviyaList;
    function _Getotnos_k_kontaktu: TKontakt;
    function _Get_M_otnos_k_kontaktu: TBoldObjectReference;
    procedure _Setotnos_k_kontaktu(const value: TKontakt);
    function _Getotnos_k_stand_napom: TStandartnoe_napominanie;
    function _Get_M_otnos_k_stand_napom: TBoldObjectReference;
    procedure _Setotnos_k_stand_napom(const value: TStandartnoe_napominanie);
    function _Getyavl_napomin_dlya: TPersonal;
    function _Get_M_yavl_napomin_dlya: TBoldObjectReference;
    procedure _Setyavl_napomin_dlya(const value: TPersonal);
  protected
    procedure _Data_vych_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _Naim_vych_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _Ot_kamp_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    property M_Imenovanie: TBAString read _Get_M_Imenovanie;
    property M_Uchteno: TBABoolean read _Get_M_Uchteno;
    property M_Data: TBADateTime read _Get_M_Data;
    property M_Data_vych: TBADateTime read _Get_M_Data_vych;
    property M_Naim_vych: TBAString read _Get_M_Naim_vych;
    property M_Ot_kamp: TBABoolean read _Get_M_Ot_kamp;
    property M_otnos_k_zadache: TBoldObjectReference read _Get_M_otnos_k_zadache;
    property M_formir_uslovie: TUsloviyaList read _Getformir_uslovie;
    property M_otnos_k_kontaktu: TBoldObjectReference read _Get_M_otnos_k_kontaktu;
    property M_otnos_k_stand_napom: TBoldObjectReference read _Get_M_otnos_k_stand_napom;
    property M_yavl_napomin_dlya: TBoldObjectReference read _Get_M_yavl_napomin_dlya;
    property Imenovanie: String read _GetImenovanie write _SetImenovanie;
    property Uchteno: Boolean read _GetUchteno write _SetUchteno;
    property Data: TDateTime read _GetData write _SetData;
    property Data_vych: TDateTime read _GetData_vych;
    property Naim_vych: String read _GetNaim_vych;
    property Ot_kamp: Boolean read _GetOt_kamp;
    property otnos_k_zadache: TZadacha read _Getotnos_k_zadache write _Setotnos_k_zadache;
    property formir_uslovie: TUsloviyaList read _Getformir_uslovie;
    property otnos_k_kontaktu: TKontakt read _Getotnos_k_kontaktu write _Setotnos_k_kontaktu;
    property otnos_k_stand_napom: TStandartnoe_napominanie read _Getotnos_k_stand_napom write _Setotnos_k_stand_napom;
    property yavl_napomin_dlya: TPersonal read _Getyavl_napomin_dlya write _Setyavl_napomin_dlya;
  end;

  TPozic_schta = class(TSpravochnik)
  private
    function _Get_M_Summa: TBAFloat;
    function _GetSumma: double;
    procedure _SetSumma(const NewValue: double);
    function _Getyavl_schetom_na_opl_reklamy: TRazmeshenie_reklamy;
    function _Get_M_yavl_schetom_na_opl_reklamy: TBoldObjectReference;
    procedure _Setyavl_schetom_na_opl_reklamy(const value: TRazmeshenie_reklamy);
    function _Getvhodit_v_schyot: TSchyot;
    function _Get_M_vhodit_v_schyot: TBoldObjectReference;
    procedure _Setvhodit_v_schyot(const value: TSchyot);
  protected
  public
    property M_Summa: TBAFloat read _Get_M_Summa;
    property M_yavl_schetom_na_opl_reklamy: TBoldObjectReference read _Get_M_yavl_schetom_na_opl_reklamy;
    property M_vhodit_v_schyot: TBoldObjectReference read _Get_M_vhodit_v_schyot;
    property Summa: double read _GetSumma write _SetSumma;
    property yavl_schetom_na_opl_reklamy: TRazmeshenie_reklamy read _Getyavl_schetom_na_opl_reklamy write _Setyavl_schetom_na_opl_reklamy;
    property vhodit_v_schyot: TSchyot read _Getvhodit_v_schyot write _Setvhodit_v_schyot;
  end;

  TRazdel_izdaniya = class(TSpravochnik)
  private
    function _Get_M_Obshaya_ploshadj: TBAFloat;
    function _GetObshaya_ploshadj: double;
    procedure _SetObshaya_ploshadj(const NewValue: double);
    function _Get_M_Zanyato_ploshadi: TBAFloat;
    function _GetZanyato_ploshadi: double;
    function _Get_M_Svobodno_ploshadi: TBAFloat;
    function _GetSvobodno_ploshadi: double;
    function _Get_M_Nomera_stranic: TBAString;
    function _GetNomera_stranic: String;
    procedure _SetNomera_stranic(const NewValue: String);
    function _Get_M_Nomer_karty_izdaniya: TBAInteger;
    function _GetNomer_karty_izdaniya: Integer;
    procedure _SetNomer_karty_izdaniya(const NewValue: Integer);
    function _Getotnositsya_k_izd: TIzdanie;
    function _Get_M_otnositsya_k_izd: TBoldObjectReference;
    procedure _Setotnositsya_k_izd(const value: TIzdanie);
    function _Getyavl_mestom_reklamy: TRazmeshenie_reklamyList;
  protected
  public
    property M_Obshaya_ploshadj: TBAFloat read _Get_M_Obshaya_ploshadj;
    property M_Zanyato_ploshadi: TBAFloat read _Get_M_Zanyato_ploshadi;
    property M_Svobodno_ploshadi: TBAFloat read _Get_M_Svobodno_ploshadi;
    property M_Nomera_stranic: TBAString read _Get_M_Nomera_stranic;
    property M_Nomer_karty_izdaniya: TBAInteger read _Get_M_Nomer_karty_izdaniya;
    property M_otnositsya_k_izd: TBoldObjectReference read _Get_M_otnositsya_k_izd;
    property M_yavl_mestom_reklamy: TRazmeshenie_reklamyList read _Getyavl_mestom_reklamy;
    property Obshaya_ploshadj: double read _GetObshaya_ploshadj write _SetObshaya_ploshadj;
    property Zanyato_ploshadi: double read _GetZanyato_ploshadi;
    property Svobodno_ploshadi: double read _GetSvobodno_ploshadi;
    property Nomera_stranic: String read _GetNomera_stranic write _SetNomera_stranic;
    property Nomer_karty_izdaniya: Integer read _GetNomer_karty_izdaniya write _SetNomer_karty_izdaniya;
    property otnositsya_k_izd: TIzdanie read _Getotnositsya_k_izd write _Setotnositsya_k_izd;
    property yavl_mestom_reklamy: TRazmeshenie_reklamyList read _Getyavl_mestom_reklamy;
  end;

  TRazmery = class(TSpravochnik)
  private
    function _Get_M_Vysota: TBAFloat;
    function _GetVysota: double;
    procedure _SetVysota(const NewValue: double);
    function _Get_M_Shirina: TBAFloat;
    function _GetShirina: double;
    procedure _SetShirina(const NewValue: double);
    function _Get_M_Ploshadj: TBAFloat;
    function _GetPloshadj: double;
    function _Getyavl_razmerom_dlya: TRazmeshenie_reklamyList;
  protected
  public
    property M_Vysota: TBAFloat read _Get_M_Vysota;
    property M_Shirina: TBAFloat read _Get_M_Shirina;
    property M_Ploshadj: TBAFloat read _Get_M_Ploshadj;
    property M_yavl_razmerom_dlya: TRazmeshenie_reklamyList read _Getyavl_razmerom_dlya;
    property Vysota: double read _GetVysota write _SetVysota;
    property Shirina: double read _GetShirina write _SetShirina;
    property Ploshadj: double read _GetPloshadj;
    property yavl_razmerom_dlya: TRazmeshenie_reklamyList read _Getyavl_razmerom_dlya;
  end;

  TSkidka = class(TSpravochnik)
  private
    function _Get_M_Bonus: TBABoolean;
    function _GetBonus: Boolean;
    procedure _SetBonus(const NewValue: Boolean);
    function _Get_M_Opt_dlya_dolgih: TBABoolean;
    function _GetOpt_dlya_dolgih: Boolean;
    procedure _SetOpt_dlya_dolgih(const NewValue: Boolean);
    function _Get_M_Za_chisl_strok: TBABoolean;
    function _GetZa_chisl_strok: Boolean;
    procedure _SetZa_chisl_strok(const NewValue: Boolean);
    function _Get_M_Chislo_strok: TBAFloat;
    function _GetChislo_strok: double;
    procedure _SetChislo_strok(const NewValue: double);
    function _Get_M_Opt_procent: TBAFloat;
    function _GetOpt_procent: double;
    procedure _SetOpt_procent(const NewValue: double);
    function _Get_M_Bonus_vyhod: TBAFloat;
    function _GetBonus_vyhod: double;
    procedure _SetBonus_vyhod(const NewValue: double);
    function _Get_M_Stoim_stroki: TBAFloat;
    function _GetStoim_stroki: double;
    procedure _SetStoim_stroki(const NewValue: double);
    function _Get_M_Avtomaticheski: TBABoolean;
    function _GetAvtomaticheski: Boolean;
    procedure _SetAvtomaticheski(const NewValue: Boolean);
    function _Getformir_cenu_na: TRazmeshenie_reklamyList;
    function _GetSootn_so_skidk: TSootn_so_skidkList;
    function _Getharakt_skidk_tip_rekl: TTip_reklamyList;
    function _GetSootn_tipa_so_skidk: TSootn_tipa_so_skidkList;
  protected
  public
    property M_Bonus: TBABoolean read _Get_M_Bonus;
    property M_Opt_dlya_dolgih: TBABoolean read _Get_M_Opt_dlya_dolgih;
    property M_Za_chisl_strok: TBABoolean read _Get_M_Za_chisl_strok;
    property M_Chislo_strok: TBAFloat read _Get_M_Chislo_strok;
    property M_Opt_procent: TBAFloat read _Get_M_Opt_procent;
    property M_Bonus_vyhod: TBAFloat read _Get_M_Bonus_vyhod;
    property M_Stoim_stroki: TBAFloat read _Get_M_Stoim_stroki;
    property M_Avtomaticheski: TBABoolean read _Get_M_Avtomaticheski;
    property M_formir_cenu_na: TRazmeshenie_reklamyList read _Getformir_cenu_na;
    property M_Sootn_so_skidk: TSootn_so_skidkList read _GetSootn_so_skidk;
    property M_harakt_skidk_tip_rekl: TTip_reklamyList read _Getharakt_skidk_tip_rekl;
    property M_Sootn_tipa_so_skidk: TSootn_tipa_so_skidkList read _GetSootn_tipa_so_skidk;
    property Bonus: Boolean read _GetBonus write _SetBonus;
    property Opt_dlya_dolgih: Boolean read _GetOpt_dlya_dolgih write _SetOpt_dlya_dolgih;
    property Za_chisl_strok: Boolean read _GetZa_chisl_strok write _SetZa_chisl_strok;
    property Chislo_strok: double read _GetChislo_strok write _SetChislo_strok;
    property Opt_procent: double read _GetOpt_procent write _SetOpt_procent;
    property Bonus_vyhod: double read _GetBonus_vyhod write _SetBonus_vyhod;
    property Stoim_stroki: double read _GetStoim_stroki write _SetStoim_stroki;
    property Avtomaticheski: Boolean read _GetAvtomaticheski write _SetAvtomaticheski;
    property formir_cenu_na: TRazmeshenie_reklamyList read _Getformir_cenu_na;
    property Sootn_so_skidk: TSootn_so_skidkList read _GetSootn_so_skidk;
    property harakt_skidk_tip_rekl: TTip_reklamyList read _Getharakt_skidk_tip_rekl;
    property Sootn_tipa_so_skidk: TSootn_tipa_so_skidkList read _GetSootn_tipa_so_skidk;
  end;

  TSpecif_organizacii = class(TSpravochnik)
  private
    function _Getopisyv_specif_rab: TKlientList;
  protected
  public
    property M_opisyv_specif_rab: TKlientList read _Getopisyv_specif_rab;
    property opisyv_specif_rab: TKlientList read _Getopisyv_specif_rab;
  end;

  TStoimostj = class(TSpravochnik)
  private
    function _Get_M_Stoimostj_1_kv_sm: TBAFloat;
    function _GetStoimostj_1_kv_sm: double;
    procedure _SetStoimostj_1_kv_sm(const NewValue: double);
    function _Getopr_stoim_kv_sm_dya: TRazmeshenie_reklamyList;
  protected
  public
    property M_Stoimostj_1_kv_sm: TBAFloat read _Get_M_Stoimostj_1_kv_sm;
    property M_opr_stoim_kv_sm_dya: TRazmeshenie_reklamyList read _Getopr_stoim_kv_sm_dya;
    property Stoimostj_1_kv_sm: double read _GetStoimostj_1_kv_sm write _SetStoimostj_1_kv_sm;
    property opr_stoim_kv_sm_dya: TRazmeshenie_reklamyList read _Getopr_stoim_kv_sm_dya;
  end;

  TTip_kontakta = class(TSpravochnik)
  private
    function _Get_M_Eng_description: TBAString;
    function _GetEng_description: String;
    procedure _SetEng_description(const NewValue: String);
    function _Getyavl_tipom_kont_dlya: TKontaktList;
    function _Getpredpolag_sostoyaniya: TSostoyanie_kontakta;
    function _Get_M_predpolag_sostoyaniya: TBoldObjectReference;
    procedure _Setpredpolag_sostoyaniya(const value: TSostoyanie_kontakta);
  protected
  public
    property M_Eng_description: TBAString read _Get_M_Eng_description;
    property M_yavl_tipom_kont_dlya: TKontaktList read _Getyavl_tipom_kont_dlya;
    property M_predpolag_sostoyaniya: TBoldObjectReference read _Get_M_predpolag_sostoyaniya;
    property Eng_description: String read _GetEng_description write _SetEng_description;
    property yavl_tipom_kont_dlya: TKontaktList read _Getyavl_tipom_kont_dlya;
    property predpolag_sostoyaniya: TSostoyanie_kontakta read _Getpredpolag_sostoyaniya write _Setpredpolag_sostoyaniya;
  end;

  TTip_reklamy = class(TSpravochnik)
  private
    function _Get_M_Avtomaticheski: TBABoolean;
    function _GetAvtomaticheski: Boolean;
    procedure _SetAvtomaticheski(const NewValue: Boolean);
    function _Get_M_Razr__mnogitelj: TBABoolean;
    function _GetRazr__mnogitelj: Boolean;
    procedure _SetRazr__mnogitelj(const NewValue: Boolean);
    function _Gettip_imeet_razmesheniya: TRazmeshenie_reklamyList;
    function _Gettip_rekl_imeet_skidki: TSkidkaList;
    function _GetSootn_tipa_so_skidk: TSootn_tipa_so_skidkList;
  protected
  public
    property M_Avtomaticheski: TBABoolean read _Get_M_Avtomaticheski;
    property M_Razr__mnogitelj: TBABoolean read _Get_M_Razr__mnogitelj;
    property M_tip_imeet_razmesheniya: TRazmeshenie_reklamyList read _Gettip_imeet_razmesheniya;
    property M_tip_rekl_imeet_skidki: TSkidkaList read _Gettip_rekl_imeet_skidki;
    property M_Sootn_tipa_so_skidk: TSootn_tipa_so_skidkList read _GetSootn_tipa_so_skidk;
    property Avtomaticheski: Boolean read _GetAvtomaticheski write _SetAvtomaticheski;
    property Razr__mnogitelj: Boolean read _GetRazr__mnogitelj write _SetRazr__mnogitelj;
    property tip_imeet_razmesheniya: TRazmeshenie_reklamyList read _Gettip_imeet_razmesheniya;
    property tip_rekl_imeet_skidki: TSkidkaList read _Gettip_rekl_imeet_skidki;
    property Sootn_tipa_so_skidk: TSootn_tipa_so_skidkList read _GetSootn_tipa_so_skidk;
  end;

  TUsloviya = class(TSpravochnik)
  private
    function _Get_M_Uslovnoe_nazv: TBAString;
    function _GetUslovnoe_nazv: String;
    procedure _SetUslovnoe_nazv(const NewValue: String);
    function _Get_M_Srabotalo: TBABoolean;
    function _GetSrabotalo: Boolean;
    procedure _SetSrabotalo(const NewValue: Boolean);
    function _Get_M_Data_srabatyvaniya: TBADateTime;
    function _GetData_srabatyvaniya: TDateTime;
    procedure _SetData_srabatyvaniya(const NewValue: TDateTime);
    function _Getootnositsya_k_prichine: TRealjnaya_prichina;
    function _Get_M_ootnositsya_k_prichine: TBoldObjectReference;
    procedure _Setootnositsya_k_prichine(const value: TRealjnaya_prichina);
    function _Getotnositsya_k_napomin: TNapominanie;
    function _Get_M_otnositsya_k_napomin: TBoldObjectReference;
    procedure _Setotnositsya_k_napomin(const value: TNapominanie);
    function _Getotnositsya_k_stand_usl: TStandartnoe_uslovie;
    function _Get_M_otnositsya_k_stand_usl: TBoldObjectReference;
    procedure _Setotnositsya_k_stand_usl(const value: TStandartnoe_uslovie);
  protected
  public
    property M_Uslovnoe_nazv: TBAString read _Get_M_Uslovnoe_nazv;
    property M_Srabotalo: TBABoolean read _Get_M_Srabotalo;
    property M_Data_srabatyvaniya: TBADateTime read _Get_M_Data_srabatyvaniya;
    property M_ootnositsya_k_prichine: TBoldObjectReference read _Get_M_ootnositsya_k_prichine;
    property M_otnositsya_k_napomin: TBoldObjectReference read _Get_M_otnositsya_k_napomin;
    property M_otnositsya_k_stand_usl: TBoldObjectReference read _Get_M_otnositsya_k_stand_usl;
    property Uslovnoe_nazv: String read _GetUslovnoe_nazv write _SetUslovnoe_nazv;
    property Srabotalo: Boolean read _GetSrabotalo write _SetSrabotalo;
    property Data_srabatyvaniya: TDateTime read _GetData_srabatyvaniya write _SetData_srabatyvaniya;
    property ootnositsya_k_prichine: TRealjnaya_prichina read _Getootnositsya_k_prichine write _Setootnositsya_k_prichine;
    property otnositsya_k_napomin: TNapominanie read _Getotnositsya_k_napomin write _Setotnositsya_k_napomin;
    property otnositsya_k_stand_usl: TStandartnoe_uslovie read _Getotnositsya_k_stand_usl write _Setotnositsya_k_stand_usl;
  end;

  THarakteristika_klienta = class(TSpravochnik)
  private
    function _Get_M_Chernyi_spisok: TBABoolean;
    function _GetChernyi_spisok: Boolean;
    procedure _SetChernyi_spisok(const NewValue: Boolean);
    function _Get_M_Vagnyi_klient: TBABoolean;
    function _GetVagnyi_klient: Boolean;
    procedure _SetVagnyi_klient(const NewValue: Boolean);
    function _Get_M_Postoyannyi_klient: TBABoolean;
    function _GetPostoyannyi_klient: Boolean;
    procedure _SetPostoyannyi_klient(const NewValue: Boolean);
    function _Get_M_Uvagaemyi_klient: TBABoolean;
    function _GetUvagaemyi_klient: Boolean;
    procedure _SetUvagaemyi_klient(const NewValue: Boolean);
    function _Getharakterizuet_klienta: TKlientList;
    function _GetLinkimeet_harakt_klientaharakterizuet_klienta: TLinkimeet_harakt_klientaharakterizuet_klientaList;
  protected
  public
    property M_Chernyi_spisok: TBABoolean read _Get_M_Chernyi_spisok;
    property M_Vagnyi_klient: TBABoolean read _Get_M_Vagnyi_klient;
    property M_Postoyannyi_klient: TBABoolean read _Get_M_Postoyannyi_klient;
    property M_Uvagaemyi_klient: TBABoolean read _Get_M_Uvagaemyi_klient;
    property M_harakterizuet_klienta: TKlientList read _Getharakterizuet_klienta;
    property M_Linkimeet_harakt_klientaharakterizuet_klienta: TLinkimeet_harakt_klientaharakterizuet_klientaList read _GetLinkimeet_harakt_klientaharakterizuet_klienta;
    property Chernyi_spisok: Boolean read _GetChernyi_spisok write _SetChernyi_spisok;
    property Vagnyi_klient: Boolean read _GetVagnyi_klient write _SetVagnyi_klient;
    property Postoyannyi_klient: Boolean read _GetPostoyannyi_klient write _SetPostoyannyi_klient;
    property Uvagaemyi_klient: Boolean read _GetUvagaemyi_klient write _SetUvagaemyi_klient;
    property harakterizuet_klienta: TKlientList read _Getharakterizuet_klienta;
    property Linkimeet_harakt_klientaharakterizuet_klienta: TLinkimeet_harakt_klientaharakterizuet_klientaList read _GetLinkimeet_harakt_klientaharakterizuet_klienta;
  end;

  TKlient = class(TOrganizaciya)
  private
    function _Get_M_Yavl_yur_licom: TBABoolean;
    function _GetYavl_yur_licom: Boolean;
    procedure _SetYavl_yur_licom(const NewValue: Boolean);
    function _Get_M_Imenovanie: TBAString;
    function _GetImenovanie: String;
    function _Get_M_Adres: TBAString;
    function _GetAdres: String;
    function _Get_M_Telefony: TBAString;
    function _GetTelefony: String;
    function _Get_M_Na_perspektive: TBABoolean;
    function _GetNa_perspektive: Boolean;
    procedure _SetNa_perspektive(const NewValue: Boolean);
    function _Get_M_Ident_foto_lica: TBAInteger;
    function _GetIdent_foto_lica: Integer;
    procedure _SetIdent_foto_lica(const NewValue: Integer);
    function _Get_M_Identifikator_risunka: TBAInteger;
    function _GetIdentifikator_risunka: Integer;
    procedure _SetIdentifikator_risunka(const NewValue: Integer);
    function _Get_M_Vsego_dolg: TBAFloat;
    function _GetVsego_dolg: double;
    function _Get_M_Vsego_oplatil: TBAFloat;
    function _GetVsego_oplatil: double;
    function _Get_M_Vsego_zakazyval: TBAFloat;
    function _GetVsego_zakazyval: double;
    function _Get_M_Kolich_zakazov: TBAInteger;
    function _GetKolich_zakazov: Integer;
    function _Get_M_Data_zavedeniya: TBADateTime;
    function _GetData_zavedeniya: TDateTime;
    procedure _SetData_zavedeniya(const NewValue: TDateTime);
    function _Get_M_Dopolniteljno: TBAString;
    function _GetDopolniteljno: String;
    procedure _SetDopolniteljno(const NewValue: String);
    function _Get_M_Celevoi: TBABoolean;
    function _GetCelevoi: Boolean;
    procedure _SetCelevoi(const NewValue: Boolean);
    function _Get_M_Vsego_dolg_beznal: TBAFloat;
    function _GetVsego_dolg_beznal: double;
    function _Get_M_Vsego_dolg_nal: TBAFloat;
    function _GetVsego_dolg_nal: double;
    function _Get_M_Vsego_oplatil_nal: TBAFloat;
    function _GetVsego_oplatil_nal: double;
    function _Get_M_Vsego_oplatil_beznal: TBAFloat;
    function _GetVsego_oplatil_beznal: double;
    function _Getorg_imeet_specif: TSpecif_organizacii;
    function _Get_M_org_imeet_specif: TBoldObjectReference;
    procedure _Setorg_imeet_specif(const value: TSpecif_organizacii);
    function _Getimeet_kontakty: TKontaktList;
    function _Getvnosit_oplaty: TOplataList;
    function _Getimeet_zadachi: TZadachaList;
    function _Getrazmeshaet_reklamu: TRazmeshenie_reklamyList;
    function _Getimeet_harakt_klienta: THarakteristika_klientaList;
    function _GetLinkimeet_harakt_klientaharakterizuet_klienta: TLinkimeet_harakt_klientaharakterizuet_klientaList;
    function _Getimeet_reiting: TReiting_klienta;
    function _Get_M_imeet_reiting: TBoldObjectReference;
    procedure _Setimeet_reiting(const value: TReiting_klienta);
    function _Getreklama_vhod_v_schyot: TSchyotList;
  protected
  public
    property M_Yavl_yur_licom: TBABoolean read _Get_M_Yavl_yur_licom;
    property M_Imenovanie: TBAString read _Get_M_Imenovanie;
    property M_Adres: TBAString read _Get_M_Adres;
    property M_Telefony: TBAString read _Get_M_Telefony;
    property M_Na_perspektive: TBABoolean read _Get_M_Na_perspektive;
    property M_Ident_foto_lica: TBAInteger read _Get_M_Ident_foto_lica;
    property M_Identifikator_risunka: TBAInteger read _Get_M_Identifikator_risunka;
    property M_Vsego_dolg: TBAFloat read _Get_M_Vsego_dolg;
    property M_Vsego_oplatil: TBAFloat read _Get_M_Vsego_oplatil;
    property M_Vsego_zakazyval: TBAFloat read _Get_M_Vsego_zakazyval;
    property M_Kolich_zakazov: TBAInteger read _Get_M_Kolich_zakazov;
    property M_Data_zavedeniya: TBADateTime read _Get_M_Data_zavedeniya;
    property M_Dopolniteljno: TBAString read _Get_M_Dopolniteljno;
    property M_Celevoi: TBABoolean read _Get_M_Celevoi;
    property M_Vsego_dolg_beznal: TBAFloat read _Get_M_Vsego_dolg_beznal;
    property M_Vsego_dolg_nal: TBAFloat read _Get_M_Vsego_dolg_nal;
    property M_Vsego_oplatil_nal: TBAFloat read _Get_M_Vsego_oplatil_nal;
    property M_Vsego_oplatil_beznal: TBAFloat read _Get_M_Vsego_oplatil_beznal;
    property M_org_imeet_specif: TBoldObjectReference read _Get_M_org_imeet_specif;
    property M_imeet_kontakty: TKontaktList read _Getimeet_kontakty;
    property M_vnosit_oplaty: TOplataList read _Getvnosit_oplaty;
    property M_imeet_zadachi: TZadachaList read _Getimeet_zadachi;
    property M_razmeshaet_reklamu: TRazmeshenie_reklamyList read _Getrazmeshaet_reklamu;
    property M_imeet_harakt_klienta: THarakteristika_klientaList read _Getimeet_harakt_klienta;
    property M_Linkimeet_harakt_klientaharakterizuet_klienta: TLinkimeet_harakt_klientaharakterizuet_klientaList read _GetLinkimeet_harakt_klientaharakterizuet_klienta;
    property M_imeet_reiting: TBoldObjectReference read _Get_M_imeet_reiting;
    property M_reklama_vhod_v_schyot: TSchyotList read _Getreklama_vhod_v_schyot;
    property Yavl_yur_licom: Boolean read _GetYavl_yur_licom write _SetYavl_yur_licom;
    property Imenovanie: String read _GetImenovanie;
    property Adres: String read _GetAdres;
    property Telefony: String read _GetTelefony;
    property Na_perspektive: Boolean read _GetNa_perspektive write _SetNa_perspektive;
    property Ident_foto_lica: Integer read _GetIdent_foto_lica write _SetIdent_foto_lica;
    property Identifikator_risunka: Integer read _GetIdentifikator_risunka write _SetIdentifikator_risunka;
    property Vsego_dolg: double read _GetVsego_dolg;
    property Vsego_oplatil: double read _GetVsego_oplatil;
    property Vsego_zakazyval: double read _GetVsego_zakazyval;
    property Kolich_zakazov: Integer read _GetKolich_zakazov;
    property Data_zavedeniya: TDateTime read _GetData_zavedeniya write _SetData_zavedeniya;
    property Dopolniteljno: String read _GetDopolniteljno write _SetDopolniteljno;
    property Celevoi: Boolean read _GetCelevoi write _SetCelevoi;
    property Vsego_dolg_beznal: double read _GetVsego_dolg_beznal;
    property Vsego_dolg_nal: double read _GetVsego_dolg_nal;
    property Vsego_oplatil_nal: double read _GetVsego_oplatil_nal;
    property Vsego_oplatil_beznal: double read _GetVsego_oplatil_beznal;
    property org_imeet_specif: TSpecif_organizacii read _Getorg_imeet_specif write _Setorg_imeet_specif;
    property imeet_kontakty: TKontaktList read _Getimeet_kontakty;
    property vnosit_oplaty: TOplataList read _Getvnosit_oplaty;
    property imeet_zadachi: TZadachaList read _Getimeet_zadachi;
    property razmeshaet_reklamu: TRazmeshenie_reklamyList read _Getrazmeshaet_reklamu;
    property imeet_harakt_klienta: THarakteristika_klientaList read _Getimeet_harakt_klienta;
    property Linkimeet_harakt_klientaharakterizuet_klienta: TLinkimeet_harakt_klientaharakterizuet_klientaList read _GetLinkimeet_harakt_klientaharakterizuet_klienta;
    property imeet_reiting: TReiting_klienta read _Getimeet_reiting write _Setimeet_reiting;
    property reklama_vhod_v_schyot: TSchyotList read _Getreklama_vhod_v_schyot;
  end;

  TPersonal = class(TOrganizaciya)
  private
    function _Get_M_Login: TBAString;
    function _GetLogin: String;
    procedure _SetLogin(const NewValue: String);
    function _Get_M_Parolj: TBAString;
    function _GetParolj: String;
    procedure _SetParolj(const NewValue: String);
    function _Get_M_Prava: TBAInteger;
    function _GetPrava: Integer;
    procedure _SetPrava(const NewValue: Integer);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
    function _Get_M_Razreshitj_vsyo: TBABoolean;
    function _GetRazreshitj_vsyo: Boolean;
    procedure _SetRazreshitj_vsyo(const NewValue: Boolean);
    function _Get_M_Razresh_administr: TBABoolean;
    function _GetRazresh_administr: Boolean;
    procedure _SetRazresh_administr(const NewValue: Boolean);
    function _Get_M_Razresh_nastroiku_raboty: TBABoolean;
    function _GetRazresh_nastroiku_raboty: Boolean;
    procedure _SetRazresh_nastroiku_raboty(const NewValue: Boolean);
    function _Get_M_Razreshitj_prosmotr_logov: TBABoolean;
    function _GetRazreshitj_prosmotr_logov: Boolean;
    procedure _SetRazreshitj_prosmotr_logov(const NewValue: Boolean);
    function _Get_M_Razr_udalenie_izdanii: TBABoolean;
    function _GetRazr_udalenie_izdanii: Boolean;
    procedure _SetRazr_udalenie_izdanii(const NewValue: Boolean);
    function _Get_M_Razreshitj_udalenie_vypuskov: TBABoolean;
    function _GetRazreshitj_udalenie_vypuskov: Boolean;
    procedure _SetRazreshitj_udalenie_vypuskov(const NewValue: Boolean);
    function _Get_M_Razr_udalenie_razdelov: TBABoolean;
    function _GetRazr_udalenie_razdelov: Boolean;
    procedure _SetRazr_udalenie_razdelov(const NewValue: Boolean);
    function _Get_M_Razreshitj_udalenie_objyavlenii: TBABoolean;
    function _GetRazreshitj_udalenie_objyavlenii: Boolean;
    procedure _SetRazreshitj_udalenie_objyavlenii(const NewValue: Boolean);
    function _Get_M_Razreshitj_udalenie_ostaljnogo: TBABoolean;
    function _GetRazreshitj_udalenie_ostaljnogo: Boolean;
    procedure _SetRazreshitj_udalenie_ostaljnogo(const NewValue: Boolean);
    function _Get_M_Razr_prav_redkomen_sprav: TBABoolean;
    function _GetRazr_prav_redkomen_sprav: Boolean;
    procedure _SetRazr_prav_redkomen_sprav(const NewValue: Boolean);
    function _Get_M_Razr_prav_oper_razdelov: TBABoolean;
    function _GetRazr_prav_oper_razdelov: Boolean;
    procedure _SetRazr_prav_oper_razdelov(const NewValue: Boolean);
    function _Get_M_Sokr_imya: TBAString;
    function _GetSokr_imya: String;
    procedure _SetSokr_imya(const NewValue: String);
    function _Get_M_Razreshitj_smotr_ceny: TBABoolean;
    function _GetRazreshitj_smotr_ceny: Boolean;
    procedure _SetRazreshitj_smotr_ceny(const NewValue: Boolean);
    function _Get_M_Razreshitj_formir_izdanie: TBABoolean;
    function _GetRazreshitj_formir_izdanie: Boolean;
    procedure _SetRazreshitj_formir_izdanie(const NewValue: Boolean);
    function _Get_M_Razreshitj_rabotu_s_tipami: TBABoolean;
    function _GetRazreshitj_rabotu_s_tipami: Boolean;
    procedure _SetRazreshitj_rabotu_s_tipami(const NewValue: Boolean);
    function _Get_M_Razr_nastr_CRM: TBABoolean;
    function _GetRazr_nastr_CRM: Boolean;
    procedure _SetRazr_nastr_CRM(const NewValue: Boolean);
    function _Get_M_Razresh_rab_s_rekl_kamp: TBABoolean;
    function _GetRazresh_rab_s_rekl_kamp: Boolean;
    procedure _SetRazresh_rab_s_rekl_kamp(const NewValue: Boolean);
    function _Get_M_Razr_prosm_istorii: TBABoolean;
    function _GetRazr_prosm_istorii: Boolean;
    procedure _SetRazr_prosm_istorii(const NewValue: Boolean);
    function _Get_M_Razr_udalyatj_scheta: TBABoolean;
    function _GetRazr_udalyatj_scheta: Boolean;
    procedure _SetRazr_udalyatj_scheta(const NewValue: Boolean);
    function _Get_M_Razreshitj_udalyatj_kontakty: TBABoolean;
    function _GetRazreshitj_udalyatj_kontakty: Boolean;
    procedure _SetRazreshitj_udalyatj_kontakty(const NewValue: Boolean);
    function _Getdeistviya_fiksiruyutsya_v: TLog_operaciiList;
    function _Getrabotaet_na_dolgn: TDolgnostj;
    function _Get_M_rabotaet_na_dolgn: TBoldObjectReference;
    procedure _Setrabotaet_na_dolgn(const value: TDolgnostj);
    function _Getmog_prosmatrivatj: TSostoyanie_kontaktaList;
    function _GetRazreshenie_prosmatrivatj: TRazreshenie_prosmatrivatjList;
    function _Getimeet_pravo_ustanavl: TSostoyanie_kontaktaList;
    function _GetRazreshenie_ustanavl: TRazreshenie_ustanavlList;
    function _Getimeet_pravo_izmenyatj: TSostoyanie_kontaktaList;
    function _GetRazreshenie_vyhoditj: TRazreshenie_vyhoditjList;
    function _Getimeet_napominaniya: TNapominanieList;
    function _Getvedyot_reklamu: TRazmeshenie_reklamyList;
  protected
  public
    property M_Login: TBAString read _Get_M_Login;
    property M_Parolj: TBAString read _Get_M_Parolj;
    property M_Prava: TBAInteger read _Get_M_Prava;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property M_Razreshitj_vsyo: TBABoolean read _Get_M_Razreshitj_vsyo;
    property M_Razresh_administr: TBABoolean read _Get_M_Razresh_administr;
    property M_Razresh_nastroiku_raboty: TBABoolean read _Get_M_Razresh_nastroiku_raboty;
    property M_Razreshitj_prosmotr_logov: TBABoolean read _Get_M_Razreshitj_prosmotr_logov;
    property M_Razr_udalenie_izdanii: TBABoolean read _Get_M_Razr_udalenie_izdanii;
    property M_Razreshitj_udalenie_vypuskov: TBABoolean read _Get_M_Razreshitj_udalenie_vypuskov;
    property M_Razr_udalenie_razdelov: TBABoolean read _Get_M_Razr_udalenie_razdelov;
    property M_Razreshitj_udalenie_objyavlenii: TBABoolean read _Get_M_Razreshitj_udalenie_objyavlenii;
    property M_Razreshitj_udalenie_ostaljnogo: TBABoolean read _Get_M_Razreshitj_udalenie_ostaljnogo;
    property M_Razr_prav_redkomen_sprav: TBABoolean read _Get_M_Razr_prav_redkomen_sprav;
    property M_Razr_prav_oper_razdelov: TBABoolean read _Get_M_Razr_prav_oper_razdelov;
    property M_Sokr_imya: TBAString read _Get_M_Sokr_imya;
    property M_Razreshitj_smotr_ceny: TBABoolean read _Get_M_Razreshitj_smotr_ceny;
    property M_Razreshitj_formir_izdanie: TBABoolean read _Get_M_Razreshitj_formir_izdanie;
    property M_Razreshitj_rabotu_s_tipami: TBABoolean read _Get_M_Razreshitj_rabotu_s_tipami;
    property M_Razr_nastr_CRM: TBABoolean read _Get_M_Razr_nastr_CRM;
    property M_Razresh_rab_s_rekl_kamp: TBABoolean read _Get_M_Razresh_rab_s_rekl_kamp;
    property M_Razr_prosm_istorii: TBABoolean read _Get_M_Razr_prosm_istorii;
    property M_Razr_udalyatj_scheta: TBABoolean read _Get_M_Razr_udalyatj_scheta;
    property M_Razreshitj_udalyatj_kontakty: TBABoolean read _Get_M_Razreshitj_udalyatj_kontakty;
    property M_deistviya_fiksiruyutsya_v: TLog_operaciiList read _Getdeistviya_fiksiruyutsya_v;
    property M_rabotaet_na_dolgn: TBoldObjectReference read _Get_M_rabotaet_na_dolgn;
    property M_mog_prosmatrivatj: TSostoyanie_kontaktaList read _Getmog_prosmatrivatj;
    property M_Razreshenie_prosmatrivatj: TRazreshenie_prosmatrivatjList read _GetRazreshenie_prosmatrivatj;
    property M_imeet_pravo_ustanavl: TSostoyanie_kontaktaList read _Getimeet_pravo_ustanavl;
    property M_Razreshenie_ustanavl: TRazreshenie_ustanavlList read _GetRazreshenie_ustanavl;
    property M_imeet_pravo_izmenyatj: TSostoyanie_kontaktaList read _Getimeet_pravo_izmenyatj;
    property M_Razreshenie_vyhoditj: TRazreshenie_vyhoditjList read _GetRazreshenie_vyhoditj;
    property M_imeet_napominaniya: TNapominanieList read _Getimeet_napominaniya;
    property M_vedyot_reklamu: TRazmeshenie_reklamyList read _Getvedyot_reklamu;
    property Login: String read _GetLogin write _SetLogin;
    property Parolj: String read _GetParolj write _SetParolj;
    property Prava: Integer read _GetPrava write _SetPrava;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
    property Razreshitj_vsyo: Boolean read _GetRazreshitj_vsyo write _SetRazreshitj_vsyo;
    property Razresh_administr: Boolean read _GetRazresh_administr write _SetRazresh_administr;
    property Razresh_nastroiku_raboty: Boolean read _GetRazresh_nastroiku_raboty write _SetRazresh_nastroiku_raboty;
    property Razreshitj_prosmotr_logov: Boolean read _GetRazreshitj_prosmotr_logov write _SetRazreshitj_prosmotr_logov;
    property Razr_udalenie_izdanii: Boolean read _GetRazr_udalenie_izdanii write _SetRazr_udalenie_izdanii;
    property Razreshitj_udalenie_vypuskov: Boolean read _GetRazreshitj_udalenie_vypuskov write _SetRazreshitj_udalenie_vypuskov;
    property Razr_udalenie_razdelov: Boolean read _GetRazr_udalenie_razdelov write _SetRazr_udalenie_razdelov;
    property Razreshitj_udalenie_objyavlenii: Boolean read _GetRazreshitj_udalenie_objyavlenii write _SetRazreshitj_udalenie_objyavlenii;
    property Razreshitj_udalenie_ostaljnogo: Boolean read _GetRazreshitj_udalenie_ostaljnogo write _SetRazreshitj_udalenie_ostaljnogo;
    property Razr_prav_redkomen_sprav: Boolean read _GetRazr_prav_redkomen_sprav write _SetRazr_prav_redkomen_sprav;
    property Razr_prav_oper_razdelov: Boolean read _GetRazr_prav_oper_razdelov write _SetRazr_prav_oper_razdelov;
    property Sokr_imya: String read _GetSokr_imya write _SetSokr_imya;
    property Razreshitj_smotr_ceny: Boolean read _GetRazreshitj_smotr_ceny write _SetRazreshitj_smotr_ceny;
    property Razreshitj_formir_izdanie: Boolean read _GetRazreshitj_formir_izdanie write _SetRazreshitj_formir_izdanie;
    property Razreshitj_rabotu_s_tipami: Boolean read _GetRazreshitj_rabotu_s_tipami write _SetRazreshitj_rabotu_s_tipami;
    property Razr_nastr_CRM: Boolean read _GetRazr_nastr_CRM write _SetRazr_nastr_CRM;
    property Razresh_rab_s_rekl_kamp: Boolean read _GetRazresh_rab_s_rekl_kamp write _SetRazresh_rab_s_rekl_kamp;
    property Razr_prosm_istorii: Boolean read _GetRazr_prosm_istorii write _SetRazr_prosm_istorii;
    property Razr_udalyatj_scheta: Boolean read _GetRazr_udalyatj_scheta write _SetRazr_udalyatj_scheta;
    property Razreshitj_udalyatj_kontakty: Boolean read _GetRazreshitj_udalyatj_kontakty write _SetRazreshitj_udalyatj_kontakty;
    property deistviya_fiksiruyutsya_v: TLog_operaciiList read _Getdeistviya_fiksiruyutsya_v;
    property rabotaet_na_dolgn: TDolgnostj read _Getrabotaet_na_dolgn write _Setrabotaet_na_dolgn;
    property mog_prosmatrivatj: TSostoyanie_kontaktaList read _Getmog_prosmatrivatj;
    property Razreshenie_prosmatrivatj: TRazreshenie_prosmatrivatjList read _GetRazreshenie_prosmatrivatj;
    property imeet_pravo_ustanavl: TSostoyanie_kontaktaList read _Getimeet_pravo_ustanavl;
    property Razreshenie_ustanavl: TRazreshenie_ustanavlList read _GetRazreshenie_ustanavl;
    property imeet_pravo_izmenyatj: TSostoyanie_kontaktaList read _Getimeet_pravo_izmenyatj;
    property Razreshenie_vyhoditj: TRazreshenie_vyhoditjList read _GetRazreshenie_vyhoditj;
    property imeet_napominaniya: TNapominanieList read _Getimeet_napominaniya;
    property vedyot_reklamu: TRazmeshenie_reklamyList read _Getvedyot_reklamu;
  end;

  TRealjnaya_prichina = class(TAbstraktnyi_standart)
  private
    function _Get_M_Vse_uslov_srab: TBABoolean;
    function _GetVse_uslov_srab: Boolean;
    function _Get_M_Prichina_nazrela: TBABoolean;
    function _GetPrichina_nazrela: Boolean;
    procedure _SetPrichina_nazrela(const NewValue: Boolean);
    function _Getimeet_usloviya: TUsloviyaList;
    function _Getotn_k_tipu_prichin: TStandartnaya_prichina;
    function _Get_M_otn_k_tipu_prichin: TBoldObjectReference;
    procedure _Setotn_k_tipu_prichin(const value: TStandartnaya_prichina);
    function _Getimeet_v_osnove_zadachi: TZadachaList;
    function _GetLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList;
  protected
    procedure _Vse_uslov_srab_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    property M_Vse_uslov_srab: TBABoolean read _Get_M_Vse_uslov_srab;
    property M_Prichina_nazrela: TBABoolean read _Get_M_Prichina_nazrela;
    property M_imeet_usloviya: TUsloviyaList read _Getimeet_usloviya;
    property M_otn_k_tipu_prichin: TBoldObjectReference read _Get_M_otn_k_tipu_prichin;
    property M_imeet_v_osnove_zadachi: TZadachaList read _Getimeet_v_osnove_zadachi;
    property M_Linkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList read _GetLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi;
    property Vse_uslov_srab: Boolean read _GetVse_uslov_srab;
    property Prichina_nazrela: Boolean read _GetPrichina_nazrela write _SetPrichina_nazrela;
    property imeet_usloviya: TUsloviyaList read _Getimeet_usloviya;
    property otn_k_tipu_prichin: TStandartnaya_prichina read _Getotn_k_tipu_prichin write _Setotn_k_tipu_prichin;
    property imeet_v_osnove_zadachi: TZadachaList read _Getimeet_v_osnove_zadachi;
    property Linkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList read _GetLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi;
  end;

  TStandartnaya_zadacha = class(TAbstraktnyi_standart)
  private
    function _Getharakterizuet_zadachi: TZadachaList;
  protected
  public
    property M_harakterizuet_zadachi: TZadachaList read _Getharakterizuet_zadachi;
    property harakterizuet_zadachi: TZadachaList read _Getharakterizuet_zadachi;
  end;

  TStandartnaya_prichina = class(TAbstraktnyi_standart)
  private
    function _Getharakt_v_chastn_prich: TRealjnaya_prichinaList;
    function _Getimeet_abstr_chastnostj: TPrichinaList;
    function _Getformir_iz_stand_usl: TStandartnoe_uslovieList;
    function _GetPrichina_uslov: TPrichina_uslovList;
  protected
  public
    property M_harakt_v_chastn_prich: TRealjnaya_prichinaList read _Getharakt_v_chastn_prich;
    property M_imeet_abstr_chastnostj: TPrichinaList read _Getimeet_abstr_chastnostj;
    property M_formir_iz_stand_usl: TStandartnoe_uslovieList read _Getformir_iz_stand_usl;
    property M_Prichina_uslov: TPrichina_uslovList read _GetPrichina_uslov;
    property harakt_v_chastn_prich: TRealjnaya_prichinaList read _Getharakt_v_chastn_prich;
    property imeet_abstr_chastnostj: TPrichinaList read _Getimeet_abstr_chastnostj;
    property formir_iz_stand_usl: TStandartnoe_uslovieList read _Getformir_iz_stand_usl;
    property Prichina_uslov: TPrichina_uslovList read _GetPrichina_uslov;
  end;

  TStandartnoe_napominanie = class(TAbstraktnyi_standart)
  private
    function _Getimeet_stand_napom: TNapominanieList;
  protected
  public
    property M_imeet_stand_napom: TNapominanieList read _Getimeet_stand_napom;
    property imeet_stand_napom: TNapominanieList read _Getimeet_stand_napom;
  end;

  TStandartnoe_uslovie = class(TAbstraktnyi_standart)
  private
    function _Getimeet_stand_usl: TUsloviyaList;
    function _Getformir_stand_prich: TStandartnaya_prichinaList;
    function _GetPrichina_uslov: TPrichina_uslovList;
  protected
  public
    property M_imeet_stand_usl: TUsloviyaList read _Getimeet_stand_usl;
    property M_formir_stand_prich: TStandartnaya_prichinaList read _Getformir_stand_prich;
    property M_Prichina_uslov: TPrichina_uslovList read _GetPrichina_uslov;
    property imeet_stand_usl: TUsloviyaList read _Getimeet_stand_usl;
    property formir_stand_prich: TStandartnaya_prichinaList read _Getformir_stand_prich;
    property Prichina_uslov: TPrichina_uslovList read _GetPrichina_uslov;
  end;

  _TDebuggerWorkAroundClass49 = class(TInterfacedObject, IUnknown) end;
  {$EXTERNALSYM _TDebuggerWorkAroundClass49}

  TStandartnyi_effekt = class(TAbstraktnyi_standart)
  private
    function _Getimeet_chastnostj: TEffektList;
  protected
  public
    property M_imeet_chastnostj: TEffektList read _Getimeet_chastnostj;
    property imeet_chastnostj: TEffektList read _Getimeet_chastnostj;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TLinkimeet_harakt_klientaharakterizuet_klientaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TLinkimeet_harakt_klientaharakterizuet_klienta;
    procedure SetBoldObject(index: Integer; NewObject: TLinkimeet_harakt_klientaharakterizuet_klienta);
  public
    function Includes(anObject: TLinkimeet_harakt_klientaharakterizuet_klienta): Boolean;
    function IndexOf(anObject: TLinkimeet_harakt_klientaharakterizuet_klienta): Integer;
    procedure Add(NewObject: TLinkimeet_harakt_klientaharakterizuet_klienta);
    function AddNew: TLinkimeet_harakt_klientaharakterizuet_klienta;
    procedure Insert(index: Integer; NewObject: TLinkimeet_harakt_klientaharakterizuet_klienta);
    property BoldObjects[index: Integer]: TLinkimeet_harakt_klientaharakterizuet_klienta read GetBoldObject write SetBoldObject; default;
  end;

  TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi;
    procedure SetBoldObject(index: Integer; NewObject: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi);
  public
    function Includes(anObject: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi): Boolean;
    function IndexOf(anObject: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi): Integer;
    procedure Add(NewObject: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi);
    function AddNew: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi;
    procedure Insert(index: Integer; NewObject: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi);
    property BoldObjects[index: Integer]: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi read GetBoldObject write SetBoldObject; default;
  end;

  TVypusk_gazetyList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TVypusk_gazety;
    procedure SetBoldObject(index: Integer; NewObject: TVypusk_gazety);
  public
    function Includes(anObject: TVypusk_gazety): Boolean;
    function IndexOf(anObject: TVypusk_gazety): Integer;
    procedure Add(NewObject: TVypusk_gazety);
    function AddNew: TVypusk_gazety;
    procedure Insert(index: Integer; NewObject: TVypusk_gazety);
    property BoldObjects[index: Integer]: TVypusk_gazety read GetBoldObject write SetBoldObject; default;
  end;

  TVyhodList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TVyhod;
    procedure SetBoldObject(index: Integer; NewObject: TVyhod);
  public
    function Includes(anObject: TVyhod): Boolean;
    function IndexOf(anObject: TVyhod): Integer;
    procedure Add(NewObject: TVyhod);
    function AddNew: TVyhod;
    procedure Insert(index: Integer; NewObject: TVyhod);
    property BoldObjects[index: Integer]: TVyhod read GetBoldObject write SetBoldObject; default;
  end;

  TDokumentList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TDokument;
    procedure SetBoldObject(index: Integer; NewObject: TDokument);
  public
    function Includes(anObject: TDokument): Boolean;
    function IndexOf(anObject: TDokument): Integer;
    procedure Add(NewObject: TDokument);
    function AddNew: TDokument;
    procedure Insert(index: Integer; NewObject: TDokument);
    property BoldObjects[index: Integer]: TDokument read GetBoldObject write SetBoldObject; default;
  end;

  TLog_operaciiList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TLog_operacii;
    procedure SetBoldObject(index: Integer; NewObject: TLog_operacii);
  public
    function Includes(anObject: TLog_operacii): Boolean;
    function IndexOf(anObject: TLog_operacii): Integer;
    procedure Add(NewObject: TLog_operacii);
    function AddNew: TLog_operacii;
    procedure Insert(index: Integer; NewObject: TLog_operacii);
    property BoldObjects[index: Integer]: TLog_operacii read GetBoldObject write SetBoldObject; default;
  end;

  TNastroikiList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TNastroiki;
    procedure SetBoldObject(index: Integer; NewObject: TNastroiki);
  public
    function Includes(anObject: TNastroiki): Boolean;
    function IndexOf(anObject: TNastroiki): Integer;
    procedure Add(NewObject: TNastroiki);
    function AddNew: TNastroiki;
    procedure Insert(index: Integer; NewObject: TNastroiki);
    property BoldObjects[index: Integer]: TNastroiki read GetBoldObject write SetBoldObject; default;
  end;

  TOplataList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOplata;
    procedure SetBoldObject(index: Integer; NewObject: TOplata);
  public
    function Includes(anObject: TOplata): Boolean;
    function IndexOf(anObject: TOplata): Integer;
    procedure Add(NewObject: TOplata);
    function AddNew: TOplata;
    procedure Insert(index: Integer; NewObject: TOplata);
    property BoldObjects[index: Integer]: TOplata read GetBoldObject write SetBoldObject; default;
  end;

  TPersonaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPersona;
    procedure SetBoldObject(index: Integer; NewObject: TPersona);
  public
    function Includes(anObject: TPersona): Boolean;
    function IndexOf(anObject: TPersona): Integer;
    procedure Add(NewObject: TPersona);
    function AddNew: TPersona;
    procedure Insert(index: Integer; NewObject: TPersona);
    property BoldObjects[index: Integer]: TPersona read GetBoldObject write SetBoldObject; default;
  end;

  TPrichinaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPrichina;
    procedure SetBoldObject(index: Integer; NewObject: TPrichina);
  public
    function Includes(anObject: TPrichina): Boolean;
    function IndexOf(anObject: TPrichina): Integer;
    procedure Add(NewObject: TPrichina);
    function AddNew: TPrichina;
    procedure Insert(index: Integer; NewObject: TPrichina);
    property BoldObjects[index: Integer]: TPrichina read GetBoldObject write SetBoldObject; default;
  end;

  TPrichina_uslovList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPrichina_uslov;
    procedure SetBoldObject(index: Integer; NewObject: TPrichina_uslov);
  public
    function Includes(anObject: TPrichina_uslov): Boolean;
    function IndexOf(anObject: TPrichina_uslov): Integer;
    procedure Add(NewObject: TPrichina_uslov);
    function AddNew: TPrichina_uslov;
    procedure Insert(index: Integer; NewObject: TPrichina_uslov);
    property BoldObjects[index: Integer]: TPrichina_uslov read GetBoldObject write SetBoldObject; default;
  end;

  TProektList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TProekt;
    procedure SetBoldObject(index: Integer; NewObject: TProekt);
  public
    function Includes(anObject: TProekt): Boolean;
    function IndexOf(anObject: TProekt): Integer;
    procedure Add(NewObject: TProekt);
    function AddNew: TProekt;
    procedure Insert(index: Integer; NewObject: TProekt);
    property BoldObjects[index: Integer]: TProekt read GetBoldObject write SetBoldObject; default;
  end;

  TRazmeshenie_reklamyList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TRazmeshenie_reklamy;
    procedure SetBoldObject(index: Integer; NewObject: TRazmeshenie_reklamy);
  public
    function Includes(anObject: TRazmeshenie_reklamy): Boolean;
    function IndexOf(anObject: TRazmeshenie_reklamy): Integer;
    procedure Add(NewObject: TRazmeshenie_reklamy);
    function AddNew: TRazmeshenie_reklamy;
    procedure Insert(index: Integer; NewObject: TRazmeshenie_reklamy);
    property BoldObjects[index: Integer]: TRazmeshenie_reklamy read GetBoldObject write SetBoldObject; default;
  end;

  TRazreshenieList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TRazreshenie;
    procedure SetBoldObject(index: Integer; NewObject: TRazreshenie);
  public
    function Includes(anObject: TRazreshenie): Boolean;
    function IndexOf(anObject: TRazreshenie): Integer;
    procedure Add(NewObject: TRazreshenie);
    function AddNew: TRazreshenie;
    procedure Insert(index: Integer; NewObject: TRazreshenie);
    property BoldObjects[index: Integer]: TRazreshenie read GetBoldObject write SetBoldObject; default;
  end;

  TReiting_klientaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TReiting_klienta;
    procedure SetBoldObject(index: Integer; NewObject: TReiting_klienta);
  public
    function Includes(anObject: TReiting_klienta): Boolean;
    function IndexOf(anObject: TReiting_klienta): Integer;
    procedure Add(NewObject: TReiting_klienta);
    function AddNew: TReiting_klienta;
    procedure Insert(index: Integer; NewObject: TReiting_klienta);
    property BoldObjects[index: Integer]: TReiting_klienta read GetBoldObject write SetBoldObject; default;
  end;

  TSootn_so_skidkList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSootn_so_skidk;
    procedure SetBoldObject(index: Integer; NewObject: TSootn_so_skidk);
  public
    function Includes(anObject: TSootn_so_skidk): Boolean;
    function IndexOf(anObject: TSootn_so_skidk): Integer;
    procedure Add(NewObject: TSootn_so_skidk);
    function AddNew: TSootn_so_skidk;
    procedure Insert(index: Integer; NewObject: TSootn_so_skidk);
    property BoldObjects[index: Integer]: TSootn_so_skidk read GetBoldObject write SetBoldObject; default;
  end;

  TSootn_tipa_so_skidkList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSootn_tipa_so_skidk;
    procedure SetBoldObject(index: Integer; NewObject: TSootn_tipa_so_skidk);
  public
    function Includes(anObject: TSootn_tipa_so_skidk): Boolean;
    function IndexOf(anObject: TSootn_tipa_so_skidk): Integer;
    procedure Add(NewObject: TSootn_tipa_so_skidk);
    function AddNew: TSootn_tipa_so_skidk;
    procedure Insert(index: Integer; NewObject: TSootn_tipa_so_skidk);
    property BoldObjects[index: Integer]: TSootn_tipa_so_skidk read GetBoldObject write SetBoldObject; default;
  end;

  TSostoyanie_kontaktaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSostoyanie_kontakta;
    procedure SetBoldObject(index: Integer; NewObject: TSostoyanie_kontakta);
  public
    function Includes(anObject: TSostoyanie_kontakta): Boolean;
    function IndexOf(anObject: TSostoyanie_kontakta): Integer;
    procedure Add(NewObject: TSostoyanie_kontakta);
    function AddNew: TSostoyanie_kontakta;
    procedure Insert(index: Integer; NewObject: TSostoyanie_kontakta);
    property BoldObjects[index: Integer]: TSostoyanie_kontakta read GetBoldObject write SetBoldObject; default;
  end;

  TSpravochnikList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSpravochnik;
    procedure SetBoldObject(index: Integer; NewObject: TSpravochnik);
  public
    function Includes(anObject: TSpravochnik): Boolean;
    function IndexOf(anObject: TSpravochnik): Integer;
    procedure Add(NewObject: TSpravochnik);
    function AddNew: TSpravochnik;
    procedure Insert(index: Integer; NewObject: TSpravochnik);
    property BoldObjects[index: Integer]: TSpravochnik read GetBoldObject write SetBoldObject; default;
  end;

  TSchyotList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSchyot;
    procedure SetBoldObject(index: Integer; NewObject: TSchyot);
  public
    function Includes(anObject: TSchyot): Boolean;
    function IndexOf(anObject: TSchyot): Integer;
    procedure Add(NewObject: TSchyot);
    function AddNew: TSchyot;
    procedure Insert(index: Integer; NewObject: TSchyot);
    property BoldObjects[index: Integer]: TSchyot read GetBoldObject write SetBoldObject; default;
  end;

  TEffektList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TEffekt;
    procedure SetBoldObject(index: Integer; NewObject: TEffekt);
  public
    function Includes(anObject: TEffekt): Boolean;
    function IndexOf(anObject: TEffekt): Integer;
    procedure Add(NewObject: TEffekt);
    function AddNew: TEffekt;
    procedure Insert(index: Integer; NewObject: TEffekt);
    property BoldObjects[index: Integer]: TEffekt read GetBoldObject write SetBoldObject; default;
  end;

  TOrganizaciyaList = class(TPersonaList)
  protected
    function GetBoldObject(index: Integer): TOrganizaciya;
    procedure SetBoldObject(index: Integer; NewObject: TOrganizaciya);
  public
    function Includes(anObject: TOrganizaciya): Boolean;
    function IndexOf(anObject: TOrganizaciya): Integer;
    procedure Add(NewObject: TOrganizaciya);
    function AddNew: TOrganizaciya;
    procedure Insert(index: Integer; NewObject: TOrganizaciya);
    property BoldObjects[index: Integer]: TOrganizaciya read GetBoldObject write SetBoldObject; default;
  end;

  TRazreshenie_vyhoditjList = class(TRazreshenieList)
  protected
    function GetBoldObject(index: Integer): TRazreshenie_vyhoditj;
    procedure SetBoldObject(index: Integer; NewObject: TRazreshenie_vyhoditj);
  public
    function Includes(anObject: TRazreshenie_vyhoditj): Boolean;
    function IndexOf(anObject: TRazreshenie_vyhoditj): Integer;
    procedure Add(NewObject: TRazreshenie_vyhoditj);
    function AddNew: TRazreshenie_vyhoditj;
    procedure Insert(index: Integer; NewObject: TRazreshenie_vyhoditj);
    property BoldObjects[index: Integer]: TRazreshenie_vyhoditj read GetBoldObject write SetBoldObject; default;
  end;

  TRazreshenie_prosmatrivatjList = class(TRazreshenieList)
  protected
    function GetBoldObject(index: Integer): TRazreshenie_prosmatrivatj;
    procedure SetBoldObject(index: Integer; NewObject: TRazreshenie_prosmatrivatj);
  public
    function Includes(anObject: TRazreshenie_prosmatrivatj): Boolean;
    function IndexOf(anObject: TRazreshenie_prosmatrivatj): Integer;
    procedure Add(NewObject: TRazreshenie_prosmatrivatj);
    function AddNew: TRazreshenie_prosmatrivatj;
    procedure Insert(index: Integer; NewObject: TRazreshenie_prosmatrivatj);
    property BoldObjects[index: Integer]: TRazreshenie_prosmatrivatj read GetBoldObject write SetBoldObject; default;
  end;

  TRazreshenie_ustanavlList = class(TRazreshenieList)
  protected
    function GetBoldObject(index: Integer): TRazreshenie_ustanavl;
    procedure SetBoldObject(index: Integer; NewObject: TRazreshenie_ustanavl);
  public
    function Includes(anObject: TRazreshenie_ustanavl): Boolean;
    function IndexOf(anObject: TRazreshenie_ustanavl): Integer;
    procedure Add(NewObject: TRazreshenie_ustanavl);
    function AddNew: TRazreshenie_ustanavl;
    procedure Insert(index: Integer; NewObject: TRazreshenie_ustanavl);
    property BoldObjects[index: Integer]: TRazreshenie_ustanavl read GetBoldObject write SetBoldObject; default;
  end;

  TAbstraktnyi_standartList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TAbstraktnyi_standart;
    procedure SetBoldObject(index: Integer; NewObject: TAbstraktnyi_standart);
  public
    function Includes(anObject: TAbstraktnyi_standart): Boolean;
    function IndexOf(anObject: TAbstraktnyi_standart): Integer;
    procedure Add(NewObject: TAbstraktnyi_standart);
    function AddNew: TAbstraktnyi_standart;
    procedure Insert(index: Integer; NewObject: TAbstraktnyi_standart);
    property BoldObjects[index: Integer]: TAbstraktnyi_standart read GetBoldObject write SetBoldObject; default;
  end;

  TDobavochnaya_stoimList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TDobavochnaya_stoim;
    procedure SetBoldObject(index: Integer; NewObject: TDobavochnaya_stoim);
  public
    function Includes(anObject: TDobavochnaya_stoim): Boolean;
    function IndexOf(anObject: TDobavochnaya_stoim): Integer;
    procedure Add(NewObject: TDobavochnaya_stoim);
    function AddNew: TDobavochnaya_stoim;
    procedure Insert(index: Integer; NewObject: TDobavochnaya_stoim);
    property BoldObjects[index: Integer]: TDobavochnaya_stoim read GetBoldObject write SetBoldObject; default;
  end;

  TDolgnostjList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TDolgnostj;
    procedure SetBoldObject(index: Integer; NewObject: TDolgnostj);
  public
    function Includes(anObject: TDolgnostj): Boolean;
    function IndexOf(anObject: TDolgnostj): Integer;
    procedure Add(NewObject: TDolgnostj);
    function AddNew: TDolgnostj;
    procedure Insert(index: Integer; NewObject: TDolgnostj);
    property BoldObjects[index: Integer]: TDolgnostj read GetBoldObject write SetBoldObject; default;
  end;

  TZadachaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TZadacha;
    procedure SetBoldObject(index: Integer; NewObject: TZadacha);
  public
    function Includes(anObject: TZadacha): Boolean;
    function IndexOf(anObject: TZadacha): Integer;
    procedure Add(NewObject: TZadacha);
    function AddNew: TZadacha;
    procedure Insert(index: Integer; NewObject: TZadacha);
    property BoldObjects[index: Integer]: TZadacha read GetBoldObject write SetBoldObject; default;
  end;

  TIzdanieList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TIzdanie;
    procedure SetBoldObject(index: Integer; NewObject: TIzdanie);
  public
    function Includes(anObject: TIzdanie): Boolean;
    function IndexOf(anObject: TIzdanie): Integer;
    procedure Add(NewObject: TIzdanie);
    function AddNew: TIzdanie;
    procedure Insert(index: Integer; NewObject: TIzdanie);
    property BoldObjects[index: Integer]: TIzdanie read GetBoldObject write SetBoldObject; default;
  end;

  TKontaktList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TKontakt;
    procedure SetBoldObject(index: Integer; NewObject: TKontakt);
  public
    function Includes(anObject: TKontakt): Boolean;
    function IndexOf(anObject: TKontakt): Integer;
    procedure Add(NewObject: TKontakt);
    function AddNew: TKontakt;
    procedure Insert(index: Integer; NewObject: TKontakt);
    property BoldObjects[index: Integer]: TKontakt read GetBoldObject write SetBoldObject; default;
  end;

  TNapominanieList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TNapominanie;
    procedure SetBoldObject(index: Integer; NewObject: TNapominanie);
  public
    function Includes(anObject: TNapominanie): Boolean;
    function IndexOf(anObject: TNapominanie): Integer;
    procedure Add(NewObject: TNapominanie);
    function AddNew: TNapominanie;
    procedure Insert(index: Integer; NewObject: TNapominanie);
    property BoldObjects[index: Integer]: TNapominanie read GetBoldObject write SetBoldObject; default;
  end;

  TPozic_schtaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TPozic_schta;
    procedure SetBoldObject(index: Integer; NewObject: TPozic_schta);
  public
    function Includes(anObject: TPozic_schta): Boolean;
    function IndexOf(anObject: TPozic_schta): Integer;
    procedure Add(NewObject: TPozic_schta);
    function AddNew: TPozic_schta;
    procedure Insert(index: Integer; NewObject: TPozic_schta);
    property BoldObjects[index: Integer]: TPozic_schta read GetBoldObject write SetBoldObject; default;
  end;

  TRazdel_izdaniyaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TRazdel_izdaniya;
    procedure SetBoldObject(index: Integer; NewObject: TRazdel_izdaniya);
  public
    function Includes(anObject: TRazdel_izdaniya): Boolean;
    function IndexOf(anObject: TRazdel_izdaniya): Integer;
    procedure Add(NewObject: TRazdel_izdaniya);
    function AddNew: TRazdel_izdaniya;
    procedure Insert(index: Integer; NewObject: TRazdel_izdaniya);
    property BoldObjects[index: Integer]: TRazdel_izdaniya read GetBoldObject write SetBoldObject; default;
  end;

  TRazmeryList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TRazmery;
    procedure SetBoldObject(index: Integer; NewObject: TRazmery);
  public
    function Includes(anObject: TRazmery): Boolean;
    function IndexOf(anObject: TRazmery): Integer;
    procedure Add(NewObject: TRazmery);
    function AddNew: TRazmery;
    procedure Insert(index: Integer; NewObject: TRazmery);
    property BoldObjects[index: Integer]: TRazmery read GetBoldObject write SetBoldObject; default;
  end;

  TSkidkaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TSkidka;
    procedure SetBoldObject(index: Integer; NewObject: TSkidka);
  public
    function Includes(anObject: TSkidka): Boolean;
    function IndexOf(anObject: TSkidka): Integer;
    procedure Add(NewObject: TSkidka);
    function AddNew: TSkidka;
    procedure Insert(index: Integer; NewObject: TSkidka);
    property BoldObjects[index: Integer]: TSkidka read GetBoldObject write SetBoldObject; default;
  end;

  TSpecif_organizaciiList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TSpecif_organizacii;
    procedure SetBoldObject(index: Integer; NewObject: TSpecif_organizacii);
  public
    function Includes(anObject: TSpecif_organizacii): Boolean;
    function IndexOf(anObject: TSpecif_organizacii): Integer;
    procedure Add(NewObject: TSpecif_organizacii);
    function AddNew: TSpecif_organizacii;
    procedure Insert(index: Integer; NewObject: TSpecif_organizacii);
    property BoldObjects[index: Integer]: TSpecif_organizacii read GetBoldObject write SetBoldObject; default;
  end;

  TStoimostjList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TStoimostj;
    procedure SetBoldObject(index: Integer; NewObject: TStoimostj);
  public
    function Includes(anObject: TStoimostj): Boolean;
    function IndexOf(anObject: TStoimostj): Integer;
    procedure Add(NewObject: TStoimostj);
    function AddNew: TStoimostj;
    procedure Insert(index: Integer; NewObject: TStoimostj);
    property BoldObjects[index: Integer]: TStoimostj read GetBoldObject write SetBoldObject; default;
  end;

  TTip_kontaktaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TTip_kontakta;
    procedure SetBoldObject(index: Integer; NewObject: TTip_kontakta);
  public
    function Includes(anObject: TTip_kontakta): Boolean;
    function IndexOf(anObject: TTip_kontakta): Integer;
    procedure Add(NewObject: TTip_kontakta);
    function AddNew: TTip_kontakta;
    procedure Insert(index: Integer; NewObject: TTip_kontakta);
    property BoldObjects[index: Integer]: TTip_kontakta read GetBoldObject write SetBoldObject; default;
  end;

  TTip_reklamyList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TTip_reklamy;
    procedure SetBoldObject(index: Integer; NewObject: TTip_reklamy);
  public
    function Includes(anObject: TTip_reklamy): Boolean;
    function IndexOf(anObject: TTip_reklamy): Integer;
    procedure Add(NewObject: TTip_reklamy);
    function AddNew: TTip_reklamy;
    procedure Insert(index: Integer; NewObject: TTip_reklamy);
    property BoldObjects[index: Integer]: TTip_reklamy read GetBoldObject write SetBoldObject; default;
  end;

  TUsloviyaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TUsloviya;
    procedure SetBoldObject(index: Integer; NewObject: TUsloviya);
  public
    function Includes(anObject: TUsloviya): Boolean;
    function IndexOf(anObject: TUsloviya): Integer;
    procedure Add(NewObject: TUsloviya);
    function AddNew: TUsloviya;
    procedure Insert(index: Integer; NewObject: TUsloviya);
    property BoldObjects[index: Integer]: TUsloviya read GetBoldObject write SetBoldObject; default;
  end;

  THarakteristika_klientaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): THarakteristika_klienta;
    procedure SetBoldObject(index: Integer; NewObject: THarakteristika_klienta);
  public
    function Includes(anObject: THarakteristika_klienta): Boolean;
    function IndexOf(anObject: THarakteristika_klienta): Integer;
    procedure Add(NewObject: THarakteristika_klienta);
    function AddNew: THarakteristika_klienta;
    procedure Insert(index: Integer; NewObject: THarakteristika_klienta);
    property BoldObjects[index: Integer]: THarakteristika_klienta read GetBoldObject write SetBoldObject; default;
  end;

  TKlientList = class(TOrganizaciyaList)
  protected
    function GetBoldObject(index: Integer): TKlient;
    procedure SetBoldObject(index: Integer; NewObject: TKlient);
  public
    function Includes(anObject: TKlient): Boolean;
    function IndexOf(anObject: TKlient): Integer;
    procedure Add(NewObject: TKlient);
    function AddNew: TKlient;
    procedure Insert(index: Integer; NewObject: TKlient);
    property BoldObjects[index: Integer]: TKlient read GetBoldObject write SetBoldObject; default;
  end;

  TPersonalList = class(TOrganizaciyaList)
  protected
    function GetBoldObject(index: Integer): TPersonal;
    procedure SetBoldObject(index: Integer; NewObject: TPersonal);
  public
    function Includes(anObject: TPersonal): Boolean;
    function IndexOf(anObject: TPersonal): Integer;
    procedure Add(NewObject: TPersonal);
    function AddNew: TPersonal;
    procedure Insert(index: Integer; NewObject: TPersonal);
    property BoldObjects[index: Integer]: TPersonal read GetBoldObject write SetBoldObject; default;
  end;

  TRealjnaya_prichinaList = class(TAbstraktnyi_standartList)
  protected
    function GetBoldObject(index: Integer): TRealjnaya_prichina;
    procedure SetBoldObject(index: Integer; NewObject: TRealjnaya_prichina);
  public
    function Includes(anObject: TRealjnaya_prichina): Boolean;
    function IndexOf(anObject: TRealjnaya_prichina): Integer;
    procedure Add(NewObject: TRealjnaya_prichina);
    function AddNew: TRealjnaya_prichina;
    procedure Insert(index: Integer; NewObject: TRealjnaya_prichina);
    property BoldObjects[index: Integer]: TRealjnaya_prichina read GetBoldObject write SetBoldObject; default;
  end;

  TStandartnaya_zadachaList = class(TAbstraktnyi_standartList)
  protected
    function GetBoldObject(index: Integer): TStandartnaya_zadacha;
    procedure SetBoldObject(index: Integer; NewObject: TStandartnaya_zadacha);
  public
    function Includes(anObject: TStandartnaya_zadacha): Boolean;
    function IndexOf(anObject: TStandartnaya_zadacha): Integer;
    procedure Add(NewObject: TStandartnaya_zadacha);
    function AddNew: TStandartnaya_zadacha;
    procedure Insert(index: Integer; NewObject: TStandartnaya_zadacha);
    property BoldObjects[index: Integer]: TStandartnaya_zadacha read GetBoldObject write SetBoldObject; default;
  end;

  TStandartnaya_prichinaList = class(TAbstraktnyi_standartList)
  protected
    function GetBoldObject(index: Integer): TStandartnaya_prichina;
    procedure SetBoldObject(index: Integer; NewObject: TStandartnaya_prichina);
  public
    function Includes(anObject: TStandartnaya_prichina): Boolean;
    function IndexOf(anObject: TStandartnaya_prichina): Integer;
    procedure Add(NewObject: TStandartnaya_prichina);
    function AddNew: TStandartnaya_prichina;
    procedure Insert(index: Integer; NewObject: TStandartnaya_prichina);
    property BoldObjects[index: Integer]: TStandartnaya_prichina read GetBoldObject write SetBoldObject; default;
  end;

  TStandartnoe_napominanieList = class(TAbstraktnyi_standartList)
  protected
    function GetBoldObject(index: Integer): TStandartnoe_napominanie;
    procedure SetBoldObject(index: Integer; NewObject: TStandartnoe_napominanie);
  public
    function Includes(anObject: TStandartnoe_napominanie): Boolean;
    function IndexOf(anObject: TStandartnoe_napominanie): Integer;
    procedure Add(NewObject: TStandartnoe_napominanie);
    function AddNew: TStandartnoe_napominanie;
    procedure Insert(index: Integer; NewObject: TStandartnoe_napominanie);
    property BoldObjects[index: Integer]: TStandartnoe_napominanie read GetBoldObject write SetBoldObject; default;
  end;

  TStandartnoe_uslovieList = class(TAbstraktnyi_standartList)
  protected
    function GetBoldObject(index: Integer): TStandartnoe_uslovie;
    procedure SetBoldObject(index: Integer; NewObject: TStandartnoe_uslovie);
  public
    function Includes(anObject: TStandartnoe_uslovie): Boolean;
    function IndexOf(anObject: TStandartnoe_uslovie): Integer;
    procedure Add(NewObject: TStandartnoe_uslovie);
    function AddNew: TStandartnoe_uslovie;
    procedure Insert(index: Integer; NewObject: TStandartnoe_uslovie);
    property BoldObjects[index: Integer]: TStandartnoe_uslovie read GetBoldObject write SetBoldObject; default;
  end;

  _TDebuggerWorkAroundListClass49 = class(TInterfacedObject, IUnknown) end;
  {$EXTERNALSYM _TDebuggerWorkAroundListClass49}

  TStandartnyi_effektList = class(TAbstraktnyi_standartList)
  protected
    function GetBoldObject(index: Integer): TStandartnyi_effekt;
    procedure SetBoldObject(index: Integer; NewObject: TStandartnyi_effekt);
  public
    function Includes(anObject: TStandartnyi_effekt): Boolean;
    function IndexOf(anObject: TStandartnyi_effekt): Integer;
    procedure Add(NewObject: TStandartnyi_effekt);
    function AddNew: TStandartnyi_effekt;
    procedure Insert(index: Integer; NewObject: TStandartnyi_effekt);
    property BoldObjects[index: Integer]: TStandartnyi_effekt read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}

