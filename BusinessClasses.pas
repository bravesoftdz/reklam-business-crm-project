(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 27.09.2006 1:25:59          *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit BusinessClasses;

{$DEFINE BusinessClasses_unitheader}
{$INCLUDE BusinessClasses_Interface.inc}

{ Includefile for methodimplementations }

{$INCLUDE BusinessClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TLinkimeet_harakt_klientaharakterizuet_klienta }

function TLinkimeet_harakt_klientaharakterizuet_klienta._Get_M_harakterizuet_klienta: TBoldObjectReference;
begin
  assert(ValidateMember('TLinkimeet_harakt_klientaharakterizuet_klienta', 'harakterizuet_klienta', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TLinkimeet_harakt_klientaharakterizuet_klienta._Getharakterizuet_klienta: TKlient;
begin
  assert(not assigned(M_harakterizuet_klienta.BoldObject) or (M_harakterizuet_klienta.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'harakterizuet_klienta', M_harakterizuet_klienta.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_harakterizuet_klienta.BoldObject);
end;

function TLinkimeet_harakt_klientaharakterizuet_klienta._Get_M_imeet_harakt_klienta: TBoldObjectReference;
begin
  assert(ValidateMember('TLinkimeet_harakt_klientaharakterizuet_klienta', 'imeet_harakt_klienta', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TLinkimeet_harakt_klientaharakterizuet_klienta._Getimeet_harakt_klienta: THarakteristika_klienta;
begin
  assert(not assigned(M_imeet_harakt_klienta.BoldObject) or (M_imeet_harakt_klienta.BoldObject is THarakteristika_klienta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_harakt_klienta', M_imeet_harakt_klienta.BoldObject.ClassName, 'THarakteristika_klienta']));
  Result := THarakteristika_klienta(M_imeet_harakt_klienta.BoldObject);
end;

procedure TLinkimeet_harakt_klientaharakterizuet_klientaList.Add(NewObject: TLinkimeet_harakt_klientaharakterizuet_klienta);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TLinkimeet_harakt_klientaharakterizuet_klientaList.IndexOf(anObject: TLinkimeet_harakt_klientaharakterizuet_klienta): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TLinkimeet_harakt_klientaharakterizuet_klientaList.Includes(anObject: TLinkimeet_harakt_klientaharakterizuet_klienta) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TLinkimeet_harakt_klientaharakterizuet_klientaList.AddNew: TLinkimeet_harakt_klientaharakterizuet_klienta;
begin
  result := TLinkimeet_harakt_klientaharakterizuet_klienta(InternalAddNew);
end;

procedure TLinkimeet_harakt_klientaharakterizuet_klientaList.Insert(index: Integer; NewObject: TLinkimeet_harakt_klientaharakterizuet_klienta);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TLinkimeet_harakt_klientaharakterizuet_klientaList.GetBoldObject(index: Integer): TLinkimeet_harakt_klientaharakterizuet_klienta;
begin
  result := TLinkimeet_harakt_klientaharakterizuet_klienta(GetElement(index));
end;

procedure TLinkimeet_harakt_klientaharakterizuet_klientaList.SetBoldObject(index: Integer; NewObject: TLinkimeet_harakt_klientaharakterizuet_klienta);
begin;
  SetElement(index, NewObject);
end;

{ TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi }

function TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi._Get_M_imeet_v_osnove_zadachi: TBoldObjectReference;
begin
  assert(ValidateMember('TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi', 'imeet_v_osnove_zadachi', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi._Getimeet_v_osnove_zadachi: TZadacha;
begin
  assert(not assigned(M_imeet_v_osnove_zadachi.BoldObject) or (M_imeet_v_osnove_zadachi.BoldObject is TZadacha), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_v_osnove_zadachi', M_imeet_v_osnove_zadachi.BoldObject.ClassName, 'TZadacha']));
  Result := TZadacha(M_imeet_v_osnove_zadachi.BoldObject);
end;

function TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi._Get_M_otnos_kak_zadach_k_prich: TBoldObjectReference;
begin
  assert(ValidateMember('TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi', 'otnos_kak_zadach_k_prich', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi._Getotnos_kak_zadach_k_prich: TRealjnaya_prichina;
begin
  assert(not assigned(M_otnos_kak_zadach_k_prich.BoldObject) or (M_otnos_kak_zadach_k_prich.BoldObject is TRealjnaya_prichina), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnos_kak_zadach_k_prich', M_otnos_kak_zadach_k_prich.BoldObject.ClassName, 'TRealjnaya_prichina']));
  Result := TRealjnaya_prichina(M_otnos_kak_zadach_k_prich.BoldObject);
end;

procedure TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList.Add(NewObject: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList.IndexOf(anObject: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList.Includes(anObject: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList.AddNew: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi;
begin
  result := TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi(InternalAddNew);
end;

procedure TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList.Insert(index: Integer; NewObject: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList.GetBoldObject(index: Integer): TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi;
begin
  result := TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi(GetElement(index));
end;

procedure TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList.SetBoldObject(index: Integer; NewObject: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi);
begin;
  SetElement(index, NewObject);
end;

{ TVypusk_gazety }

function TVypusk_gazety._Get_M_Nomer_vypuska: TBAInteger;
begin
  assert(ValidateMember('TVypusk_gazety', 'Nomer_vypuska', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TVypusk_gazety._GetNomer_vypuska: Integer;
begin
  Result := M_Nomer_vypuska.AsInteger;
end;

procedure TVypusk_gazety._SetNomer_vypuska(const NewValue: Integer);
begin
  M_Nomer_vypuska.AsInteger := NewValue;
end;

function TVypusk_gazety._Get_M_Data_vypuska: TBADateTime;
begin
  assert(ValidateMember('TVypusk_gazety', 'Data_vypuska', 1, TBADateTime));
  Result := TBADateTime(BoldMembers[1]);
end;

function TVypusk_gazety._GetData_vypuska: TDateTime;
begin
  Result := M_Data_vypuska.AsDateTime;
end;

procedure TVypusk_gazety._SetData_vypuska(const NewValue: TDateTime);
begin
  M_Data_vypuska.AsDateTime := NewValue;
end;

function TVypusk_gazety._Get_M_God_vypuska: TBAInteger;
begin
  assert(ValidateMember('TVypusk_gazety', 'God_vypuska', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TVypusk_gazety._GetGod_vypuska: Integer;
begin
  Result := M_God_vypuska.AsInteger;
end;

procedure TVypusk_gazety._SetGod_vypuska(const NewValue: Integer);
begin
  M_God_vypuska.AsInteger := NewValue;
end;

function TVypusk_gazety._Get_M_sort: TBAInteger;
begin
  assert(ValidateMember('TVypusk_gazety', 'sort', 3, TBAInteger));
  Result := TBAInteger(BoldMembers[3]);
end;

function TVypusk_gazety._Getsort: Integer;
begin
  Result := M_sort.AsInteger;
end;

function TVypusk_gazety._Getimeet_razmesheniya: TRazmeshenie_reklamyList;
begin
  assert(ValidateMember('TVypusk_gazety', 'imeet_razmesheniya', 4, TRazmeshenie_reklamyList));
  Result := TRazmeshenie_reklamyList(BoldMembers[4]);
end;

function TVypusk_gazety._GetVyhod: TVyhodList;
begin
  assert(ValidateMember('TVypusk_gazety', 'Vyhod', 5, TVyhodList));
  Result := TVyhodList(BoldMembers[5]);
end;

function TVypusk_gazety._Get_M_vyhod_izdaniya: TBoldObjectReference;
begin
  assert(ValidateMember('TVypusk_gazety', 'vyhod_izdaniya', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TVypusk_gazety._Getvyhod_izdaniya: TIzdanie;
begin
  assert(not assigned(M_vyhod_izdaniya.BoldObject) or (M_vyhod_izdaniya.BoldObject is TIzdanie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vyhod_izdaniya', M_vyhod_izdaniya.BoldObject.ClassName, 'TIzdanie']));
  Result := TIzdanie(M_vyhod_izdaniya.BoldObject);
end;

procedure TVypusk_gazety._Setvyhod_izdaniya(const value: TIzdanie);
begin
  M_vyhod_izdaniya.BoldObject := value;
end;

function TVypusk_gazety._Getyavl_tek_vypuskom_dlya: TIzdanieList;
begin
  assert(ValidateMember('TVypusk_gazety', 'yavl_tek_vypuskom_dlya', 7, TIzdanieList));
  Result := TIzdanieList(BoldMembers[7]);
end;

procedure TVypusk_gazetyList.Add(NewObject: TVypusk_gazety);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TVypusk_gazetyList.IndexOf(anObject: TVypusk_gazety): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TVypusk_gazetyList.Includes(anObject: TVypusk_gazety) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TVypusk_gazetyList.AddNew: TVypusk_gazety;
begin
  result := TVypusk_gazety(InternalAddNew);
end;

procedure TVypusk_gazetyList.Insert(index: Integer; NewObject: TVypusk_gazety);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TVypusk_gazetyList.GetBoldObject(index: Integer): TVypusk_gazety;
begin
  result := TVypusk_gazety(GetElement(index));
end;

procedure TVypusk_gazetyList.SetBoldObject(index: Integer; NewObject: TVypusk_gazety);
begin;
  SetElement(index, NewObject);
end;

{ TVyhod }

function TVyhod._Get_M_Bonusnyi_vyhod: TBABoolean;
begin
  assert(ValidateMember('TVyhod', 'Bonusnyi_vyhod', 0, TBABoolean));
  Result := TBABoolean(BoldMembers[0]);
end;

function TVyhod._GetBonusnyi_vyhod: Boolean;
begin
  Result := M_Bonusnyi_vyhod.AsBoolean;
end;

function TVyhod._Get_M_Izmenitj_kol_strok: TBABoolean;
begin
  assert(ValidateMember('TVyhod', 'Izmenitj_kol_strok', 1, TBABoolean));
  Result := TBABoolean(BoldMembers[1]);
end;

function TVyhod._GetIzmenitj_kol_strok: Boolean;
begin
  Result := M_Izmenitj_kol_strok.AsBoolean;
end;

procedure TVyhod._SetIzmenitj_kol_strok(const NewValue: Boolean);
begin
  M_Izmenitj_kol_strok.AsBoolean := NewValue;
end;

function TVyhod._Get_M_Nov_kol_strok: TBAInteger;
begin
  assert(ValidateMember('TVyhod', 'Nov_kol_strok', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TVyhod._GetNov_kol_strok: Integer;
begin
  Result := M_Nov_kol_strok.AsInteger;
end;

procedure TVyhod._SetNov_kol_strok(const NewValue: Integer);
begin
  M_Nov_kol_strok.AsInteger := NewValue;
end;

function TVyhod._Get_M_Vsego_dob_stoim: TBAFloat;
begin
  assert(ValidateMember('TVyhod', 'Vsego_dob_stoim', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TVyhod._GetVsego_dob_stoim: double;
begin
  Result := M_Vsego_dob_stoim.AsFloat;
end;

function TVyhod._Get_M_Proc_skidka_na_vyh: TBABoolean;
begin
  assert(ValidateMember('TVyhod', 'Proc_skidka_na_vyh', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TVyhod._GetProc_skidka_na_vyh: Boolean;
begin
  Result := M_Proc_skidka_na_vyh.AsBoolean;
end;

function TVyhod._Get_M_Vyhodov_do: TBAInteger;
begin
  assert(ValidateMember('TVyhod', 'Vyhodov_do', 5, TBAInteger));
  Result := TBAInteger(BoldMembers[5]);
end;

function TVyhod._GetVyhodov_do: Integer;
begin
  Result := M_Vyhodov_do.AsInteger;
end;

function TVyhod._Get_M_Izmenyon: TBABoolean;
begin
  assert(ValidateMember('TVyhod', 'Izmenyon', 6, TBABoolean));
  Result := TBABoolean(BoldMembers[6]);
end;

function TVyhod._GetIzmenyon: Boolean;
begin
  Result := M_Izmenyon.AsBoolean;
end;

procedure TVyhod._SetIzmenyon(const NewValue: Boolean);
begin
  M_Izmenyon.AsBoolean := NewValue;
end;

function TVyhod._Get_M_Izmen_uchteny_korrektorom: TBABoolean;
begin
  assert(ValidateMember('TVyhod', 'Izmen_uchteny_korrektorom', 7, TBABoolean));
  Result := TBABoolean(BoldMembers[7]);
end;

function TVyhod._GetIzmen_uchteny_korrektorom: Boolean;
begin
  Result := M_Izmen_uchteny_korrektorom.AsBoolean;
end;

procedure TVyhod._SetIzmen_uchteny_korrektorom(const NewValue: Boolean);
begin
  M_Izmen_uchteny_korrektorom.AsBoolean := NewValue;
end;

function TVyhod._Get_M_Posledn_nezap: TBAInteger;
begin
  assert(ValidateMember('TVyhod', 'Posledn_nezap', 8, TBAInteger));
  Result := TBAInteger(BoldMembers[8]);
end;

function TVyhod._GetPosledn_nezap: Integer;
begin
  Result := M_Posledn_nezap.AsInteger;
end;

function TVyhod._Get_M_Stoim_vyhoda: TBAFloat;
begin
  assert(ValidateMember('TVyhod', 'Stoim_vyhoda', 9, TBAFloat));
  Result := TBAFloat(BoldMembers[9]);
end;

function TVyhod._GetStoim_vyhoda: double;
begin
  Result := M_Stoim_vyhoda.AsFloat;
end;

function TVyhod._Get_M_Primechanie: TBAString;
begin
  assert(ValidateMember('TVyhod', 'Primechanie', 10, TBAString));
  Result := TBAString(BoldMembers[10]);
end;

function TVyhod._GetPrimechanie: String;
begin
  Result := M_Primechanie.AsString;
end;

procedure TVyhod._SetPrimechanie(const NewValue: String);
begin
  M_Primechanie.AsString := NewValue;
end;

function TVyhod._Get_M_Kol_objyavl: TBAInteger;
begin
  assert(ValidateMember('TVyhod', 'Kol_objyavl', 11, TBAInteger));
  Result := TBAInteger(BoldMembers[11]);
end;

function TVyhod._GetKol_objyavl: Integer;
begin
  Result := M_Kol_objyavl.AsInteger;
end;

procedure TVyhod._SetKol_objyavl(const NewValue: Integer);
begin
  M_Kol_objyavl.AsInteger := NewValue;
end;

function TVyhod._Get_M_Vyh_po_inoi_cene: TBABoolean;
begin
  assert(ValidateMember('TVyhod', 'Vyh_po_inoi_cene', 12, TBABoolean));
  Result := TBABoolean(BoldMembers[12]);
end;

function TVyhod._GetVyh_po_inoi_cene: Boolean;
begin
  Result := M_Vyh_po_inoi_cene.AsBoolean;
end;

procedure TVyhod._SetVyh_po_inoi_cene(const NewValue: Boolean);
begin
  M_Vyh_po_inoi_cene.AsBoolean := NewValue;
end;

function TVyhod._Get_M_Ustan_cena: TBAFloat;
begin
  assert(ValidateMember('TVyhod', 'Ustan_cena', 13, TBAFloat));
  Result := TBAFloat(BoldMembers[13]);
end;

function TVyhod._GetUstan_cena: double;
begin
  Result := M_Ustan_cena.AsFloat;
end;

procedure TVyhod._SetUstan_cena(const NewValue: double);
begin
  M_Ustan_cena.AsFloat := NewValue;
end;

function TVyhod._Get_M_Stoim_ot_razmesh: TBAFloat;
begin
  assert(ValidateMember('TVyhod', 'Stoim_ot_razmesh', 14, TBAFloat));
  Result := TBAFloat(BoldMembers[14]);
end;

function TVyhod._GetStoim_ot_razmesh: double;
begin
  Result := M_Stoim_ot_razmesh.AsFloat;
end;

function TVyhod._Get_M_V_dolg: TBABoolean;
begin
  assert(ValidateMember('TVyhod', 'V_dolg', 15, TBABoolean));
  Result := TBABoolean(BoldMembers[15]);
end;

function TVyhod._GetV_dolg: Boolean;
begin
  Result := M_V_dolg.AsBoolean;
end;

function TVyhod._Get_M_Kolichestvo_strok: TBAInteger;
begin
  assert(ValidateMember('TVyhod', 'Kolichestvo_strok', 16, TBAInteger));
  Result := TBAInteger(BoldMembers[16]);
end;

function TVyhod._GetKolichestvo_strok: Integer;
begin
  Result := M_Kolichestvo_strok.AsInteger;
end;

function TVyhod._Getimeet_dobav_stoim: TDobavochnaya_stoimList;
begin
  assert(ValidateMember('TVyhod', 'imeet_dobav_stoim', 17, TDobavochnaya_stoimList));
  Result := TDobavochnaya_stoimList(BoldMembers[17]);
end;

function TVyhod._Get_M_imeet_razmesheniya: TBoldObjectReference;
begin
  assert(ValidateMember('TVyhod', 'imeet_razmesheniya', 18, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[18]);
end;

function TVyhod._Getimeet_razmesheniya: TRazmeshenie_reklamy;
begin
  assert(not assigned(M_imeet_razmesheniya.BoldObject) or (M_imeet_razmesheniya.BoldObject is TRazmeshenie_reklamy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_razmesheniya', M_imeet_razmesheniya.BoldObject.ClassName, 'TRazmeshenie_reklamy']));
  Result := TRazmeshenie_reklamy(M_imeet_razmesheniya.BoldObject);
end;

function TVyhod._Get_M_vyhodit_v_vypuskah: TBoldObjectReference;
begin
  assert(ValidateMember('TVyhod', 'vyhodit_v_vypuskah', 19, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[19]);
end;

function TVyhod._Getvyhodit_v_vypuskah: TVypusk_gazety;
begin
  assert(not assigned(M_vyhodit_v_vypuskah.BoldObject) or (M_vyhodit_v_vypuskah.BoldObject is TVypusk_gazety), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vyhodit_v_vypuskah', M_vyhodit_v_vypuskah.BoldObject.ClassName, 'TVypusk_gazety']));
  Result := TVypusk_gazety(M_vyhodit_v_vypuskah.BoldObject);
end;

procedure TVyhodList.Add(NewObject: TVyhod);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TVyhodList.IndexOf(anObject: TVyhod): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TVyhodList.Includes(anObject: TVyhod) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TVyhodList.AddNew: TVyhod;
begin
  result := TVyhod(InternalAddNew);
end;

procedure TVyhodList.Insert(index: Integer; NewObject: TVyhod);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TVyhodList.GetBoldObject(index: Integer): TVyhod;
begin
  result := TVyhod(GetElement(index));
end;

procedure TVyhodList.SetBoldObject(index: Integer; NewObject: TVyhod);
begin;
  SetElement(index, NewObject);
end;

function TVyhod.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Proc_skidka_na_vyh) then result := _Proc_skidka_na_vyh_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TVyhod.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TDokument }

function TDokument._Get_M_Nomer_dogovora: TBAString;
begin
  assert(ValidateMember('TDokument', 'Nomer_dogovora', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TDokument._GetNomer_dogovora: String;
begin
  Result := M_Nomer_dogovora.AsString;
end;

procedure TDokument._SetNomer_dogovora(const NewValue: String);
begin
  M_Nomer_dogovora.AsString := NewValue;
end;

function TDokument._Get_M_Naimenovanie_dogovora: TBAString;
begin
  assert(ValidateMember('TDokument', 'Naimenovanie_dogovora', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TDokument._GetNaimenovanie_dogovora: String;
begin
  Result := M_Naimenovanie_dogovora.AsString;
end;

procedure TDokument._SetNaimenovanie_dogovora(const NewValue: String);
begin
  M_Naimenovanie_dogovora.AsString := NewValue;
end;

function TDokument._Get_M_Opisanie_dogovora: TBAString;
begin
  assert(ValidateMember('TDokument', 'Opisanie_dogovora', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TDokument._GetOpisanie_dogovora: String;
begin
  Result := M_Opisanie_dogovora.AsString;
end;

procedure TDokument._SetOpisanie_dogovora(const NewValue: String);
begin
  M_Opisanie_dogovora.AsString := NewValue;
end;

function TDokument._Get_M_dok_vhod_v_sost_proekta: TBoldObjectReference;
begin
  assert(ValidateMember('TDokument', 'dok_vhod_v_sost_proekta', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TDokument._Getdok_vhod_v_sost_proekta: TProekt;
begin
  assert(not assigned(M_dok_vhod_v_sost_proekta.BoldObject) or (M_dok_vhod_v_sost_proekta.BoldObject is TProekt), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'dok_vhod_v_sost_proekta', M_dok_vhod_v_sost_proekta.BoldObject.ClassName, 'TProekt']));
  Result := TProekt(M_dok_vhod_v_sost_proekta.BoldObject);
end;

procedure TDokument._Setdok_vhod_v_sost_proekta(const value: TProekt);
begin
  M_dok_vhod_v_sost_proekta.BoldObject := value;
end;

procedure TDokumentList.Add(NewObject: TDokument);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDokumentList.IndexOf(anObject: TDokument): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDokumentList.Includes(anObject: TDokument) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDokumentList.AddNew: TDokument;
begin
  result := TDokument(InternalAddNew);
end;

procedure TDokumentList.Insert(index: Integer; NewObject: TDokument);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDokumentList.GetBoldObject(index: Integer): TDokument;
begin
  result := TDokument(GetElement(index));
end;

procedure TDokumentList.SetBoldObject(index: Integer; NewObject: TDokument);
begin;
  SetElement(index, NewObject);
end;

{ TLog_operacii }

function TLog_operacii._Get_M_Naimenovanie_operacii: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Naimenovanie_operacii', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TLog_operacii._GetNaimenovanie_operacii: String;
begin
  Result := M_Naimenovanie_operacii.AsString;
end;

procedure TLog_operacii._SetNaimenovanie_operacii(const NewValue: String);
begin
  M_Naimenovanie_operacii.AsString := NewValue;
end;

function TLog_operacii._Get_M_Subjekt: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Subjekt', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TLog_operacii._GetSubjekt: String;
begin
  Result := M_Subjekt.AsString;
end;

function TLog_operacii._Get_M_Data_i_vremya: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Data_i_vremya', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TLog_operacii._GetData_i_vremya: String;
begin
  Result := M_Data_i_vremya.AsString;
end;

function TLog_operacii._Get_M_Data: TBADate;
begin
  assert(ValidateMember('TLog_operacii', 'Data', 3, TBADate));
  Result := TBADate(BoldMembers[3]);
end;

function TLog_operacii._GetData: TDate;
begin
  Result := M_Data.AsDate;
end;

procedure TLog_operacii._SetData(const NewValue: TDate);
begin
  M_Data.AsDate := NewValue;
end;

function TLog_operacii._Get_M_Vremya: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Vremya', 4, TBAString));
  Result := TBAString(BoldMembers[4]);
end;

function TLog_operacii._GetVremya: String;
begin
  Result := M_Vremya.AsString;
end;

procedure TLog_operacii._SetVremya(const NewValue: String);
begin
  M_Vremya.AsString := NewValue;
end;

function TLog_operacii._Get_M_ot_deistvii: TBoldObjectReference;
begin
  assert(ValidateMember('TLog_operacii', 'ot_deistvii', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TLog_operacii._Getot_deistvii: TPersonal;
begin
  assert(not assigned(M_ot_deistvii.BoldObject) or (M_ot_deistvii.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ot_deistvii', M_ot_deistvii.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_ot_deistvii.BoldObject);
end;

procedure TLog_operacii._Setot_deistvii(const value: TPersonal);
begin
  M_ot_deistvii.BoldObject := value;
end;

procedure TLog_operaciiList.Add(NewObject: TLog_operacii);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TLog_operaciiList.IndexOf(anObject: TLog_operacii): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TLog_operaciiList.Includes(anObject: TLog_operacii) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TLog_operaciiList.AddNew: TLog_operacii;
begin
  result := TLog_operacii(InternalAddNew);
end;

procedure TLog_operaciiList.Insert(index: Integer; NewObject: TLog_operacii);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TLog_operaciiList.GetBoldObject(index: Integer): TLog_operacii;
begin
  result := TLog_operacii(GetElement(index));
end;

procedure TLog_operaciiList.SetBoldObject(index: Integer; NewObject: TLog_operacii);
begin;
  SetElement(index, NewObject);
end;

{ TNastroiki }

function TNastroiki._Get_M_Cvet_neoplachenyh: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_neoplachenyh', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TNastroiki._GetCvet_neoplachenyh: String;
begin
  Result := M_Cvet_neoplachenyh.AsString;
end;

procedure TNastroiki._SetCvet_neoplachenyh(const NewValue: String);
begin
  M_Cvet_neoplachenyh.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_idushih: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_idushih', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TNastroiki._GetCvet_idushih: String;
begin
  Result := M_Cvet_idushih.AsString;
end;

procedure TNastroiki._SetCvet_idushih(const NewValue: String);
begin
  M_Cvet_idushih.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_pod_voprosom: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_pod_voprosom', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TNastroiki._GetCvet_pod_voprosom: String;
begin
  Result := M_Cvet_pod_voprosom.AsString;
end;

procedure TNastroiki._SetCvet_pod_voprosom(const NewValue: String);
begin
  M_Cvet_pod_voprosom.AsString := NewValue;
end;

function TNastroiki._Get_M_Chislo_vyh_bonus: TBAInteger;
begin
  assert(ValidateMember('TNastroiki', 'Chislo_vyh_bonus', 3, TBAInteger));
  Result := TBAInteger(BoldMembers[3]);
end;

function TNastroiki._GetChislo_vyh_bonus: Integer;
begin
  Result := M_Chislo_vyh_bonus.AsInteger;
end;

procedure TNastroiki._SetChislo_vyh_bonus(const NewValue: Integer);
begin
  M_Chislo_vyh_bonus.AsInteger := NewValue;
end;

function TNastroiki._Get_M_Nomer_start_vyp: TBAInteger;
begin
  assert(ValidateMember('TNastroiki', 'Nomer_start_vyp', 4, TBAInteger));
  Result := TBAInteger(BoldMembers[4]);
end;

function TNastroiki._GetNomer_start_vyp: Integer;
begin
  Result := M_Nomer_start_vyp.AsInteger;
end;

procedure TNastroiki._SetNomer_start_vyp(const NewValue: Integer);
begin
  M_Nomer_start_vyp.AsInteger := NewValue;
end;

function TNastroiki._Get_M_God_start_vyp: TBAInteger;
begin
  assert(ValidateMember('TNastroiki', 'God_start_vyp', 5, TBAInteger));
  Result := TBAInteger(BoldMembers[5]);
end;

function TNastroiki._GetGod_start_vyp: Integer;
begin
  Result := M_God_start_vyp.AsInteger;
end;

procedure TNastroiki._SetGod_start_vyp(const NewValue: Integer);
begin
  M_God_start_vyp.AsInteger := NewValue;
end;

function TNastroiki._Get_M_Skidka_povt_vyh: TBAFloat;
begin
  assert(ValidateMember('TNastroiki', 'Skidka_povt_vyh', 6, TBAFloat));
  Result := TBAFloat(BoldMembers[6]);
end;

function TNastroiki._GetSkidka_povt_vyh: double;
begin
  Result := M_Skidka_povt_vyh.AsFloat;
end;

procedure TNastroiki._SetSkidka_povt_vyh(const NewValue: double);
begin
  M_Skidka_povt_vyh.AsFloat := NewValue;
end;

function TNastroiki._Get_M_Dlina_intervala: TBAInteger;
begin
  assert(ValidateMember('TNastroiki', 'Dlina_intervala', 7, TBAInteger));
  Result := TBAInteger(BoldMembers[7]);
end;

function TNastroiki._GetDlina_intervala: Integer;
begin
  Result := M_Dlina_intervala.AsInteger;
end;

procedure TNastroiki._SetDlina_intervala(const NewValue: Integer);
begin
  M_Dlina_intervala.AsInteger := NewValue;
end;

function TNastroiki._Get_M_Tek_vremya: TBADateTime;
begin
  assert(ValidateMember('TNastroiki', 'Tek_vremya', 8, TBADateTime));
  Result := TBADateTime(BoldMembers[8]);
end;

function TNastroiki._GetTek_vremya: TDateTime;
begin
  Result := M_Tek_vremya.AsDateTime;
end;

procedure TNastroiki._SetTek_vremya(const NewValue: TDateTime);
begin
  M_Tek_vremya.AsDateTime := NewValue;
end;

function TNastroiki._Get_M_Stoim_za_stroku: TBAFloat;
begin
  assert(ValidateMember('TNastroiki', 'Stoim_za_stroku', 9, TBAFloat));
  Result := TBAFloat(BoldMembers[9]);
end;

function TNastroiki._GetStoim_za_stroku: double;
begin
  Result := M_Stoim_za_stroku.AsFloat;
end;

procedure TNastroiki._SetStoim_za_stroku(const NewValue: double);
begin
  M_Stoim_za_stroku.AsFloat := NewValue;
end;

function TNastroiki._Get_M_Stoim_za_stroku_opt: TBAFloat;
begin
  assert(ValidateMember('TNastroiki', 'Stoim_za_stroku_opt', 10, TBAFloat));
  Result := TBAFloat(BoldMembers[10]);
end;

function TNastroiki._GetStoim_za_stroku_opt: double;
begin
  Result := M_Stoim_za_stroku_opt.AsFloat;
end;

procedure TNastroiki._SetStoim_za_stroku_opt(const NewValue: double);
begin
  M_Stoim_za_stroku_opt.AsFloat := NewValue;
end;

function TNastroiki._Get_M_Kolich_strok_opt: TBAFloat;
begin
  assert(ValidateMember('TNastroiki', 'Kolich_strok_opt', 11, TBAFloat));
  Result := TBAFloat(BoldMembers[11]);
end;

function TNastroiki._GetKolich_strok_opt: double;
begin
  Result := M_Kolich_strok_opt.AsFloat;
end;

procedure TNastroiki._SetKolich_strok_opt(const NewValue: double);
begin
  M_Kolich_strok_opt.AsFloat := NewValue;
end;

function TNastroiki._Get_M_Post_proc_sbavki: TBAFloat;
begin
  assert(ValidateMember('TNastroiki', 'Post_proc_sbavki', 12, TBAFloat));
  Result := TBAFloat(BoldMembers[12]);
end;

function TNastroiki._GetPost_proc_sbavki: double;
begin
  Result := M_Post_proc_sbavki.AsFloat;
end;

procedure TNastroiki._SetPost_proc_sbavki(const NewValue: double);
begin
  M_Post_proc_sbavki.AsFloat := NewValue;
end;

function TNastroiki._Get_M_Dnei_napom_ob_okonch: TBAFloat;
begin
  assert(ValidateMember('TNastroiki', 'Dnei_napom_ob_okonch', 13, TBAFloat));
  Result := TBAFloat(BoldMembers[13]);
end;

function TNastroiki._GetDnei_napom_ob_okonch: double;
begin
  Result := M_Dnei_napom_ob_okonch.AsFloat;
end;

procedure TNastroiki._SetDnei_napom_ob_okonch(const NewValue: double);
begin
  M_Dnei_napom_ob_okonch.AsFloat := NewValue;
end;

procedure TNastroikiList.Add(NewObject: TNastroiki);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TNastroikiList.IndexOf(anObject: TNastroiki): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TNastroikiList.Includes(anObject: TNastroiki) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TNastroikiList.AddNew: TNastroiki;
begin
  result := TNastroiki(InternalAddNew);
end;

procedure TNastroikiList.Insert(index: Integer; NewObject: TNastroiki);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TNastroikiList.GetBoldObject(index: Integer): TNastroiki;
begin
  result := TNastroiki(GetElement(index));
end;

procedure TNastroikiList.SetBoldObject(index: Integer; NewObject: TNastroiki);
begin;
  SetElement(index, NewObject);
end;

{ TOplata }

function TOplata._Get_M_Summa: TBAFloat;
begin
  assert(ValidateMember('TOplata', 'Summa', 0, TBAFloat));
  Result := TBAFloat(BoldMembers[0]);
end;

function TOplata._GetSumma: double;
begin
  Result := M_Summa.AsFloat;
end;

procedure TOplata._SetSumma(const NewValue: double);
begin
  M_Summa.AsFloat := NewValue;
end;

function TOplata._Get_M_Data_oplaty: TBADateTime;
begin
  assert(ValidateMember('TOplata', 'Data_oplaty', 1, TBADateTime));
  Result := TBADateTime(BoldMembers[1]);
end;

function TOplata._GetData_oplaty: TDateTime;
begin
  Result := M_Data_oplaty.AsDateTime;
end;

procedure TOplata._SetData_oplaty(const NewValue: TDateTime);
begin
  M_Data_oplaty.AsDateTime := NewValue;
end;

function TOplata._Get_M_Osnovanie: TBAString;
begin
  assert(ValidateMember('TOplata', 'Osnovanie', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TOplata._GetOsnovanie: String;
begin
  Result := M_Osnovanie.AsString;
end;

procedure TOplata._SetOsnovanie(const NewValue: String);
begin
  M_Osnovanie.AsString := NewValue;
end;

function TOplata._Get_M_Bez_nal: TBABoolean;
begin
  assert(ValidateMember('TOplata', 'Bez_nal', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TOplata._GetBez_nal: Boolean;
begin
  Result := M_Bez_nal.AsBoolean;
end;

procedure TOplata._SetBez_nal(const NewValue: Boolean);
begin
  M_Bez_nal.AsBoolean := NewValue;
end;

function TOplata._Get_M_Nomer_vypis_schyota: TBAInteger;
begin
  assert(ValidateMember('TOplata', 'Nomer_vypis_schyota', 4, TBAInteger));
  Result := TBAInteger(BoldMembers[4]);
end;

function TOplata._GetNomer_vypis_schyota: Integer;
begin
  Result := M_Nomer_vypis_schyota.AsInteger;
end;

procedure TOplata._SetNomer_vypis_schyota(const NewValue: Integer);
begin
  M_Nomer_vypis_schyota.AsInteger := NewValue;
end;

function TOplata._Get_M_Nomer_prih_ordera: TBAString;
begin
  assert(ValidateMember('TOplata', 'Nomer_prih_ordera', 5, TBAString));
  Result := TBAString(BoldMembers[5]);
end;

function TOplata._GetNomer_prih_ordera: String;
begin
  Result := M_Nomer_prih_ordera.AsString;
end;

procedure TOplata._SetNomer_prih_ordera(const NewValue: String);
begin
  M_Nomer_prih_ordera.AsString := NewValue;
end;

function TOplata._Get_M_Obozn_schyota: TBAString;
begin
  assert(ValidateMember('TOplata', 'Obozn_schyota', 6, TBAString));
  Result := TBAString(BoldMembers[6]);
end;

function TOplata._GetObozn_schyota: String;
begin
  Result := M_Obozn_schyota.AsString;
end;

procedure TOplata._SetObozn_schyota(const NewValue: String);
begin
  M_Obozn_schyota.AsString := NewValue;
end;

function TOplata._Get_M_Primechanie: TBAString;
begin
  assert(ValidateMember('TOplata', 'Primechanie', 7, TBAString));
  Result := TBAString(BoldMembers[7]);
end;

function TOplata._GetPrimechanie: String;
begin
  Result := M_Primechanie.AsString;
end;

procedure TOplata._SetPrimechanie(const NewValue: String);
begin
  M_Primechanie.AsString := NewValue;
end;

function TOplata._Get_M_yavl_oplatoi_za: TBoldObjectReference;
begin
  assert(ValidateMember('TOplata', 'yavl_oplatoi_za', 8, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[8]);
end;

function TOplata._Getyavl_oplatoi_za: TRazmeshenie_reklamy;
begin
  assert(not assigned(M_yavl_oplatoi_za.BoldObject) or (M_yavl_oplatoi_za.BoldObject is TRazmeshenie_reklamy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavl_oplatoi_za', M_yavl_oplatoi_za.BoldObject.ClassName, 'TRazmeshenie_reklamy']));
  Result := TRazmeshenie_reklamy(M_yavl_oplatoi_za.BoldObject);
end;

procedure TOplata._Setyavl_oplatoi_za(const value: TRazmeshenie_reklamy);
begin
  M_yavl_oplatoi_za.BoldObject := value;
end;

function TOplata._Get_M_osush_za_schyot: TBoldObjectReference;
begin
  assert(ValidateMember('TOplata', 'osush_za_schyot', 9, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[9]);
end;

function TOplata._Getosush_za_schyot: TKlient;
begin
  assert(not assigned(M_osush_za_schyot.BoldObject) or (M_osush_za_schyot.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'osush_za_schyot', M_osush_za_schyot.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_osush_za_schyot.BoldObject);
end;

procedure TOplata._Setosush_za_schyot(const value: TKlient);
begin
  M_osush_za_schyot.BoldObject := value;
end;

function TOplata._Get_M_oplata_po_schyotu: TBoldObjectReference;
begin
  assert(ValidateMember('TOplata', 'oplata_po_schyotu', 10, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[10]);
end;

function TOplata._Getoplata_po_schyotu: TSchyot;
begin
  assert(not assigned(M_oplata_po_schyotu.BoldObject) or (M_oplata_po_schyotu.BoldObject is TSchyot), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'oplata_po_schyotu', M_oplata_po_schyotu.BoldObject.ClassName, 'TSchyot']));
  Result := TSchyot(M_oplata_po_schyotu.BoldObject);
end;

procedure TOplata._Setoplata_po_schyotu(const value: TSchyot);
begin
  M_oplata_po_schyotu.BoldObject := value;
end;

function TOplata._Get_M_otnositsya_k_kampanii: TBoldObjectReference;
begin
  assert(ValidateMember('TOplata', 'otnositsya_k_kampanii', 11, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[11]);
end;

function TOplata._Getotnositsya_k_kampanii: TRazmeshenie_reklamy;
begin
  assert(not assigned(M_otnositsya_k_kampanii.BoldObject) or (M_otnositsya_k_kampanii.BoldObject is TRazmeshenie_reklamy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_k_kampanii', M_otnositsya_k_kampanii.BoldObject.ClassName, 'TRazmeshenie_reklamy']));
  Result := TRazmeshenie_reklamy(M_otnositsya_k_kampanii.BoldObject);
end;

procedure TOplata._Setotnositsya_k_kampanii(const value: TRazmeshenie_reklamy);
begin
  M_otnositsya_k_kampanii.BoldObject := value;
end;

procedure TOplataList.Add(NewObject: TOplata);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOplataList.IndexOf(anObject: TOplata): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOplataList.Includes(anObject: TOplata) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOplataList.AddNew: TOplata;
begin
  result := TOplata(InternalAddNew);
end;

procedure TOplataList.Insert(index: Integer; NewObject: TOplata);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOplataList.GetBoldObject(index: Integer): TOplata;
begin
  result := TOplata(GetElement(index));
end;

procedure TOplataList.SetBoldObject(index: Integer; NewObject: TOplata);
begin;
  SetElement(index, NewObject);
end;

{ TPersona }

function TPersona._Get_M_Familiya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Familiya', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPersona._GetFamiliya: String;
begin
  Result := M_Familiya.AsString;
end;

procedure TPersona._SetFamiliya(const NewValue: String);
begin
  M_Familiya.AsString := NewValue;
end;

function TPersona._Get_M_Imya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Imya', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TPersona._GetImya: String;
begin
  Result := M_Imya.AsString;
end;

procedure TPersona._SetImya(const NewValue: String);
begin
  M_Imya.AsString := NewValue;
end;

function TPersona._Get_M_Otchestvo: TBAString;
begin
  assert(ValidateMember('TPersona', 'Otchestvo', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TPersona._GetOtchestvo: String;
begin
  Result := M_Otchestvo.AsString;
end;

procedure TPersona._SetOtchestvo(const NewValue: String);
begin
  M_Otchestvo.AsString := NewValue;
end;

function TPersona._Get_M_Ulica: TBAString;
begin
  assert(ValidateMember('TPersona', 'Ulica', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TPersona._GetUlica: String;
begin
  Result := M_Ulica.AsString;
end;

procedure TPersona._SetUlica(const NewValue: String);
begin
  M_Ulica.AsString := NewValue;
end;

function TPersona._Get_M_Dom: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Dom', 4, TBAInteger));
  Result := TBAInteger(BoldMembers[4]);
end;

function TPersona._GetDom: Integer;
begin
  Result := M_Dom.AsInteger;
end;

procedure TPersona._SetDom(const NewValue: Integer);
begin
  M_Dom.AsInteger := NewValue;
end;

function TPersona._Get_M_Kvartira: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Kvartira', 5, TBAInteger));
  Result := TBAInteger(BoldMembers[5]);
end;

function TPersona._GetKvartira: Integer;
begin
  Result := M_Kvartira.AsInteger;
end;

procedure TPersona._SetKvartira(const NewValue: Integer);
begin
  M_Kvartira.AsInteger := NewValue;
end;

function TPersona._Get_M_Korpus: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Korpus', 6, TBAInteger));
  Result := TBAInteger(BoldMembers[6]);
end;

function TPersona._GetKorpus: Integer;
begin
  Result := M_Korpus.AsInteger;
end;

procedure TPersona._SetKorpus(const NewValue: Integer);
begin
  M_Korpus.AsInteger := NewValue;
end;

function TPersona._Get_M_Mobiljnyi_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Mobiljnyi_telefon', 7, TBAString));
  Result := TBAString(BoldMembers[7]);
end;

function TPersona._GetMobiljnyi_telefon: String;
begin
  Result := M_Mobiljnyi_telefon.AsString;
end;

procedure TPersona._SetMobiljnyi_telefon(const NewValue: String);
begin
  M_Mobiljnyi_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Rabochii_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Rabochii_telefon', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TPersona._GetRabochii_telefon: String;
begin
  Result := M_Rabochii_telefon.AsString;
end;

procedure TPersona._SetRabochii_telefon(const NewValue: String);
begin
  M_Rabochii_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Domashnii_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Domashnii_telefon', 9, TBAString));
  Result := TBAString(BoldMembers[9]);
end;

function TPersona._GetDomashnii_telefon: String;
begin
  Result := M_Domashnii_telefon.AsString;
end;

procedure TPersona._SetDomashnii_telefon(const NewValue: String);
begin
  M_Domashnii_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Elektronnyi_adres: TBAString;
begin
  assert(ValidateMember('TPersona', 'Elektronnyi_adres', 10, TBAString));
  Result := TBAString(BoldMembers[10]);
end;

function TPersona._GetElektronnyi_adres: String;
begin
  Result := M_Elektronnyi_adres.AsString;
end;

procedure TPersona._SetElektronnyi_adres(const NewValue: String);
begin
  M_Elektronnyi_adres.AsString := NewValue;
end;

function TPersona._Get_M_Polnoe_imya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Polnoe_imya', 11, TBAString));
  Result := TBAString(BoldMembers[11]);
end;

function TPersona._GetPolnoe_imya: String;
begin
  Result := M_Polnoe_imya.AsString;
end;

function TPersona._Get_M_Data_rogdeniya: TBADateTime;
begin
  assert(ValidateMember('TPersona', 'Data_rogdeniya', 12, TBADateTime));
  Result := TBADateTime(BoldMembers[12]);
end;

function TPersona._GetData_rogdeniya: TDateTime;
begin
  Result := M_Data_rogdeniya.AsDateTime;
end;

procedure TPersona._SetData_rogdeniya(const NewValue: TDateTime);
begin
  M_Data_rogdeniya.AsDateTime := NewValue;
end;

procedure TPersonaList.Add(NewObject: TPersona);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonaList.IndexOf(anObject: TPersona): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonaList.Includes(anObject: TPersona) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonaList.AddNew: TPersona;
begin
  result := TPersona(InternalAddNew);
end;

procedure TPersonaList.Insert(index: Integer; NewObject: TPersona);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonaList.GetBoldObject(index: Integer): TPersona;
begin
  result := TPersona(GetElement(index));
end;

procedure TPersonaList.SetBoldObject(index: Integer; NewObject: TPersona);
begin;
  SetElement(index, NewObject);
end;

{ TPrichina }

function TPrichina._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TPrichina', 'Naimenovanie', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPrichina._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TPrichina._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TPrichina._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TPrichina', 'Kommentarii', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TPrichina._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TPrichina._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TPrichina._Get_M_otnositsya_kstandartu: TBoldObjectReference;
begin
  assert(ValidateMember('TPrichina', 'otnositsya_kstandartu', 2, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[2]);
end;

function TPrichina._Getotnositsya_kstandartu: TStandartnaya_prichina;
begin
  assert(not assigned(M_otnositsya_kstandartu.BoldObject) or (M_otnositsya_kstandartu.BoldObject is TStandartnaya_prichina), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_kstandartu', M_otnositsya_kstandartu.BoldObject.ClassName, 'TStandartnaya_prichina']));
  Result := TStandartnaya_prichina(M_otnositsya_kstandartu.BoldObject);
end;

procedure TPrichina._Setotnositsya_kstandartu(const value: TStandartnaya_prichina);
begin
  M_otnositsya_kstandartu.BoldObject := value;
end;

function TPrichina._Get_M_yavl_konc_perehoda_iz: TBoldObjectReference;
begin
  assert(ValidateMember('TPrichina', 'yavl_konc_perehoda_iz', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TPrichina._Getyavl_konc_perehoda_iz: TSostoyanie_kontakta;
begin
  assert(not assigned(M_yavl_konc_perehoda_iz.BoldObject) or (M_yavl_konc_perehoda_iz.BoldObject is TSostoyanie_kontakta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavl_konc_perehoda_iz', M_yavl_konc_perehoda_iz.BoldObject.ClassName, 'TSostoyanie_kontakta']));
  Result := TSostoyanie_kontakta(M_yavl_konc_perehoda_iz.BoldObject);
end;

function TPrichina._Get_M_imeet_perehodnye: TBoldObjectReference;
begin
  assert(ValidateMember('TPrichina', 'imeet_perehodnye', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TPrichina._Getimeet_perehodnye: TSostoyanie_kontakta;
begin
  assert(not assigned(M_imeet_perehodnye.BoldObject) or (M_imeet_perehodnye.BoldObject is TSostoyanie_kontakta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_perehodnye', M_imeet_perehodnye.BoldObject.ClassName, 'TSostoyanie_kontakta']));
  Result := TSostoyanie_kontakta(M_imeet_perehodnye.BoldObject);
end;

procedure TPrichinaList.Add(NewObject: TPrichina);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPrichinaList.IndexOf(anObject: TPrichina): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPrichinaList.Includes(anObject: TPrichina) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPrichinaList.AddNew: TPrichina;
begin
  result := TPrichina(InternalAddNew);
end;

procedure TPrichinaList.Insert(index: Integer; NewObject: TPrichina);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPrichinaList.GetBoldObject(index: Integer): TPrichina;
begin
  result := TPrichina(GetElement(index));
end;

procedure TPrichinaList.SetBoldObject(index: Integer; NewObject: TPrichina);
begin;
  SetElement(index, NewObject);
end;

{ TPrichina_uslov }

function TPrichina_uslov._Get_M_formir_iz_stand_usl: TBoldObjectReference;
begin
  assert(ValidateMember('TPrichina_uslov', 'formir_iz_stand_usl', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TPrichina_uslov._Getformir_iz_stand_usl: TStandartnoe_uslovie;
begin
  assert(not assigned(M_formir_iz_stand_usl.BoldObject) or (M_formir_iz_stand_usl.BoldObject is TStandartnoe_uslovie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'formir_iz_stand_usl', M_formir_iz_stand_usl.BoldObject.ClassName, 'TStandartnoe_uslovie']));
  Result := TStandartnoe_uslovie(M_formir_iz_stand_usl.BoldObject);
end;

function TPrichina_uslov._Get_M_formir_stand_prich: TBoldObjectReference;
begin
  assert(ValidateMember('TPrichina_uslov', 'formir_stand_prich', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TPrichina_uslov._Getformir_stand_prich: TStandartnaya_prichina;
begin
  assert(not assigned(M_formir_stand_prich.BoldObject) or (M_formir_stand_prich.BoldObject is TStandartnaya_prichina), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'formir_stand_prich', M_formir_stand_prich.BoldObject.ClassName, 'TStandartnaya_prichina']));
  Result := TStandartnaya_prichina(M_formir_stand_prich.BoldObject);
end;

procedure TPrichina_uslovList.Add(NewObject: TPrichina_uslov);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPrichina_uslovList.IndexOf(anObject: TPrichina_uslov): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPrichina_uslovList.Includes(anObject: TPrichina_uslov) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPrichina_uslovList.AddNew: TPrichina_uslov;
begin
  result := TPrichina_uslov(InternalAddNew);
end;

procedure TPrichina_uslovList.Insert(index: Integer; NewObject: TPrichina_uslov);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPrichina_uslovList.GetBoldObject(index: Integer): TPrichina_uslov;
begin
  result := TPrichina_uslov(GetElement(index));
end;

procedure TPrichina_uslovList.SetBoldObject(index: Integer; NewObject: TPrichina_uslov);
begin;
  SetElement(index, NewObject);
end;

{ TProekt }

function TProekt._Get_M_Nomer_proekta: TBAString;
begin
  assert(ValidateMember('TProekt', 'Nomer_proekta', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TProekt._GetNomer_proekta: String;
begin
  Result := M_Nomer_proekta.AsString;
end;

procedure TProekt._SetNomer_proekta(const NewValue: String);
begin
  M_Nomer_proekta.AsString := NewValue;
end;

function TProekt._Get_M_Naimenovanie_proekta: TBAString;
begin
  assert(ValidateMember('TProekt', 'Naimenovanie_proekta', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TProekt._GetNaimenovanie_proekta: String;
begin
  Result := M_Naimenovanie_proekta.AsString;
end;

procedure TProekt._SetNaimenovanie_proekta(const NewValue: String);
begin
  M_Naimenovanie_proekta.AsString := NewValue;
end;

function TProekt._Get_M_Opisanie_proekta: TBAString;
begin
  assert(ValidateMember('TProekt', 'Opisanie_proekta', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TProekt._GetOpisanie_proekta: String;
begin
  Result := M_Opisanie_proekta.AsString;
end;

procedure TProekt._SetOpisanie_proekta(const NewValue: String);
begin
  M_Opisanie_proekta.AsString := NewValue;
end;

function TProekt._Getimeet_v_sostave_zadachi: TZadachaList;
begin
  assert(ValidateMember('TProekt', 'imeet_v_sostave_zadachi', 3, TZadachaList));
  Result := TZadachaList(BoldMembers[3]);
end;

function TProekt._Getproekt_sost_iz_dok: TDokumentList;
begin
  assert(ValidateMember('TProekt', 'proekt_sost_iz_dok', 4, TDokumentList));
  Result := TDokumentList(BoldMembers[4]);
end;

function TProekt._Getproekt_imeet_rezuljt: TEffektList;
begin
  assert(ValidateMember('TProekt', 'proekt_imeet_rezuljt', 5, TEffektList));
  Result := TEffektList(BoldMembers[5]);
end;

function TProekt._Getimeet_stoim_vhod_v: TDobavochnaya_stoimList;
begin
  assert(ValidateMember('TProekt', 'imeet_stoim_vhod_v', 6, TDobavochnaya_stoimList));
  Result := TDobavochnaya_stoimList(BoldMembers[6]);
end;

procedure TProektList.Add(NewObject: TProekt);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TProektList.IndexOf(anObject: TProekt): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TProektList.Includes(anObject: TProekt) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TProektList.AddNew: TProekt;
begin
  result := TProekt(InternalAddNew);
end;

procedure TProektList.Insert(index: Integer; NewObject: TProekt);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TProektList.GetBoldObject(index: Integer): TProekt;
begin
  result := TProekt(GetElement(index));
end;

procedure TProektList.SetBoldObject(index: Integer; NewObject: TProekt);
begin;
  SetElement(index, NewObject);
end;

{ TRazmeshenie_reklamy }

function TRazmeshenie_reklamy._Get_M_Data: TBADateTime;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Data', 0, TBADateTime));
  Result := TBADateTime(BoldMembers[0]);
end;

function TRazmeshenie_reklamy._GetData: TDateTime;
begin
  Result := M_Data.AsDateTime;
end;

procedure TRazmeshenie_reklamy._SetData(const NewValue: TDateTime);
begin
  M_Data.AsDateTime := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Fail_imya: TBAString;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Fail_imya', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TRazmeshenie_reklamy._GetFail_imya: String;
begin
  Result := M_Fail_imya.AsString;
end;

procedure TRazmeshenie_reklamy._SetFail_imya(const NewValue: String);
begin
  M_Fail_imya.AsString := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Stoimostj_po_plosh: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Stoimostj_po_plosh', 2, TBAFloat));
  Result := TBAFloat(BoldMembers[2]);
end;

function TRazmeshenie_reklamy._GetStoimostj_po_plosh: double;
begin
  Result := M_Stoimostj_po_plosh.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Isp_ustan_stoim: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Isp_ustan_stoim', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TRazmeshenie_reklamy._GetIsp_ustan_stoim: Boolean;
begin
  Result := M_Isp_ustan_stoim.AsBoolean;
end;

procedure TRazmeshenie_reklamy._SetIsp_ustan_stoim(const NewValue: Boolean);
begin
  M_Isp_ustan_stoim.AsBoolean := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Ustan_stoim: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Ustan_stoim', 4, TBAFloat));
  Result := TBAFloat(BoldMembers[4]);
end;

function TRazmeshenie_reklamy._GetUstan_stoim: double;
begin
  Result := M_Ustan_stoim.AsFloat;
end;

procedure TRazmeshenie_reklamy._SetUstan_stoim(const NewValue: double);
begin
  M_Ustan_stoim.AsFloat := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Vsego_stoim: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Vsego_stoim', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TRazmeshenie_reklamy._GetVsego_stoim: double;
begin
  Result := M_Vsego_stoim.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Proshlo: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Proshlo', 6, TBABoolean));
  Result := TBABoolean(BoldMembers[6]);
end;

function TRazmeshenie_reklamy._GetProshlo: Boolean;
begin
  Result := M_Proshlo.AsBoolean;
end;

procedure TRazmeshenie_reklamy._SetProshlo(const NewValue: Boolean);
begin
  M_Proshlo.AsBoolean := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Ploshadj: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Ploshadj', 7, TBAFloat));
  Result := TBAFloat(BoldMembers[7]);
end;

function TRazmeshenie_reklamy._GetPloshadj: double;
begin
  Result := M_Ploshadj.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Oboznach_strok: TBAString;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Oboznach_strok', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TRazmeshenie_reklamy._GetOboznach_strok: String;
begin
  Result := M_Oboznach_strok.AsString;
end;

procedure TRazmeshenie_reklamy._SetOboznach_strok(const NewValue: String);
begin
  M_Oboznach_strok.AsString := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Identifikator_risunka: TBAInteger;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Identifikator_risunka', 9, TBAInteger));
  Result := TBAInteger(BoldMembers[9]);
end;

function TRazmeshenie_reklamy._GetIdentifikator_risunka: Integer;
begin
  Result := M_Identifikator_risunka.AsInteger;
end;

procedure TRazmeshenie_reklamy._SetIdentifikator_risunka(const NewValue: Integer);
begin
  M_Identifikator_risunka.AsInteger := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Nomer_stranicy: TBAInteger;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Nomer_stranicy', 10, TBAInteger));
  Result := TBAInteger(BoldMembers[10]);
end;

function TRazmeshenie_reklamy._GetNomer_stranicy: Integer;
begin
  Result := M_Nomer_stranicy.AsInteger;
end;

procedure TRazmeshenie_reklamy._SetNomer_stranicy(const NewValue: Integer);
begin
  M_Nomer_stranicy.AsInteger := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Zakryt: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Zakryt', 11, TBABoolean));
  Result := TBABoolean(BoldMembers[11]);
end;

function TRazmeshenie_reklamy._GetZakryt: Boolean;
begin
  Result := M_Zakryt.AsBoolean;
end;

procedure TRazmeshenie_reklamy._SetZakryt(const NewValue: Boolean);
begin
  M_Zakryt.AsBoolean := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Opisanie: TBAString;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Opisanie', 12, TBAString));
  Result := TBAString(BoldMembers[12]);
end;

function TRazmeshenie_reklamy._GetOpisanie: String;
begin
  Result := M_Opisanie.AsString;
end;

procedure TRazmeshenie_reklamy._SetOpisanie(const NewValue: String);
begin
  M_Opisanie.AsString := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Kolichestvo_strok: TBAInteger;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Kolichestvo_strok', 13, TBAInteger));
  Result := TBAInteger(BoldMembers[13]);
end;

function TRazmeshenie_reklamy._GetKolichestvo_strok: Integer;
begin
  Result := M_Kolichestvo_strok.AsInteger;
end;

procedure TRazmeshenie_reklamy._SetKolichestvo_strok(const NewValue: Integer);
begin
  M_Kolichestvo_strok.AsInteger := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Bez_skidok: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Bez_skidok', 14, TBABoolean));
  Result := TBABoolean(BoldMembers[14]);
end;

function TRazmeshenie_reklamy._GetBez_skidok: Boolean;
begin
  Result := M_Bez_skidok.AsBoolean;
end;

procedure TRazmeshenie_reklamy._SetBez_skidok(const NewValue: Boolean);
begin
  M_Bez_skidok.AsBoolean := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Vysota: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Vysota', 15, TBAFloat));
  Result := TBAFloat(BoldMembers[15]);
end;

function TRazmeshenie_reklamy._GetVysota: double;
begin
  Result := M_Vysota.AsFloat;
end;

procedure TRazmeshenie_reklamy._SetVysota(const NewValue: double);
begin
  M_Vysota.AsFloat := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Shirina: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Shirina', 16, TBAFloat));
  Result := TBAFloat(BoldMembers[16]);
end;

function TRazmeshenie_reklamy._GetShirina: double;
begin
  Result := M_Shirina.AsFloat;
end;

procedure TRazmeshenie_reklamy._SetShirina(const NewValue: double);
begin
  M_Shirina.AsFloat := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Isp_stand_razmer: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Isp_stand_razmer', 17, TBABoolean));
  Result := TBABoolean(BoldMembers[17]);
end;

function TRazmeshenie_reklamy._GetIsp_stand_razmer: Boolean;
begin
  Result := M_Isp_stand_razmer.AsBoolean;
end;

procedure TRazmeshenie_reklamy._SetIsp_stand_razmer(const NewValue: Boolean);
begin
  M_Isp_stand_razmer.AsBoolean := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Bonus: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Bonus', 18, TBABoolean));
  Result := TBABoolean(BoldMembers[18]);
end;

function TRazmeshenie_reklamy._GetBonus: Boolean;
begin
  Result := M_Bonus.AsBoolean;
end;

function TRazmeshenie_reklamy._Get_M_Opt_dlya_dolgih: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Opt_dlya_dolgih', 19, TBABoolean));
  Result := TBABoolean(BoldMembers[19]);
end;

function TRazmeshenie_reklamy._GetOpt_dlya_dolgih: Boolean;
begin
  Result := M_Opt_dlya_dolgih.AsBoolean;
end;

function TRazmeshenie_reklamy._Get_M_Za_chisl_strok: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Za_chisl_strok', 20, TBABoolean));
  Result := TBABoolean(BoldMembers[20]);
end;

function TRazmeshenie_reklamy._GetZa_chisl_strok: Boolean;
begin
  Result := M_Za_chisl_strok.AsBoolean;
end;

function TRazmeshenie_reklamy._Get_M_Chislo_strok: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Chislo_strok', 21, TBAFloat));
  Result := TBAFloat(BoldMembers[21]);
end;

function TRazmeshenie_reklamy._GetChislo_strok: double;
begin
  Result := M_Chislo_strok.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Opt_procent: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Opt_procent', 22, TBAFloat));
  Result := TBAFloat(BoldMembers[22]);
end;

function TRazmeshenie_reklamy._GetOpt_procent: double;
begin
  Result := M_Opt_procent.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Bonus_vyhod: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Bonus_vyhod', 23, TBAFloat));
  Result := TBAFloat(BoldMembers[23]);
end;

function TRazmeshenie_reklamy._GetBonus_vyhod: double;
begin
  Result := M_Bonus_vyhod.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Stoim_stroki: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Stoim_stroki', 24, TBAFloat));
  Result := TBAFloat(BoldMembers[24]);
end;

function TRazmeshenie_reklamy._GetStoim_stroki: double;
begin
  Result := M_Stoim_stroki.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Vsego_stoim_po_vyh: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Vsego_stoim_po_vyh', 25, TBAFloat));
  Result := TBAFloat(BoldMembers[25]);
end;

function TRazmeshenie_reklamy._GetVsego_stoim_po_vyh: double;
begin
  Result := M_Vsego_stoim_po_vyh.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Vsego_dob_stoim: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Vsego_dob_stoim', 26, TBAFloat));
  Result := TBAFloat(BoldMembers[26]);
end;

function TRazmeshenie_reklamy._GetVsego_dob_stoim: double;
begin
  Result := M_Vsego_dob_stoim.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Vsego_dob_stoim_po_vyh: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Vsego_dob_stoim_po_vyh', 27, TBAFloat));
  Result := TBAFloat(BoldMembers[27]);
end;

function TRazmeshenie_reklamy._GetVsego_dob_stoim_po_vyh: double;
begin
  Result := M_Vsego_dob_stoim_po_vyh.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Obshaya_stoim: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Obshaya_stoim', 28, TBAFloat));
  Result := TBAFloat(BoldMembers[28]);
end;

function TRazmeshenie_reklamy._GetObshaya_stoim: double;
begin
  Result := M_Obshaya_stoim.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Nulevaya_stoim: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Nulevaya_stoim', 29, TBAFloat));
  Result := TBAFloat(BoldMembers[29]);
end;

function TRazmeshenie_reklamy._GetNulevaya_stoim: double;
begin
  Result := M_Nulevaya_stoim.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Razm_objyavl: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Razm_objyavl', 30, TBABoolean));
  Result := TBABoolean(BoldMembers[30]);
end;

function TRazmeshenie_reklamy._GetRazm_objyavl: Boolean;
begin
  Result := M_Razm_objyavl.AsBoolean;
end;

procedure TRazmeshenie_reklamy._SetRazm_objyavl(const NewValue: Boolean);
begin
  M_Razm_objyavl.AsBoolean := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Naimenovanie', 31, TBAString));
  Result := TBAString(BoldMembers[31]);
end;

function TRazmeshenie_reklamy._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TRazmeshenie_reklamy._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Kommentarii', 32, TBAString));
  Result := TBAString(BoldMembers[32]);
end;

function TRazmeshenie_reklamy._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TRazmeshenie_reklamy._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Razr_mnogitelj: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Razr_mnogitelj', 33, TBABoolean));
  Result := TBABoolean(BoldMembers[33]);
end;

function TRazmeshenie_reklamy._GetRazr_mnogitelj: Boolean;
begin
  Result := M_Razr_mnogitelj.AsBoolean;
end;

function TRazmeshenie_reklamy._Get_M_Mnogitelj: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Mnogitelj', 34, TBAFloat));
  Result := TBAFloat(BoldMembers[34]);
end;

function TRazmeshenie_reklamy._GetMnogitelj: double;
begin
  Result := M_Mnogitelj.AsFloat;
end;

procedure TRazmeshenie_reklamy._SetMnogitelj(const NewValue: double);
begin
  M_Mnogitelj.AsFloat := NewValue;
end;

function TRazmeshenie_reklamy._Get_M_Oplachen: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Oplachen', 35, TBABoolean));
  Result := TBABoolean(BoldMembers[35]);
end;

function TRazmeshenie_reklamy._GetOplachen: Boolean;
begin
  Result := M_Oplachen.AsBoolean;
end;

function TRazmeshenie_reklamy._Get_M_Ne_vystavlen: TBABoolean;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Ne_vystavlen', 36, TBABoolean));
  Result := TBABoolean(BoldMembers[36]);
end;

function TRazmeshenie_reklamy._GetNe_vystavlen: Boolean;
begin
  Result := M_Ne_vystavlen.AsBoolean;
end;

function TRazmeshenie_reklamy._Get_M_Oplacheno_itogo: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Oplacheno_itogo', 37, TBAFloat));
  Result := TBAFloat(BoldMembers[37]);
end;

function TRazmeshenie_reklamy._GetOplacheno_itogo: double;
begin
  Result := M_Oplacheno_itogo.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Dolg_itogo: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Dolg_itogo', 38, TBAFloat));
  Result := TBAFloat(BoldMembers[38]);
end;

function TRazmeshenie_reklamy._GetDolg_itogo: double;
begin
  Result := M_Dolg_itogo.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Nalich_dolg: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Nalich_dolg', 39, TBAFloat));
  Result := TBAFloat(BoldMembers[39]);
end;

function TRazmeshenie_reklamy._GetNalich_dolg: double;
begin
  Result := M_Nalich_dolg.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_Stoim_nal: TBAFloat;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Stoim_nal', 40, TBAFloat));
  Result := TBAFloat(BoldMembers[40]);
end;

function TRazmeshenie_reklamy._GetStoim_nal: double;
begin
  Result := M_Stoim_nal.AsFloat;
end;

function TRazmeshenie_reklamy._Get_M_razm_reklamu_v: TBoldObjectReference;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'razm_reklamu_v', 41, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[41]);
end;

function TRazmeshenie_reklamy._Getrazm_reklamu_v: TRazdel_izdaniya;
begin
  assert(not assigned(M_razm_reklamu_v.BoldObject) or (M_razm_reklamu_v.BoldObject is TRazdel_izdaniya), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'razm_reklamu_v', M_razm_reklamu_v.BoldObject.ClassName, 'TRazdel_izdaniya']));
  Result := TRazdel_izdaniya(M_razm_reklamu_v.BoldObject);
end;

procedure TRazmeshenie_reklamy._Setrazm_reklamu_v(const value: TRazdel_izdaniya);
begin
  M_razm_reklamu_v.BoldObject := value;
end;

function TRazmeshenie_reklamy._Get_M_imeet_razmery: TBoldObjectReference;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'imeet_razmery', 42, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[42]);
end;

function TRazmeshenie_reklamy._Getimeet_razmery: TRazmery;
begin
  assert(not assigned(M_imeet_razmery.BoldObject) or (M_imeet_razmery.BoldObject is TRazmery), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_razmery', M_imeet_razmery.BoldObject.ClassName, 'TRazmery']));
  Result := TRazmery(M_imeet_razmery.BoldObject);
end;

procedure TRazmeshenie_reklamy._Setimeet_razmery(const value: TRazmery);
begin
  M_imeet_razmery.BoldObject := value;
end;

function TRazmeshenie_reklamy._Get_M_imeet_stoim_kv_sm: TBoldObjectReference;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'imeet_stoim_kv_sm', 43, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[43]);
end;

function TRazmeshenie_reklamy._Getimeet_stoim_kv_sm: TStoimostj;
begin
  assert(not assigned(M_imeet_stoim_kv_sm.BoldObject) or (M_imeet_stoim_kv_sm.BoldObject is TStoimostj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_stoim_kv_sm', M_imeet_stoim_kv_sm.BoldObject.ClassName, 'TStoimostj']));
  Result := TStoimostj(M_imeet_stoim_kv_sm.BoldObject);
end;

procedure TRazmeshenie_reklamy._Setimeet_stoim_kv_sm(const value: TStoimostj);
begin
  M_imeet_stoim_kv_sm.BoldObject := value;
end;

function TRazmeshenie_reklamy._Get_M_razmesh_kak_sledstv: TBoldObjectReference;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'razmesh_kak_sledstv', 44, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[44]);
end;

function TRazmeshenie_reklamy._Getrazmesh_kak_sledstv: TKontakt;
begin
  assert(not assigned(M_razmesh_kak_sledstv.BoldObject) or (M_razmesh_kak_sledstv.BoldObject is TKontakt), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'razmesh_kak_sledstv', M_razmesh_kak_sledstv.BoldObject.ClassName, 'TKontakt']));
  Result := TKontakt(M_razmesh_kak_sledstv.BoldObject);
end;

procedure TRazmeshenie_reklamy._Setrazmesh_kak_sledstv(const value: TKontakt);
begin
  M_razmesh_kak_sledstv.BoldObject := value;
end;

function TRazmeshenie_reklamy._Getvyhodit_v_vypuskah: TVypusk_gazetyList;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'vyhodit_v_vypuskah', 45, TVypusk_gazetyList));
  Result := TVypusk_gazetyList(BoldMembers[45]);
end;

function TRazmeshenie_reklamy._GetVyhod: TVyhodList;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Vyhod', 46, TVyhodList));
  Result := TVyhodList(BoldMembers[46]);
end;

function TRazmeshenie_reklamy._Getimeet_oplaty: TOplataList;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'imeet_oplaty', 47, TOplataList));
  Result := TOplataList(BoldMembers[47]);
end;

function TRazmeshenie_reklamy._Get_M_imeet_tip_reklamy: TBoldObjectReference;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'imeet_tip_reklamy', 48, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[48]);
end;

function TRazmeshenie_reklamy._Getimeet_tip_reklamy: TTip_reklamy;
begin
  assert(not assigned(M_imeet_tip_reklamy.BoldObject) or (M_imeet_tip_reklamy.BoldObject is TTip_reklamy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_tip_reklamy', M_imeet_tip_reklamy.BoldObject.ClassName, 'TTip_reklamy']));
  Result := TTip_reklamy(M_imeet_tip_reklamy.BoldObject);
end;

procedure TRazmeshenie_reklamy._Setimeet_tip_reklamy(const value: TTip_reklamy);
begin
  M_imeet_tip_reklamy.BoldObject := value;
end;

function TRazmeshenie_reklamy._Get_M_yavl_reklamoi_dlya: TBoldObjectReference;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'yavl_reklamoi_dlya', 49, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[49]);
end;

function TRazmeshenie_reklamy._Getyavl_reklamoi_dlya: TKlient;
begin
  assert(not assigned(M_yavl_reklamoi_dlya.BoldObject) or (M_yavl_reklamoi_dlya.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavl_reklamoi_dlya', M_yavl_reklamoi_dlya.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_yavl_reklamoi_dlya.BoldObject);
end;

procedure TRazmeshenie_reklamy._Setyavl_reklamoi_dlya(const value: TKlient);
begin
  M_yavl_reklamoi_dlya.BoldObject := value;
end;

function TRazmeshenie_reklamy._Getimeet_skidki: TSkidkaList;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'imeet_skidki', 50, TSkidkaList));
  Result := TSkidkaList(BoldMembers[50]);
end;

function TRazmeshenie_reklamy._GetSootn_so_skidk: TSootn_so_skidkList;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'Sootn_so_skidk', 51, TSootn_so_skidkList));
  Result := TSootn_so_skidkList(BoldMembers[51]);
end;

function TRazmeshenie_reklamy._Getimeet_stoim_dop_rab: TDobavochnaya_stoimList;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'imeet_stoim_dop_rab', 52, TDobavochnaya_stoimList));
  Result := TDobavochnaya_stoimList(BoldMembers[52]);
end;

function TRazmeshenie_reklamy._Getimeet_scheta_oplaty: TPozic_schtaList;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'imeet_scheta_oplaty', 53, TPozic_schtaList));
  Result := TPozic_schtaList(BoldMembers[53]);
end;

function TRazmeshenie_reklamy._Get_M_vedyotsya_sotrudnikom: TBoldObjectReference;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'vedyotsya_sotrudnikom', 54, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[54]);
end;

function TRazmeshenie_reklamy._Getvedyotsya_sotrudnikom: TPersonal;
begin
  assert(not assigned(M_vedyotsya_sotrudnikom.BoldObject) or (M_vedyotsya_sotrudnikom.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vedyotsya_sotrudnikom', M_vedyotsya_sotrudnikom.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_vedyotsya_sotrudnikom.BoldObject);
end;

procedure TRazmeshenie_reklamy._Setvedyotsya_sotrudnikom(const value: TPersonal);
begin
  M_vedyotsya_sotrudnikom.BoldObject := value;
end;

function TRazmeshenie_reklamy._Getimeet_otnos_oplaty: TOplataList;
begin
  assert(ValidateMember('TRazmeshenie_reklamy', 'imeet_otnos_oplaty', 55, TOplataList));
  Result := TOplataList(BoldMembers[55]);
end;

procedure TRazmeshenie_reklamyList.Add(NewObject: TRazmeshenie_reklamy);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRazmeshenie_reklamyList.IndexOf(anObject: TRazmeshenie_reklamy): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRazmeshenie_reklamyList.Includes(anObject: TRazmeshenie_reklamy) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRazmeshenie_reklamyList.AddNew: TRazmeshenie_reklamy;
begin
  result := TRazmeshenie_reklamy(InternalAddNew);
end;

procedure TRazmeshenie_reklamyList.Insert(index: Integer; NewObject: TRazmeshenie_reklamy);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRazmeshenie_reklamyList.GetBoldObject(index: Integer): TRazmeshenie_reklamy;
begin
  result := TRazmeshenie_reklamy(GetElement(index));
end;

procedure TRazmeshenie_reklamyList.SetBoldObject(index: Integer; NewObject: TRazmeshenie_reklamy);
begin;
  SetElement(index, NewObject);
end;

{ TRazreshenie }

function TRazreshenie._Get_M_Razreshitj: TBABoolean;
begin
  assert(ValidateMember('TRazreshenie', 'Razreshitj', 0, TBABoolean));
  Result := TBABoolean(BoldMembers[0]);
end;

function TRazreshenie._GetRazreshitj: Boolean;
begin
  Result := M_Razreshitj.AsBoolean;
end;

procedure TRazreshenie._SetRazreshitj(const NewValue: Boolean);
begin
  M_Razreshitj.AsBoolean := NewValue;
end;

procedure TRazreshenieList.Add(NewObject: TRazreshenie);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRazreshenieList.IndexOf(anObject: TRazreshenie): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRazreshenieList.Includes(anObject: TRazreshenie) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRazreshenieList.AddNew: TRazreshenie;
begin
  result := TRazreshenie(InternalAddNew);
end;

procedure TRazreshenieList.Insert(index: Integer; NewObject: TRazreshenie);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRazreshenieList.GetBoldObject(index: Integer): TRazreshenie;
begin
  result := TRazreshenie(GetElement(index));
end;

procedure TRazreshenieList.SetBoldObject(index: Integer; NewObject: TRazreshenie);
begin;
  SetElement(index, NewObject);
end;

{ TReiting_klienta }

function TReiting_klienta._Get_M_Reiting: TBAInteger;
begin
  assert(ValidateMember('TReiting_klienta', 'Reiting', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TReiting_klienta._GetReiting: Integer;
begin
  Result := M_Reiting.AsInteger;
end;

procedure TReiting_klienta._SetReiting(const NewValue: Integer);
begin
  M_Reiting.AsInteger := NewValue;
end;

function TReiting_klienta._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TReiting_klienta', 'Naimenovanie', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TReiting_klienta._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TReiting_klienta._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TReiting_klienta._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TReiting_klienta', 'Kommentarii', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TReiting_klienta._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TReiting_klienta._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TReiting_klienta._Get_M_V_chyornom_spiske: TBABoolean;
begin
  assert(ValidateMember('TReiting_klienta', 'V_chyornom_spiske', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TReiting_klienta._GetV_chyornom_spiske: Boolean;
begin
  Result := M_V_chyornom_spiske.AsBoolean;
end;

procedure TReiting_klienta._SetV_chyornom_spiske(const NewValue: Boolean);
begin
  M_V_chyornom_spiske.AsBoolean := NewValue;
end;

function TReiting_klienta._Get_M_Somniteljnyi: TBABoolean;
begin
  assert(ValidateMember('TReiting_klienta', 'Somniteljnyi', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TReiting_klienta._GetSomniteljnyi: Boolean;
begin
  Result := M_Somniteljnyi.AsBoolean;
end;

procedure TReiting_klienta._SetSomniteljnyi(const NewValue: Boolean);
begin
  M_Somniteljnyi.AsBoolean := NewValue;
end;

function TReiting_klienta._Get_M_Vagnyi: TBABoolean;
begin
  assert(ValidateMember('TReiting_klienta', 'Vagnyi', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TReiting_klienta._GetVagnyi: Boolean;
begin
  Result := M_Vagnyi.AsBoolean;
end;

procedure TReiting_klienta._SetVagnyi(const NewValue: Boolean);
begin
  M_Vagnyi.AsBoolean := NewValue;
end;

function TReiting_klienta._Get_M_Privilegir: TBABoolean;
begin
  assert(ValidateMember('TReiting_klienta', 'Privilegir', 6, TBABoolean));
  Result := TBABoolean(BoldMembers[6]);
end;

function TReiting_klienta._GetPrivilegir: Boolean;
begin
  Result := M_Privilegir.AsBoolean;
end;

procedure TReiting_klienta._SetPrivilegir(const NewValue: Boolean);
begin
  M_Privilegir.AsBoolean := NewValue;
end;

function TReiting_klienta._Getharakteriz_klienta: TKlientList;
begin
  assert(ValidateMember('TReiting_klienta', 'harakteriz_klienta', 7, TKlientList));
  Result := TKlientList(BoldMembers[7]);
end;

procedure TReiting_klientaList.Add(NewObject: TReiting_klienta);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TReiting_klientaList.IndexOf(anObject: TReiting_klienta): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TReiting_klientaList.Includes(anObject: TReiting_klienta) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TReiting_klientaList.AddNew: TReiting_klienta;
begin
  result := TReiting_klienta(InternalAddNew);
end;

procedure TReiting_klientaList.Insert(index: Integer; NewObject: TReiting_klienta);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TReiting_klientaList.GetBoldObject(index: Integer): TReiting_klienta;
begin
  result := TReiting_klienta(GetElement(index));
end;

procedure TReiting_klientaList.SetBoldObject(index: Integer; NewObject: TReiting_klienta);
begin;
  SetElement(index, NewObject);
end;

{ TSootn_so_skidk }

function TSootn_so_skidk._Get_M_imeet_skidki: TBoldObjectReference;
begin
  assert(ValidateMember('TSootn_so_skidk', 'imeet_skidki', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TSootn_so_skidk._Getimeet_skidki: TSkidka;
begin
  assert(not assigned(M_imeet_skidki.BoldObject) or (M_imeet_skidki.BoldObject is TSkidka), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_skidki', M_imeet_skidki.BoldObject.ClassName, 'TSkidka']));
  Result := TSkidka(M_imeet_skidki.BoldObject);
end;

function TSootn_so_skidk._Get_M_formir_cenu_na: TBoldObjectReference;
begin
  assert(ValidateMember('TSootn_so_skidk', 'formir_cenu_na', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TSootn_so_skidk._Getformir_cenu_na: TRazmeshenie_reklamy;
begin
  assert(not assigned(M_formir_cenu_na.BoldObject) or (M_formir_cenu_na.BoldObject is TRazmeshenie_reklamy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'formir_cenu_na', M_formir_cenu_na.BoldObject.ClassName, 'TRazmeshenie_reklamy']));
  Result := TRazmeshenie_reklamy(M_formir_cenu_na.BoldObject);
end;

procedure TSootn_so_skidkList.Add(NewObject: TSootn_so_skidk);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSootn_so_skidkList.IndexOf(anObject: TSootn_so_skidk): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSootn_so_skidkList.Includes(anObject: TSootn_so_skidk) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSootn_so_skidkList.AddNew: TSootn_so_skidk;
begin
  result := TSootn_so_skidk(InternalAddNew);
end;

procedure TSootn_so_skidkList.Insert(index: Integer; NewObject: TSootn_so_skidk);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSootn_so_skidkList.GetBoldObject(index: Integer): TSootn_so_skidk;
begin
  result := TSootn_so_skidk(GetElement(index));
end;

procedure TSootn_so_skidkList.SetBoldObject(index: Integer; NewObject: TSootn_so_skidk);
begin;
  SetElement(index, NewObject);
end;

{ TSootn_tipa_so_skidk }

function TSootn_tipa_so_skidk._Get_M_tip_rekl_imeet_skidki: TBoldObjectReference;
begin
  assert(ValidateMember('TSootn_tipa_so_skidk', 'tip_rekl_imeet_skidki', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TSootn_tipa_so_skidk._Gettip_rekl_imeet_skidki: TSkidka;
begin
  assert(not assigned(M_tip_rekl_imeet_skidki.BoldObject) or (M_tip_rekl_imeet_skidki.BoldObject is TSkidka), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'tip_rekl_imeet_skidki', M_tip_rekl_imeet_skidki.BoldObject.ClassName, 'TSkidka']));
  Result := TSkidka(M_tip_rekl_imeet_skidki.BoldObject);
end;

function TSootn_tipa_so_skidk._Get_M_harakt_skidk_tip_rekl: TBoldObjectReference;
begin
  assert(ValidateMember('TSootn_tipa_so_skidk', 'harakt_skidk_tip_rekl', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TSootn_tipa_so_skidk._Getharakt_skidk_tip_rekl: TTip_reklamy;
begin
  assert(not assigned(M_harakt_skidk_tip_rekl.BoldObject) or (M_harakt_skidk_tip_rekl.BoldObject is TTip_reklamy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'harakt_skidk_tip_rekl', M_harakt_skidk_tip_rekl.BoldObject.ClassName, 'TTip_reklamy']));
  Result := TTip_reklamy(M_harakt_skidk_tip_rekl.BoldObject);
end;

procedure TSootn_tipa_so_skidkList.Add(NewObject: TSootn_tipa_so_skidk);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSootn_tipa_so_skidkList.IndexOf(anObject: TSootn_tipa_so_skidk): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSootn_tipa_so_skidkList.Includes(anObject: TSootn_tipa_so_skidk) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSootn_tipa_so_skidkList.AddNew: TSootn_tipa_so_skidk;
begin
  result := TSootn_tipa_so_skidk(InternalAddNew);
end;

procedure TSootn_tipa_so_skidkList.Insert(index: Integer; NewObject: TSootn_tipa_so_skidk);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSootn_tipa_so_skidkList.GetBoldObject(index: Integer): TSootn_tipa_so_skidk;
begin
  result := TSootn_tipa_so_skidk(GetElement(index));
end;

procedure TSootn_tipa_so_skidkList.SetBoldObject(index: Integer; NewObject: TSootn_tipa_so_skidk);
begin;
  SetElement(index, NewObject);
end;

{ TSostoyanie_kontakta }

function TSostoyanie_kontakta._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'Naimenovanie', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TSostoyanie_kontakta._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TSostoyanie_kontakta._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TSostoyanie_kontakta._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'Kommentarii', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TSostoyanie_kontakta._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TSostoyanie_kontakta._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TSostoyanie_kontakta._Getopis_sost_kontakta: TKontaktList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'opis_sost_kontakta', 2, TKontaktList));
  Result := TKontaktList(BoldMembers[2]);
end;

function TSostoyanie_kontakta._Getpromatriv_pers: TPersonalList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'promatriv_pers', 3, TPersonalList));
  Result := TPersonalList(BoldMembers[3]);
end;

function TSostoyanie_kontakta._GetRazreshenie_prosmatrivatj: TRazreshenie_prosmatrivatjList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'Razreshenie_prosmatrivatj', 4, TRazreshenie_prosmatrivatjList));
  Result := TRazreshenie_prosmatrivatjList(BoldMembers[4]);
end;

function TSostoyanie_kontakta._Getustanavlivaetsya: TPersonalList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'ustanavlivaetsya', 5, TPersonalList));
  Result := TPersonalList(BoldMembers[5]);
end;

function TSostoyanie_kontakta._GetRazreshenie_ustanavl: TRazreshenie_ustanavlList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'Razreshenie_ustanavl', 6, TRazreshenie_ustanavlList));
  Result := TRazreshenie_ustanavlList(BoldMembers[6]);
end;

function TSostoyanie_kontakta._Getizmenyaetsya: TPersonalList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'izmenyaetsya', 7, TPersonalList));
  Result := TPersonalList(BoldMembers[7]);
end;

function TSostoyanie_kontakta._GetRazreshenie_vyhoditj: TRazreshenie_vyhoditjList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'Razreshenie_vyhoditj', 8, TRazreshenie_vyhoditjList));
  Result := TRazreshenie_vyhoditjList(BoldMembers[8]);
end;

function TSostoyanie_kontakta._Getimeet_perehodnye: TSostoyanie_kontaktaList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'imeet_perehodnye', 9, TSostoyanie_kontaktaList));
  Result := TSostoyanie_kontaktaList(BoldMembers[9]);
end;

function TSostoyanie_kontakta._Getimeet_perehodnyePrichina: TPrichinaList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'imeet_perehodnyePrichina', 10, TPrichinaList));
  Result := TPrichinaList(BoldMembers[10]);
end;

function TSostoyanie_kontakta._Getyavl_konc_perehoda_iz: TSostoyanie_kontaktaList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'yavl_konc_perehoda_iz', 11, TSostoyanie_kontaktaList));
  Result := TSostoyanie_kontaktaList(BoldMembers[11]);
end;

function TSostoyanie_kontakta._Getyavl_konc_perehoda_izPrichina: TPrichinaList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'yavl_konc_perehoda_izPrichina', 12, TPrichinaList));
  Result := TPrichinaList(BoldMembers[12]);
end;

function TSostoyanie_kontakta._Getotnositsya_k_tipu_kontakt: TTip_kontaktaList;
begin
  assert(ValidateMember('TSostoyanie_kontakta', 'otnositsya_k_tipu_kontakt', 13, TTip_kontaktaList));
  Result := TTip_kontaktaList(BoldMembers[13]);
end;

procedure TSostoyanie_kontaktaList.Add(NewObject: TSostoyanie_kontakta);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSostoyanie_kontaktaList.IndexOf(anObject: TSostoyanie_kontakta): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSostoyanie_kontaktaList.Includes(anObject: TSostoyanie_kontakta) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSostoyanie_kontaktaList.AddNew: TSostoyanie_kontakta;
begin
  result := TSostoyanie_kontakta(InternalAddNew);
end;

procedure TSostoyanie_kontaktaList.Insert(index: Integer; NewObject: TSostoyanie_kontakta);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSostoyanie_kontaktaList.GetBoldObject(index: Integer): TSostoyanie_kontakta;
begin
  result := TSostoyanie_kontakta(GetElement(index));
end;

procedure TSostoyanie_kontaktaList.SetBoldObject(index: Integer; NewObject: TSostoyanie_kontakta);
begin;
  SetElement(index, NewObject);
end;

{ TSpravochnik }

function TSpravochnik._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TSpravochnik', 'Naimenovanie', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TSpravochnik._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TSpravochnik._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TSpravochnik._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TSpravochnik', 'Kommentarii', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TSpravochnik._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TSpravochnik._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TSpravochnik._Get_M_Ustarevshaya: TBABoolean;
begin
  assert(ValidateMember('TSpravochnik', 'Ustarevshaya', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TSpravochnik._GetUstarevshaya: Boolean;
begin
  Result := M_Ustarevshaya.AsBoolean;
end;

procedure TSpravochnik._SetUstarevshaya(const NewValue: Boolean);
begin
  M_Ustarevshaya.AsBoolean := NewValue;
end;

procedure TSpravochnikList.Add(NewObject: TSpravochnik);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSpravochnikList.IndexOf(anObject: TSpravochnik): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSpravochnikList.Includes(anObject: TSpravochnik) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSpravochnikList.AddNew: TSpravochnik;
begin
  result := TSpravochnik(InternalAddNew);
end;

procedure TSpravochnikList.Insert(index: Integer; NewObject: TSpravochnik);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSpravochnikList.GetBoldObject(index: Integer): TSpravochnik;
begin
  result := TSpravochnik(GetElement(index));
end;

procedure TSpravochnikList.SetBoldObject(index: Integer; NewObject: TSpravochnik);
begin;
  SetElement(index, NewObject);
end;

{ TSchyot }

function TSchyot._Get_M_Opisanie: TBAString;
begin
  assert(ValidateMember('TSchyot', 'Opisanie', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TSchyot._GetOpisanie: String;
begin
  Result := M_Opisanie.AsString;
end;

procedure TSchyot._SetOpisanie(const NewValue: String);
begin
  M_Opisanie.AsString := NewValue;
end;

function TSchyot._Get_M_Nomer_schyota: TBAInteger;
begin
  assert(ValidateMember('TSchyot', 'Nomer_schyota', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TSchyot._GetNomer_schyota: Integer;
begin
  Result := M_Nomer_schyota.AsInteger;
end;

procedure TSchyot._SetNomer_schyota(const NewValue: Integer);
begin
  M_Nomer_schyota.AsInteger := NewValue;
end;

function TSchyot._Get_M_Summa: TBAFloat;
begin
  assert(ValidateMember('TSchyot', 'Summa', 2, TBAFloat));
  Result := TBAFloat(BoldMembers[2]);
end;

function TSchyot._GetSumma: double;
begin
  Result := M_Summa.AsFloat;
end;

function TSchyot._Get_M_Vystavlen: TBABoolean;
begin
  assert(ValidateMember('TSchyot', 'Vystavlen', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TSchyot._GetVystavlen: Boolean;
begin
  Result := M_Vystavlen.AsBoolean;
end;

procedure TSchyot._SetVystavlen(const NewValue: Boolean);
begin
  M_Vystavlen.AsBoolean := NewValue;
end;

function TSchyot._Get_M_Oplachen: TBABoolean;
begin
  assert(ValidateMember('TSchyot', 'Oplachen', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TSchyot._GetOplachen: Boolean;
begin
  Result := M_Oplachen.AsBoolean;
end;

procedure TSchyot._SetOplachen(const NewValue: Boolean);
begin
  M_Oplachen.AsBoolean := NewValue;
end;

function TSchyot._Get_M_Primechanie: TBAString;
begin
  assert(ValidateMember('TSchyot', 'Primechanie', 5, TBAString));
  Result := TBAString(BoldMembers[5]);
end;

function TSchyot._GetPrimechanie: String;
begin
  Result := M_Primechanie.AsString;
end;

procedure TSchyot._SetPrimechanie(const NewValue: String);
begin
  M_Primechanie.AsString := NewValue;
end;

function TSchyot._Get_M_Opl_po_prih_ord: TBABoolean;
begin
  assert(ValidateMember('TSchyot', 'Opl_po_prih_ord', 6, TBABoolean));
  Result := TBABoolean(BoldMembers[6]);
end;

function TSchyot._GetOpl_po_prih_ord: Boolean;
begin
  Result := M_Opl_po_prih_ord.AsBoolean;
end;

procedure TSchyot._SetOpl_po_prih_ord(const NewValue: Boolean);
begin
  M_Opl_po_prih_ord.AsBoolean := NewValue;
end;

function TSchyot._Get_M_Oplach_po_summe: TBABoolean;
begin
  assert(ValidateMember('TSchyot', 'Oplach_po_summe', 7, TBABoolean));
  Result := TBABoolean(BoldMembers[7]);
end;

function TSchyot._GetOplach_po_summe: Boolean;
begin
  Result := M_Oplach_po_summe.AsBoolean;
end;

function TSchyot._Get_M_Onulirovan: TBABoolean;
begin
  assert(ValidateMember('TSchyot', 'Onulirovan', 8, TBABoolean));
  Result := TBABoolean(BoldMembers[8]);
end;

function TSchyot._GetOnulirovan: Boolean;
begin
  Result := M_Onulirovan.AsBoolean;
end;

procedure TSchyot._SetOnulirovan(const NewValue: Boolean);
begin
  M_Onulirovan.AsBoolean := NewValue;
end;

function TSchyot._Get_M_Data: TBADateTime;
begin
  assert(ValidateMember('TSchyot', 'Data', 9, TBADateTime));
  Result := TBADateTime(BoldMembers[9]);
end;

function TSchyot._GetData: TDateTime;
begin
  Result := M_Data.AsDateTime;
end;

procedure TSchyot._SetData(const NewValue: TDateTime);
begin
  M_Data.AsDateTime := NewValue;
end;

function TSchyot._Getvklyuchaet_oplatu: TOplataList;
begin
  assert(ValidateMember('TSchyot', 'vklyuchaet_oplatu', 10, TOplataList));
  Result := TOplataList(BoldMembers[10]);
end;

function TSchyot._Get_M_imeet_pozic_opl_reklamy: TBoldObjectReference;
begin
  assert(ValidateMember('TSchyot', 'imeet_pozic_opl_reklamy', 11, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[11]);
end;

function TSchyot._Getimeet_pozic_opl_reklamy: TKlient;
begin
  assert(not assigned(M_imeet_pozic_opl_reklamy.BoldObject) or (M_imeet_pozic_opl_reklamy.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_pozic_opl_reklamy', M_imeet_pozic_opl_reklamy.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_imeet_pozic_opl_reklamy.BoldObject);
end;

procedure TSchyot._Setimeet_pozic_opl_reklamy(const value: TKlient);
begin
  M_imeet_pozic_opl_reklamy.BoldObject := value;
end;

function TSchyot._Getsostoit_iz_pozicii: TPozic_schtaList;
begin
  assert(ValidateMember('TSchyot', 'sostoit_iz_pozicii', 12, TPozic_schtaList));
  Result := TPozic_schtaList(BoldMembers[12]);
end;

procedure TSchyotList.Add(NewObject: TSchyot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSchyotList.IndexOf(anObject: TSchyot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSchyotList.Includes(anObject: TSchyot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSchyotList.AddNew: TSchyot;
begin
  result := TSchyot(InternalAddNew);
end;

procedure TSchyotList.Insert(index: Integer; NewObject: TSchyot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSchyotList.GetBoldObject(index: Integer): TSchyot;
begin
  result := TSchyot(GetElement(index));
end;

procedure TSchyotList.SetBoldObject(index: Integer; NewObject: TSchyot);
begin;
  SetElement(index, NewObject);
end;

{ TEffekt }

function TEffekt._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TEffekt', 'Naimenovanie', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TEffekt._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TEffekt._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TEffekt._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TEffekt', 'Kommentarii', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TEffekt._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TEffekt._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TEffekt._Get_M_Nesyot_proekt: TBABoolean;
begin
  assert(ValidateMember('TEffekt', 'Nesyot_proekt', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TEffekt._GetNesyot_proekt: Boolean;
begin
  Result := M_Nesyot_proekt.AsBoolean;
end;

procedure TEffekt._SetNesyot_proekt(const NewValue: Boolean);
begin
  M_Nesyot_proekt.AsBoolean := NewValue;
end;

function TEffekt._Get_M_Nesyot_dokument: TBABoolean;
begin
  assert(ValidateMember('TEffekt', 'Nesyot_dokument', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TEffekt._GetNesyot_dokument: Boolean;
begin
  Result := M_Nesyot_dokument.AsBoolean;
end;

procedure TEffekt._SetNesyot_dokument(const NewValue: Boolean);
begin
  M_Nesyot_dokument.AsBoolean := NewValue;
end;

function TEffekt._Getsledstvie_kontakta: TKontaktList;
begin
  assert(ValidateMember('TEffekt', 'sledstvie_kontakta', 4, TKontaktList));
  Result := TKontaktList(BoldMembers[4]);
end;

function TEffekt._Get_M_otnositsya_po_tipu: TBoldObjectReference;
begin
  assert(ValidateMember('TEffekt', 'otnositsya_po_tipu', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TEffekt._Getotnositsya_po_tipu: TStandartnyi_effekt;
begin
  assert(not assigned(M_otnositsya_po_tipu.BoldObject) or (M_otnositsya_po_tipu.BoldObject is TStandartnyi_effekt), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_po_tipu', M_otnositsya_po_tipu.BoldObject.ClassName, 'TStandartnyi_effekt']));
  Result := TStandartnyi_effekt(M_otnositsya_po_tipu.BoldObject);
end;

procedure TEffekt._Setotnositsya_po_tipu(const value: TStandartnyi_effekt);
begin
  M_otnositsya_po_tipu.BoldObject := value;
end;

function TEffekt._Get_M_opis_effekt_ot_proekta: TBoldObjectReference;
begin
  assert(ValidateMember('TEffekt', 'opis_effekt_ot_proekta', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TEffekt._Getopis_effekt_ot_proekta: TProekt;
begin
  assert(not assigned(M_opis_effekt_ot_proekta.BoldObject) or (M_opis_effekt_ot_proekta.BoldObject is TProekt), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'opis_effekt_ot_proekta', M_opis_effekt_ot_proekta.BoldObject.ClassName, 'TProekt']));
  Result := TProekt(M_opis_effekt_ot_proekta.BoldObject);
end;

procedure TEffekt._Setopis_effekt_ot_proekta(const value: TProekt);
begin
  M_opis_effekt_ot_proekta.BoldObject := value;
end;

function TEffekt._Get_M_opis_effekt_ot_zadach: TBoldObjectReference;
begin
  assert(ValidateMember('TEffekt', 'opis_effekt_ot_zadach', 7, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[7]);
end;

function TEffekt._Getopis_effekt_ot_zadach: TZadacha;
begin
  assert(not assigned(M_opis_effekt_ot_zadach.BoldObject) or (M_opis_effekt_ot_zadach.BoldObject is TZadacha), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'opis_effekt_ot_zadach', M_opis_effekt_ot_zadach.BoldObject.ClassName, 'TZadacha']));
  Result := TZadacha(M_opis_effekt_ot_zadach.BoldObject);
end;

procedure TEffekt._Setopis_effekt_ot_zadach(const value: TZadacha);
begin
  M_opis_effekt_ot_zadach.BoldObject := value;
end;

procedure TEffektList.Add(NewObject: TEffekt);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TEffektList.IndexOf(anObject: TEffekt): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TEffektList.Includes(anObject: TEffekt) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TEffektList.AddNew: TEffekt;
begin
  result := TEffekt(InternalAddNew);
end;

procedure TEffektList.Insert(index: Integer; NewObject: TEffekt);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TEffektList.GetBoldObject(index: Integer): TEffekt;
begin
  result := TEffekt(GetElement(index));
end;

procedure TEffektList.SetBoldObject(index: Integer; NewObject: TEffekt);
begin;
  SetElement(index, NewObject);
end;

{ TOrganizaciya }

function TOrganizaciya._Get_M_Strana: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Strana', 13, TBAString));
  Result := TBAString(BoldMembers[13]);
end;

function TOrganizaciya._GetStrana: String;
begin
  Result := M_Strana.AsString;
end;

procedure TOrganizaciya._SetStrana(const NewValue: String);
begin
  M_Strana.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Oblastj: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Oblastj', 14, TBAString));
  Result := TBAString(BoldMembers[14]);
end;

function TOrganizaciya._GetOblastj: String;
begin
  Result := M_Oblastj.AsString;
end;

procedure TOrganizaciya._SetOblastj(const NewValue: String);
begin
  M_Oblastj.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Gorod: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Gorod', 15, TBAString));
  Result := TBAString(BoldMembers[15]);
end;

function TOrganizaciya._GetGorod: String;
begin
  Result := M_Gorod.AsString;
end;

procedure TOrganizaciya._SetGorod(const NewValue: String);
begin
  M_Gorod.AsString := NewValue;
end;

function TOrganizaciya._Get_M_BIK: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'BIK', 16, TBAString));
  Result := TBAString(BoldMembers[16]);
end;

function TOrganizaciya._GetBIK: String;
begin
  Result := M_BIK.AsString;
end;

procedure TOrganizaciya._SetBIK(const NewValue: String);
begin
  M_BIK.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Naimenovanie', 17, TBAString));
  Result := TBAString(BoldMembers[17]);
end;

function TOrganizaciya._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TOrganizaciya._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TOrganizaciya._Get_M_YavlyaetsyaVlad: TBABoolean;
begin
  assert(ValidateMember('TOrganizaciya', 'YavlyaetsyaVlad', 18, TBABoolean));
  Result := TBABoolean(BoldMembers[18]);
end;

function TOrganizaciya._GetYavlyaetsyaVlad: Boolean;
begin
  Result := M_YavlyaetsyaVlad.AsBoolean;
end;

procedure TOrganizaciya._SetYavlyaetsyaVlad(const NewValue: Boolean);
begin
  M_YavlyaetsyaVlad.AsBoolean := NewValue;
end;

function TOrganizaciya._Get_M_Rukovoditelj: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Rukovoditelj', 19, TBAString));
  Result := TBAString(BoldMembers[19]);
end;

function TOrganizaciya._GetRukovoditelj: String;
begin
  Result := M_Rukovoditelj.AsString;
end;

procedure TOrganizaciya._SetRukovoditelj(const NewValue: String);
begin
  M_Rukovoditelj.AsString := NewValue;
end;

function TOrganizaciya._Get_M_GlBuhgalter: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'GlBuhgalter', 20, TBAString));
  Result := TBAString(BoldMembers[20]);
end;

function TOrganizaciya._GetGlBuhgalter: String;
begin
  Result := M_GlBuhgalter.AsString;
end;

procedure TOrganizaciya._SetGlBuhgalter(const NewValue: String);
begin
  M_GlBuhgalter.AsString := NewValue;
end;

function TOrganizaciya._Get_M_INN: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'INN', 21, TBAString));
  Result := TBAString(BoldMembers[21]);
end;

function TOrganizaciya._GetINN: String;
begin
  Result := M_INN.AsString;
end;

procedure TOrganizaciya._SetINN(const NewValue: String);
begin
  M_INN.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Rasch__schet: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Rasch__schet', 22, TBAString));
  Result := TBAString(BoldMembers[22]);
end;

function TOrganizaciya._GetRasch__schet: String;
begin
  Result := M_Rasch__schet.AsString;
end;

procedure TOrganizaciya._SetRasch__schet(const NewValue: String);
begin
  M_Rasch__schet.AsString := NewValue;
end;

function TOrganizaciya._Get_M_KPP: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'KPP', 23, TBAString));
  Result := TBAString(BoldMembers[23]);
end;

function TOrganizaciya._GetKPP: String;
begin
  Result := M_KPP.AsString;
end;

procedure TOrganizaciya._SetKPP(const NewValue: String);
begin
  M_KPP.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Tip_organizacii: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Tip_organizacii', 24, TBAString));
  Result := TBAString(BoldMembers[24]);
end;

function TOrganizaciya._GetTip_organizacii: String;
begin
  Result := M_Tip_organizacii.AsString;
end;

procedure TOrganizaciya._SetTip_organizacii(const NewValue: String);
begin
  M_Tip_organizacii.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Kor_schet: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Kor_schet', 25, TBAString));
  Result := TBAString(BoldMembers[25]);
end;

function TOrganizaciya._GetKor_schet: String;
begin
  Result := M_Kor_schet.AsString;
end;

procedure TOrganizaciya._SetKor_schet(const NewValue: String);
begin
  M_Kor_schet.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Naim__banka: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Naim__banka', 26, TBAString));
  Result := TBAString(BoldMembers[26]);
end;

function TOrganizaciya._GetNaim__banka: String;
begin
  Result := M_Naim__banka.AsString;
end;

procedure TOrganizaciya._SetNaim__banka(const NewValue: String);
begin
  M_Naim__banka.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Telefon_buhgaltera: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Telefon_buhgaltera', 27, TBAString));
  Result := TBAString(BoldMembers[27]);
end;

function TOrganizaciya._GetTelefon_buhgaltera: String;
begin
  Result := M_Telefon_buhgaltera.AsString;
end;

procedure TOrganizaciya._SetTelefon_buhgaltera(const NewValue: String);
begin
  M_Telefon_buhgaltera.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Telefon_rukovoditelya: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Telefon_rukovoditelya', 28, TBAString));
  Result := TBAString(BoldMembers[28]);
end;

function TOrganizaciya._GetTelefon_rukovoditelya: String;
begin
  Result := M_Telefon_rukovoditelya.AsString;
end;

procedure TOrganizaciya._SetTelefon_rukovoditelya(const NewValue: String);
begin
  M_Telefon_rukovoditelya.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Telef_menedgera: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Telef_menedgera', 29, TBAString));
  Result := TBAString(BoldMembers[29]);
end;

function TOrganizaciya._GetTelef_menedgera: String;
begin
  Result := M_Telef_menedgera.AsString;
end;

procedure TOrganizaciya._SetTelef_menedgera(const NewValue: String);
begin
  M_Telef_menedgera.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Tip_sobstvennosti: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Tip_sobstvennosti', 30, TBAString));
  Result := TBAString(BoldMembers[30]);
end;

function TOrganizaciya._GetTip_sobstvennosti: String;
begin
  Result := M_Tip_sobstvennosti.AsString;
end;

procedure TOrganizaciya._SetTip_sobstvennosti(const NewValue: String);
begin
  M_Tip_sobstvennosti.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Adres_saita: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Adres_saita', 31, TBAString));
  Result := TBAString(BoldMembers[31]);
end;

function TOrganizaciya._GetAdres_saita: String;
begin
  Result := M_Adres_saita.AsString;
end;

procedure TOrganizaciya._SetAdres_saita(const NewValue: String);
begin
  M_Adres_saita.AsString := NewValue;
end;

procedure TOrganizaciyaList.Add(NewObject: TOrganizaciya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOrganizaciyaList.IndexOf(anObject: TOrganizaciya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOrganizaciyaList.Includes(anObject: TOrganizaciya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOrganizaciyaList.AddNew: TOrganizaciya;
begin
  result := TOrganizaciya(InternalAddNew);
end;

procedure TOrganizaciyaList.Insert(index: Integer; NewObject: TOrganizaciya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOrganizaciyaList.GetBoldObject(index: Integer): TOrganizaciya;
begin
  result := TOrganizaciya(GetElement(index));
end;

procedure TOrganizaciyaList.SetBoldObject(index: Integer; NewObject: TOrganizaciya);
begin;
  SetElement(index, NewObject);
end;

{ TRazreshenie_vyhoditj }

function TRazreshenie_vyhoditj._Get_M_izmenyaetsya: TBoldObjectReference;
begin
  assert(ValidateMember('TRazreshenie_vyhoditj', 'izmenyaetsya', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TRazreshenie_vyhoditj._Getizmenyaetsya: TPersonal;
begin
  assert(not assigned(M_izmenyaetsya.BoldObject) or (M_izmenyaetsya.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'izmenyaetsya', M_izmenyaetsya.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_izmenyaetsya.BoldObject);
end;

function TRazreshenie_vyhoditj._Get_M_imeet_pravo_izmenyatj: TBoldObjectReference;
begin
  assert(ValidateMember('TRazreshenie_vyhoditj', 'imeet_pravo_izmenyatj', 2, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[2]);
end;

function TRazreshenie_vyhoditj._Getimeet_pravo_izmenyatj: TSostoyanie_kontakta;
begin
  assert(not assigned(M_imeet_pravo_izmenyatj.BoldObject) or (M_imeet_pravo_izmenyatj.BoldObject is TSostoyanie_kontakta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_pravo_izmenyatj', M_imeet_pravo_izmenyatj.BoldObject.ClassName, 'TSostoyanie_kontakta']));
  Result := TSostoyanie_kontakta(M_imeet_pravo_izmenyatj.BoldObject);
end;

procedure TRazreshenie_vyhoditjList.Add(NewObject: TRazreshenie_vyhoditj);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRazreshenie_vyhoditjList.IndexOf(anObject: TRazreshenie_vyhoditj): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRazreshenie_vyhoditjList.Includes(anObject: TRazreshenie_vyhoditj) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRazreshenie_vyhoditjList.AddNew: TRazreshenie_vyhoditj;
begin
  result := TRazreshenie_vyhoditj(InternalAddNew);
end;

procedure TRazreshenie_vyhoditjList.Insert(index: Integer; NewObject: TRazreshenie_vyhoditj);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRazreshenie_vyhoditjList.GetBoldObject(index: Integer): TRazreshenie_vyhoditj;
begin
  result := TRazreshenie_vyhoditj(GetElement(index));
end;

procedure TRazreshenie_vyhoditjList.SetBoldObject(index: Integer; NewObject: TRazreshenie_vyhoditj);
begin;
  SetElement(index, NewObject);
end;

{ TRazreshenie_prosmatrivatj }

function TRazreshenie_prosmatrivatj._Get_M_promatriv_pers: TBoldObjectReference;
begin
  assert(ValidateMember('TRazreshenie_prosmatrivatj', 'promatriv_pers', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TRazreshenie_prosmatrivatj._Getpromatriv_pers: TPersonal;
begin
  assert(not assigned(M_promatriv_pers.BoldObject) or (M_promatriv_pers.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'promatriv_pers', M_promatriv_pers.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_promatriv_pers.BoldObject);
end;

function TRazreshenie_prosmatrivatj._Get_M_mog_prosmatrivatj: TBoldObjectReference;
begin
  assert(ValidateMember('TRazreshenie_prosmatrivatj', 'mog_prosmatrivatj', 2, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[2]);
end;

function TRazreshenie_prosmatrivatj._Getmog_prosmatrivatj: TSostoyanie_kontakta;
begin
  assert(not assigned(M_mog_prosmatrivatj.BoldObject) or (M_mog_prosmatrivatj.BoldObject is TSostoyanie_kontakta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'mog_prosmatrivatj', M_mog_prosmatrivatj.BoldObject.ClassName, 'TSostoyanie_kontakta']));
  Result := TSostoyanie_kontakta(M_mog_prosmatrivatj.BoldObject);
end;

procedure TRazreshenie_prosmatrivatjList.Add(NewObject: TRazreshenie_prosmatrivatj);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRazreshenie_prosmatrivatjList.IndexOf(anObject: TRazreshenie_prosmatrivatj): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRazreshenie_prosmatrivatjList.Includes(anObject: TRazreshenie_prosmatrivatj) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRazreshenie_prosmatrivatjList.AddNew: TRazreshenie_prosmatrivatj;
begin
  result := TRazreshenie_prosmatrivatj(InternalAddNew);
end;

procedure TRazreshenie_prosmatrivatjList.Insert(index: Integer; NewObject: TRazreshenie_prosmatrivatj);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRazreshenie_prosmatrivatjList.GetBoldObject(index: Integer): TRazreshenie_prosmatrivatj;
begin
  result := TRazreshenie_prosmatrivatj(GetElement(index));
end;

procedure TRazreshenie_prosmatrivatjList.SetBoldObject(index: Integer; NewObject: TRazreshenie_prosmatrivatj);
begin;
  SetElement(index, NewObject);
end;

{ TRazreshenie_ustanavl }

function TRazreshenie_ustanavl._Get_M_ustanavlivaetsya: TBoldObjectReference;
begin
  assert(ValidateMember('TRazreshenie_ustanavl', 'ustanavlivaetsya', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TRazreshenie_ustanavl._Getustanavlivaetsya: TPersonal;
begin
  assert(not assigned(M_ustanavlivaetsya.BoldObject) or (M_ustanavlivaetsya.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ustanavlivaetsya', M_ustanavlivaetsya.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_ustanavlivaetsya.BoldObject);
end;

function TRazreshenie_ustanavl._Get_M_imeet_pravo_ustanavl: TBoldObjectReference;
begin
  assert(ValidateMember('TRazreshenie_ustanavl', 'imeet_pravo_ustanavl', 2, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[2]);
end;

function TRazreshenie_ustanavl._Getimeet_pravo_ustanavl: TSostoyanie_kontakta;
begin
  assert(not assigned(M_imeet_pravo_ustanavl.BoldObject) or (M_imeet_pravo_ustanavl.BoldObject is TSostoyanie_kontakta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_pravo_ustanavl', M_imeet_pravo_ustanavl.BoldObject.ClassName, 'TSostoyanie_kontakta']));
  Result := TSostoyanie_kontakta(M_imeet_pravo_ustanavl.BoldObject);
end;

procedure TRazreshenie_ustanavlList.Add(NewObject: TRazreshenie_ustanavl);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRazreshenie_ustanavlList.IndexOf(anObject: TRazreshenie_ustanavl): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRazreshenie_ustanavlList.Includes(anObject: TRazreshenie_ustanavl) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRazreshenie_ustanavlList.AddNew: TRazreshenie_ustanavl;
begin
  result := TRazreshenie_ustanavl(InternalAddNew);
end;

procedure TRazreshenie_ustanavlList.Insert(index: Integer; NewObject: TRazreshenie_ustanavl);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRazreshenie_ustanavlList.GetBoldObject(index: Integer): TRazreshenie_ustanavl;
begin
  result := TRazreshenie_ustanavl(GetElement(index));
end;

procedure TRazreshenie_ustanavlList.SetBoldObject(index: Integer; NewObject: TRazreshenie_ustanavl);
begin;
  SetElement(index, NewObject);
end;

{ TAbstraktnyi_standart }

function TAbstraktnyi_standart._Get_M_Kod: TBAString;
begin
  assert(ValidateMember('TAbstraktnyi_standart', 'Kod', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TAbstraktnyi_standart._GetKod: String;
begin
  Result := M_Kod.AsString;
end;

procedure TAbstraktnyi_standart._SetKod(const NewValue: String);
begin
  M_Kod.AsString := NewValue;
end;

procedure TAbstraktnyi_standartList.Add(NewObject: TAbstraktnyi_standart);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TAbstraktnyi_standartList.IndexOf(anObject: TAbstraktnyi_standart): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TAbstraktnyi_standartList.Includes(anObject: TAbstraktnyi_standart) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TAbstraktnyi_standartList.AddNew: TAbstraktnyi_standart;
begin
  result := TAbstraktnyi_standart(InternalAddNew);
end;

procedure TAbstraktnyi_standartList.Insert(index: Integer; NewObject: TAbstraktnyi_standart);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TAbstraktnyi_standartList.GetBoldObject(index: Integer): TAbstraktnyi_standart;
begin
  result := TAbstraktnyi_standart(GetElement(index));
end;

procedure TAbstraktnyi_standartList.SetBoldObject(index: Integer; NewObject: TAbstraktnyi_standart);
begin;
  SetElement(index, NewObject);
end;

{ TDobavochnaya_stoim }

function TDobavochnaya_stoim._Get_M_Summa: TBAFloat;
begin
  assert(ValidateMember('TDobavochnaya_stoim', 'Summa', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TDobavochnaya_stoim._GetSumma: double;
begin
  Result := M_Summa.AsFloat;
end;

procedure TDobavochnaya_stoim._SetSumma(const NewValue: double);
begin
  M_Summa.AsFloat := NewValue;
end;

function TDobavochnaya_stoim._Get_M_otnositsya_k_konkr_razm: TBoldObjectReference;
begin
  assert(ValidateMember('TDobavochnaya_stoim', 'otnositsya_k_konkr_razm', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TDobavochnaya_stoim._Getotnositsya_k_konkr_razm: TVyhod;
begin
  assert(not assigned(M_otnositsya_k_konkr_razm.BoldObject) or (M_otnositsya_k_konkr_razm.BoldObject is TVyhod), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_k_konkr_razm', M_otnositsya_k_konkr_razm.BoldObject.ClassName, 'TVyhod']));
  Result := TVyhod(M_otnositsya_k_konkr_razm.BoldObject);
end;

procedure TDobavochnaya_stoim._Setotnositsya_k_konkr_razm(const value: TVyhod);
begin
  M_otnositsya_k_konkr_razm.BoldObject := value;
end;

function TDobavochnaya_stoim._Get_M_opis_raboty_po_reklame: TBoldObjectReference;
begin
  assert(ValidateMember('TDobavochnaya_stoim', 'opis_raboty_po_reklame', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TDobavochnaya_stoim._Getopis_raboty_po_reklame: TRazmeshenie_reklamy;
begin
  assert(not assigned(M_opis_raboty_po_reklame.BoldObject) or (M_opis_raboty_po_reklame.BoldObject is TRazmeshenie_reklamy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'opis_raboty_po_reklame', M_opis_raboty_po_reklame.BoldObject.ClassName, 'TRazmeshenie_reklamy']));
  Result := TRazmeshenie_reklamy(M_opis_raboty_po_reklame.BoldObject);
end;

procedure TDobavochnaya_stoim._Setopis_raboty_po_reklame(const value: TRazmeshenie_reklamy);
begin
  M_opis_raboty_po_reklame.BoldObject := value;
end;

function TDobavochnaya_stoim._Get_M_opisyvaet_stoim_razrab: TBoldObjectReference;
begin
  assert(ValidateMember('TDobavochnaya_stoim', 'opisyvaet_stoim_razrab', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TDobavochnaya_stoim._Getopisyvaet_stoim_razrab: TProekt;
begin
  assert(not assigned(M_opisyvaet_stoim_razrab.BoldObject) or (M_opisyvaet_stoim_razrab.BoldObject is TProekt), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'opisyvaet_stoim_razrab', M_opisyvaet_stoim_razrab.BoldObject.ClassName, 'TProekt']));
  Result := TProekt(M_opisyvaet_stoim_razrab.BoldObject);
end;

procedure TDobavochnaya_stoim._Setopisyvaet_stoim_razrab(const value: TProekt);
begin
  M_opisyvaet_stoim_razrab.BoldObject := value;
end;

procedure TDobavochnaya_stoimList.Add(NewObject: TDobavochnaya_stoim);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDobavochnaya_stoimList.IndexOf(anObject: TDobavochnaya_stoim): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDobavochnaya_stoimList.Includes(anObject: TDobavochnaya_stoim) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDobavochnaya_stoimList.AddNew: TDobavochnaya_stoim;
begin
  result := TDobavochnaya_stoim(InternalAddNew);
end;

procedure TDobavochnaya_stoimList.Insert(index: Integer; NewObject: TDobavochnaya_stoim);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDobavochnaya_stoimList.GetBoldObject(index: Integer): TDobavochnaya_stoim;
begin
  result := TDobavochnaya_stoim(GetElement(index));
end;

procedure TDobavochnaya_stoimList.SetBoldObject(index: Integer; NewObject: TDobavochnaya_stoim);
begin;
  SetElement(index, NewObject);
end;

{ TDolgnostj }

function TDolgnostj._Getopr_dolgnostj_dlya: TPersonalList;
begin
  assert(ValidateMember('TDolgnostj', 'opr_dolgnostj_dlya', 3, TPersonalList));
  Result := TPersonalList(BoldMembers[3]);
end;

procedure TDolgnostjList.Add(NewObject: TDolgnostj);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDolgnostjList.IndexOf(anObject: TDolgnostj): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDolgnostjList.Includes(anObject: TDolgnostj) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDolgnostjList.AddNew: TDolgnostj;
begin
  result := TDolgnostj(InternalAddNew);
end;

procedure TDolgnostjList.Insert(index: Integer; NewObject: TDolgnostj);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDolgnostjList.GetBoldObject(index: Integer): TDolgnostj;
begin
  result := TDolgnostj(GetElement(index));
end;

procedure TDolgnostjList.SetBoldObject(index: Integer; NewObject: TDolgnostj);
begin;
  SetElement(index, NewObject);
end;

{ TZadacha }

function TZadacha._Get_M_Imenovanie: TBAString;
begin
  assert(ValidateMember('TZadacha', 'Imenovanie', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TZadacha._GetImenovanie: String;
begin
  Result := M_Imenovanie.AsString;
end;

procedure TZadacha._SetImenovanie(const NewValue: String);
begin
  M_Imenovanie.AsString := NewValue;
end;

function TZadacha._Get_M_Vypolnena: TBABoolean;
begin
  assert(ValidateMember('TZadacha', 'Vypolnena', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TZadacha._GetVypolnena: Boolean;
begin
  Result := M_Vypolnena.AsBoolean;
end;

procedure TZadacha._SetVypolnena(const NewValue: Boolean);
begin
  M_Vypolnena.AsBoolean := NewValue;
end;

function TZadacha._Get_M_Nachalo_plan: TBADateTime;
begin
  assert(ValidateMember('TZadacha', 'Nachalo_plan', 5, TBADateTime));
  Result := TBADateTime(BoldMembers[5]);
end;

function TZadacha._GetNachalo_plan: TDateTime;
begin
  Result := M_Nachalo_plan.AsDateTime;
end;

procedure TZadacha._SetNachalo_plan(const NewValue: TDateTime);
begin
  M_Nachalo_plan.AsDateTime := NewValue;
end;

function TZadacha._Get_M_Konec_plan: TBADateTime;
begin
  assert(ValidateMember('TZadacha', 'Konec_plan', 6, TBADateTime));
  Result := TBADateTime(BoldMembers[6]);
end;

function TZadacha._GetKonec_plan: TDateTime;
begin
  Result := M_Konec_plan.AsDateTime;
end;

procedure TZadacha._SetKonec_plan(const NewValue: TDateTime);
begin
  M_Konec_plan.AsDateTime := NewValue;
end;

function TZadacha._Get_M_Nachalo_fakt: TBADateTime;
begin
  assert(ValidateMember('TZadacha', 'Nachalo_fakt', 7, TBADateTime));
  Result := TBADateTime(BoldMembers[7]);
end;

function TZadacha._GetNachalo_fakt: TDateTime;
begin
  Result := M_Nachalo_fakt.AsDateTime;
end;

procedure TZadacha._SetNachalo_fakt(const NewValue: TDateTime);
begin
  M_Nachalo_fakt.AsDateTime := NewValue;
end;

function TZadacha._Get_M_Konec_fakt: TBADateTime;
begin
  assert(ValidateMember('TZadacha', 'Konec_fakt', 8, TBADateTime));
  Result := TBADateTime(BoldMembers[8]);
end;

function TZadacha._GetKonec_fakt: TDateTime;
begin
  Result := M_Konec_fakt.AsDateTime;
end;

procedure TZadacha._SetKonec_fakt(const NewValue: TDateTime);
begin
  M_Konec_fakt.AsDateTime := NewValue;
end;

function TZadacha._Get_M_orientir_na: TBoldObjectReference;
begin
  assert(ValidateMember('TZadacha', 'orientir_na', 9, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[9]);
end;

function TZadacha._Getorientir_na: TKlient;
begin
  assert(not assigned(M_orientir_na.BoldObject) or (M_orientir_na.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'orientir_na', M_orientir_na.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_orientir_na.BoldObject);
end;

procedure TZadacha._Setorientir_na(const value: TKlient);
begin
  M_orientir_na.BoldObject := value;
end;

function TZadacha._Getimeet_napominaniya: TNapominanieList;
begin
  assert(ValidateMember('TZadacha', 'imeet_napominaniya', 10, TNapominanieList));
  Result := TNapominanieList(BoldMembers[10]);
end;

function TZadacha._Get_M_otnos__k_stand_zadach: TBoldObjectReference;
begin
  assert(ValidateMember('TZadacha', 'otnos__k_stand_zadach', 11, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[11]);
end;

function TZadacha._Getotnos__k_stand_zadach: TStandartnaya_zadacha;
begin
  assert(not assigned(M_otnos__k_stand_zadach.BoldObject) or (M_otnos__k_stand_zadach.BoldObject is TStandartnaya_zadacha), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnos__k_stand_zadach', M_otnos__k_stand_zadach.BoldObject.ClassName, 'TStandartnaya_zadacha']));
  Result := TStandartnaya_zadacha(M_otnos__k_stand_zadach.BoldObject);
end;

procedure TZadacha._Setotnos__k_stand_zadach(const value: TStandartnaya_zadacha);
begin
  M_otnos__k_stand_zadach.BoldObject := value;
end;

function TZadacha._Getotnos_kak_zadach_k_prich: TRealjnaya_prichinaList;
begin
  assert(ValidateMember('TZadacha', 'otnos_kak_zadach_k_prich', 12, TRealjnaya_prichinaList));
  Result := TRealjnaya_prichinaList(BoldMembers[12]);
end;

function TZadacha._GetLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList;
begin
  assert(ValidateMember('TZadacha', 'Linkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi', 13, TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList));
  Result := TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList(BoldMembers[13]);
end;

function TZadacha._Get_M_vhodit_v_sost_proekta: TBoldObjectReference;
begin
  assert(ValidateMember('TZadacha', 'vhodit_v_sost_proekta', 14, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[14]);
end;

function TZadacha._Getvhodit_v_sost_proekta: TProekt;
begin
  assert(not assigned(M_vhodit_v_sost_proekta.BoldObject) or (M_vhodit_v_sost_proekta.BoldObject is TProekt), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vhodit_v_sost_proekta', M_vhodit_v_sost_proekta.BoldObject.ClassName, 'TProekt']));
  Result := TProekt(M_vhodit_v_sost_proekta.BoldObject);
end;

procedure TZadacha._Setvhodit_v_sost_proekta(const value: TProekt);
begin
  M_vhodit_v_sost_proekta.BoldObject := value;
end;

function TZadacha._Getzadacha_imeet_effekty: TEffektList;
begin
  assert(ValidateMember('TZadacha', 'zadacha_imeet_effekty', 15, TEffektList));
  Result := TEffektList(BoldMembers[15]);
end;

procedure TZadachaList.Add(NewObject: TZadacha);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TZadachaList.IndexOf(anObject: TZadacha): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TZadachaList.Includes(anObject: TZadacha) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TZadachaList.AddNew: TZadacha;
begin
  result := TZadacha(InternalAddNew);
end;

procedure TZadachaList.Insert(index: Integer; NewObject: TZadacha);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TZadachaList.GetBoldObject(index: Integer): TZadacha;
begin
  result := TZadacha(GetElement(index));
end;

procedure TZadachaList.SetBoldObject(index: Integer; NewObject: TZadacha);
begin;
  SetElement(index, NewObject);
end;

{ TIzdanie }

function TIzdanie._Getsostoit_iz_reklamnyh: TRazdel_izdaniyaList;
begin
  assert(ValidateMember('TIzdanie', 'sostoit_iz_reklamnyh', 3, TRazdel_izdaniyaList));
  Result := TRazdel_izdaniyaList(BoldMembers[3]);
end;

function TIzdanie._Getimeet_vyhody: TVypusk_gazetyList;
begin
  assert(ValidateMember('TIzdanie', 'imeet_vyhody', 4, TVypusk_gazetyList));
  Result := TVypusk_gazetyList(BoldMembers[4]);
end;

function TIzdanie._Get_M_imeet_tekushii_vypusk: TBoldObjectReference;
begin
  assert(ValidateMember('TIzdanie', 'imeet_tekushii_vypusk', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TIzdanie._Getimeet_tekushii_vypusk: TVypusk_gazety;
begin
  assert(not assigned(M_imeet_tekushii_vypusk.BoldObject) or (M_imeet_tekushii_vypusk.BoldObject is TVypusk_gazety), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_tekushii_vypusk', M_imeet_tekushii_vypusk.BoldObject.ClassName, 'TVypusk_gazety']));
  Result := TVypusk_gazety(M_imeet_tekushii_vypusk.BoldObject);
end;

procedure TIzdanie._Setimeet_tekushii_vypusk(const value: TVypusk_gazety);
begin
  M_imeet_tekushii_vypusk.BoldObject := value;
end;

procedure TIzdanieList.Add(NewObject: TIzdanie);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TIzdanieList.IndexOf(anObject: TIzdanie): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TIzdanieList.Includes(anObject: TIzdanie) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TIzdanieList.AddNew: TIzdanie;
begin
  result := TIzdanie(InternalAddNew);
end;

procedure TIzdanieList.Insert(index: Integer; NewObject: TIzdanie);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TIzdanieList.GetBoldObject(index: Integer): TIzdanie;
begin
  result := TIzdanie(GetElement(index));
end;

procedure TIzdanieList.SetBoldObject(index: Integer; NewObject: TIzdanie);
begin;
  SetElement(index, NewObject);
end;

{ TKontakt }

function TKontakt._Get_M_Rezuljtat: TBAString;
begin
  assert(ValidateMember('TKontakt', 'Rezuljtat', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TKontakt._GetRezuljtat: String;
begin
  Result := M_Rezuljtat.AsString;
end;

procedure TKontakt._SetRezuljtat(const NewValue: String);
begin
  M_Rezuljtat.AsString := NewValue;
end;

function TKontakt._Get_M_Dog_na_razm_reklamy: TBABoolean;
begin
  assert(ValidateMember('TKontakt', 'Dog_na_razm_reklamy', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TKontakt._GetDog_na_razm_reklamy: Boolean;
begin
  Result := M_Dog_na_razm_reklamy.AsBoolean;
end;

procedure TKontakt._SetDog_na_razm_reklamy(const NewValue: Boolean);
begin
  M_Dog_na_razm_reklamy.AsBoolean := NewValue;
end;

function TKontakt._Get_M_Data: TBADateTime;
begin
  assert(ValidateMember('TKontakt', 'Data', 5, TBADateTime));
  Result := TBADateTime(BoldMembers[5]);
end;

function TKontakt._GetData: TDateTime;
begin
  Result := M_Data.AsDateTime;
end;

procedure TKontakt._SetData(const NewValue: TDateTime);
begin
  M_Data.AsDateTime := NewValue;
end;

function TKontakt._Get_M_yavl_kontaktom_s: TBoldObjectReference;
begin
  assert(ValidateMember('TKontakt', 'yavl_kontaktom_s', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TKontakt._Getyavl_kontaktom_s: TKlient;
begin
  assert(not assigned(M_yavl_kontaktom_s.BoldObject) or (M_yavl_kontaktom_s.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavl_kontaktom_s', M_yavl_kontaktom_s.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_yavl_kontaktom_s.BoldObject);
end;

procedure TKontakt._Setyavl_kontaktom_s(const value: TKlient);
begin
  M_yavl_kontaktom_s.BoldObject := value;
end;

function TKontakt._Getyavl_prich_razm_rekl: TRazmeshenie_reklamyList;
begin
  assert(ValidateMember('TKontakt', 'yavl_prich_razm_rekl', 7, TRazmeshenie_reklamyList));
  Result := TRazmeshenie_reklamyList(BoldMembers[7]);
end;

function TKontakt._Get_M_imeet_tip_kontakta: TBoldObjectReference;
begin
  assert(ValidateMember('TKontakt', 'imeet_tip_kontakta', 8, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[8]);
end;

function TKontakt._Getimeet_tip_kontakta: TTip_kontakta;
begin
  assert(not assigned(M_imeet_tip_kontakta.BoldObject) or (M_imeet_tip_kontakta.BoldObject is TTip_kontakta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_tip_kontakta', M_imeet_tip_kontakta.BoldObject.ClassName, 'TTip_kontakta']));
  Result := TTip_kontakta(M_imeet_tip_kontakta.BoldObject);
end;

procedure TKontakt._Setimeet_tip_kontakta(const value: TTip_kontakta);
begin
  M_imeet_tip_kontakta.BoldObject := value;
end;

function TKontakt._Get_M_nahoditsya_v_sost: TBoldObjectReference;
begin
  assert(ValidateMember('TKontakt', 'nahoditsya_v_sost', 9, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[9]);
end;

function TKontakt._Getnahoditsya_v_sost: TSostoyanie_kontakta;
begin
  assert(not assigned(M_nahoditsya_v_sost.BoldObject) or (M_nahoditsya_v_sost.BoldObject is TSostoyanie_kontakta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'nahoditsya_v_sost', M_nahoditsya_v_sost.BoldObject.ClassName, 'TSostoyanie_kontakta']));
  Result := TSostoyanie_kontakta(M_nahoditsya_v_sost.BoldObject);
end;

procedure TKontakt._Setnahoditsya_v_sost(const value: TSostoyanie_kontakta);
begin
  M_nahoditsya_v_sost.BoldObject := value;
end;

function TKontakt._Get_M_imeet_effekt: TBoldObjectReference;
begin
  assert(ValidateMember('TKontakt', 'imeet_effekt', 10, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[10]);
end;

function TKontakt._Getimeet_effekt: TEffekt;
begin
  assert(not assigned(M_imeet_effekt.BoldObject) or (M_imeet_effekt.BoldObject is TEffekt), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_effekt', M_imeet_effekt.BoldObject.ClassName, 'TEffekt']));
  Result := TEffekt(M_imeet_effekt.BoldObject);
end;

procedure TKontakt._Setimeet_effekt(const value: TEffekt);
begin
  M_imeet_effekt.BoldObject := value;
end;

function TKontakt._Getkontakt_imeet_napom: TNapominanieList;
begin
  assert(ValidateMember('TKontakt', 'kontakt_imeet_napom', 11, TNapominanieList));
  Result := TNapominanieList(BoldMembers[11]);
end;

procedure TKontaktList.Add(NewObject: TKontakt);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TKontaktList.IndexOf(anObject: TKontakt): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TKontaktList.Includes(anObject: TKontakt) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TKontaktList.AddNew: TKontakt;
begin
  result := TKontakt(InternalAddNew);
end;

procedure TKontaktList.Insert(index: Integer; NewObject: TKontakt);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TKontaktList.GetBoldObject(index: Integer): TKontakt;
begin
  result := TKontakt(GetElement(index));
end;

procedure TKontaktList.SetBoldObject(index: Integer; NewObject: TKontakt);
begin;
  SetElement(index, NewObject);
end;

{ TNapominanie }

function TNapominanie._Get_M_Imenovanie: TBAString;
begin
  assert(ValidateMember('TNapominanie', 'Imenovanie', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TNapominanie._GetImenovanie: String;
begin
  Result := M_Imenovanie.AsString;
end;

procedure TNapominanie._SetImenovanie(const NewValue: String);
begin
  M_Imenovanie.AsString := NewValue;
end;

function TNapominanie._Get_M_Uchteno: TBABoolean;
begin
  assert(ValidateMember('TNapominanie', 'Uchteno', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TNapominanie._GetUchteno: Boolean;
begin
  Result := M_Uchteno.AsBoolean;
end;

procedure TNapominanie._SetUchteno(const NewValue: Boolean);
begin
  M_Uchteno.AsBoolean := NewValue;
end;

function TNapominanie._Get_M_Data: TBADateTime;
begin
  assert(ValidateMember('TNapominanie', 'Data', 5, TBADateTime));
  Result := TBADateTime(BoldMembers[5]);
end;

function TNapominanie._GetData: TDateTime;
begin
  Result := M_Data.AsDateTime;
end;

procedure TNapominanie._SetData(const NewValue: TDateTime);
begin
  M_Data.AsDateTime := NewValue;
end;

function TNapominanie._Get_M_Data_vych: TBADateTime;
begin
  assert(ValidateMember('TNapominanie', 'Data_vych', 6, TBADateTime));
  Result := TBADateTime(BoldMembers[6]);
end;

function TNapominanie._GetData_vych: TDateTime;
begin
  Result := M_Data_vych.AsDateTime;
end;

function TNapominanie._Get_M_Naim_vych: TBAString;
begin
  assert(ValidateMember('TNapominanie', 'Naim_vych', 7, TBAString));
  Result := TBAString(BoldMembers[7]);
end;

function TNapominanie._GetNaim_vych: String;
begin
  Result := M_Naim_vych.AsString;
end;

function TNapominanie._Get_M_Ot_kamp: TBABoolean;
begin
  assert(ValidateMember('TNapominanie', 'Ot_kamp', 8, TBABoolean));
  Result := TBABoolean(BoldMembers[8]);
end;

function TNapominanie._GetOt_kamp: Boolean;
begin
  Result := M_Ot_kamp.AsBoolean;
end;

function TNapominanie._Get_M_otnos_k_zadache: TBoldObjectReference;
begin
  assert(ValidateMember('TNapominanie', 'otnos_k_zadache', 9, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[9]);
end;

function TNapominanie._Getotnos_k_zadache: TZadacha;
begin
  assert(not assigned(M_otnos_k_zadache.BoldObject) or (M_otnos_k_zadache.BoldObject is TZadacha), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnos_k_zadache', M_otnos_k_zadache.BoldObject.ClassName, 'TZadacha']));
  Result := TZadacha(M_otnos_k_zadache.BoldObject);
end;

procedure TNapominanie._Setotnos_k_zadache(const value: TZadacha);
begin
  M_otnos_k_zadache.BoldObject := value;
end;

function TNapominanie._Getformir_uslovie: TUsloviyaList;
begin
  assert(ValidateMember('TNapominanie', 'formir_uslovie', 10, TUsloviyaList));
  Result := TUsloviyaList(BoldMembers[10]);
end;

function TNapominanie._Get_M_otnos_k_kontaktu: TBoldObjectReference;
begin
  assert(ValidateMember('TNapominanie', 'otnos_k_kontaktu', 11, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[11]);
end;

function TNapominanie._Getotnos_k_kontaktu: TKontakt;
begin
  assert(not assigned(M_otnos_k_kontaktu.BoldObject) or (M_otnos_k_kontaktu.BoldObject is TKontakt), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnos_k_kontaktu', M_otnos_k_kontaktu.BoldObject.ClassName, 'TKontakt']));
  Result := TKontakt(M_otnos_k_kontaktu.BoldObject);
end;

procedure TNapominanie._Setotnos_k_kontaktu(const value: TKontakt);
begin
  M_otnos_k_kontaktu.BoldObject := value;
end;

function TNapominanie._Get_M_otnos_k_stand_napom: TBoldObjectReference;
begin
  assert(ValidateMember('TNapominanie', 'otnos_k_stand_napom', 12, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[12]);
end;

function TNapominanie._Getotnos_k_stand_napom: TStandartnoe_napominanie;
begin
  assert(not assigned(M_otnos_k_stand_napom.BoldObject) or (M_otnos_k_stand_napom.BoldObject is TStandartnoe_napominanie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnos_k_stand_napom', M_otnos_k_stand_napom.BoldObject.ClassName, 'TStandartnoe_napominanie']));
  Result := TStandartnoe_napominanie(M_otnos_k_stand_napom.BoldObject);
end;

procedure TNapominanie._Setotnos_k_stand_napom(const value: TStandartnoe_napominanie);
begin
  M_otnos_k_stand_napom.BoldObject := value;
end;

function TNapominanie._Get_M_yavl_napomin_dlya: TBoldObjectReference;
begin
  assert(ValidateMember('TNapominanie', 'yavl_napomin_dlya', 13, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[13]);
end;

function TNapominanie._Getyavl_napomin_dlya: TPersonal;
begin
  assert(not assigned(M_yavl_napomin_dlya.BoldObject) or (M_yavl_napomin_dlya.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavl_napomin_dlya', M_yavl_napomin_dlya.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_yavl_napomin_dlya.BoldObject);
end;

procedure TNapominanie._Setyavl_napomin_dlya(const value: TPersonal);
begin
  M_yavl_napomin_dlya.BoldObject := value;
end;

procedure TNapominanieList.Add(NewObject: TNapominanie);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TNapominanieList.IndexOf(anObject: TNapominanie): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TNapominanieList.Includes(anObject: TNapominanie) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TNapominanieList.AddNew: TNapominanie;
begin
  result := TNapominanie(InternalAddNew);
end;

procedure TNapominanieList.Insert(index: Integer; NewObject: TNapominanie);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TNapominanieList.GetBoldObject(index: Integer): TNapominanie;
begin
  result := TNapominanie(GetElement(index));
end;

procedure TNapominanieList.SetBoldObject(index: Integer; NewObject: TNapominanie);
begin;
  SetElement(index, NewObject);
end;

function TNapominanie.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Data_vych) then result := _Data_vych_DeriveAndSubscribe else
  if (Member = M_Naim_vych) then result := _Naim_vych_DeriveAndSubscribe else
  if (Member = M_Ot_kamp) then result := _Ot_kamp_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TNapominanie.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TPozic_schta }

function TPozic_schta._Get_M_Summa: TBAFloat;
begin
  assert(ValidateMember('TPozic_schta', 'Summa', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TPozic_schta._GetSumma: double;
begin
  Result := M_Summa.AsFloat;
end;

procedure TPozic_schta._SetSumma(const NewValue: double);
begin
  M_Summa.AsFloat := NewValue;
end;

function TPozic_schta._Get_M_yavl_schetom_na_opl_reklamy: TBoldObjectReference;
begin
  assert(ValidateMember('TPozic_schta', 'yavl_schetom_na_opl_reklamy', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TPozic_schta._Getyavl_schetom_na_opl_reklamy: TRazmeshenie_reklamy;
begin
  assert(not assigned(M_yavl_schetom_na_opl_reklamy.BoldObject) or (M_yavl_schetom_na_opl_reklamy.BoldObject is TRazmeshenie_reklamy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavl_schetom_na_opl_reklamy', M_yavl_schetom_na_opl_reklamy.BoldObject.ClassName, 'TRazmeshenie_reklamy']));
  Result := TRazmeshenie_reklamy(M_yavl_schetom_na_opl_reklamy.BoldObject);
end;

procedure TPozic_schta._Setyavl_schetom_na_opl_reklamy(const value: TRazmeshenie_reklamy);
begin
  M_yavl_schetom_na_opl_reklamy.BoldObject := value;
end;

function TPozic_schta._Get_M_vhodit_v_schyot: TBoldObjectReference;
begin
  assert(ValidateMember('TPozic_schta', 'vhodit_v_schyot', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TPozic_schta._Getvhodit_v_schyot: TSchyot;
begin
  assert(not assigned(M_vhodit_v_schyot.BoldObject) or (M_vhodit_v_schyot.BoldObject is TSchyot), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vhodit_v_schyot', M_vhodit_v_schyot.BoldObject.ClassName, 'TSchyot']));
  Result := TSchyot(M_vhodit_v_schyot.BoldObject);
end;

procedure TPozic_schta._Setvhodit_v_schyot(const value: TSchyot);
begin
  M_vhodit_v_schyot.BoldObject := value;
end;

procedure TPozic_schtaList.Add(NewObject: TPozic_schta);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPozic_schtaList.IndexOf(anObject: TPozic_schta): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPozic_schtaList.Includes(anObject: TPozic_schta) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPozic_schtaList.AddNew: TPozic_schta;
begin
  result := TPozic_schta(InternalAddNew);
end;

procedure TPozic_schtaList.Insert(index: Integer; NewObject: TPozic_schta);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPozic_schtaList.GetBoldObject(index: Integer): TPozic_schta;
begin
  result := TPozic_schta(GetElement(index));
end;

procedure TPozic_schtaList.SetBoldObject(index: Integer; NewObject: TPozic_schta);
begin;
  SetElement(index, NewObject);
end;

{ TRazdel_izdaniya }

function TRazdel_izdaniya._Get_M_Obshaya_ploshadj: TBAFloat;
begin
  assert(ValidateMember('TRazdel_izdaniya', 'Obshaya_ploshadj', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TRazdel_izdaniya._GetObshaya_ploshadj: double;
begin
  Result := M_Obshaya_ploshadj.AsFloat;
end;

procedure TRazdel_izdaniya._SetObshaya_ploshadj(const NewValue: double);
begin
  M_Obshaya_ploshadj.AsFloat := NewValue;
end;

function TRazdel_izdaniya._Get_M_Zanyato_ploshadi: TBAFloat;
begin
  assert(ValidateMember('TRazdel_izdaniya', 'Zanyato_ploshadi', 4, TBAFloat));
  Result := TBAFloat(BoldMembers[4]);
end;

function TRazdel_izdaniya._GetZanyato_ploshadi: double;
begin
  Result := M_Zanyato_ploshadi.AsFloat;
end;

function TRazdel_izdaniya._Get_M_Svobodno_ploshadi: TBAFloat;
begin
  assert(ValidateMember('TRazdel_izdaniya', 'Svobodno_ploshadi', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TRazdel_izdaniya._GetSvobodno_ploshadi: double;
begin
  Result := M_Svobodno_ploshadi.AsFloat;
end;

function TRazdel_izdaniya._Get_M_Nomera_stranic: TBAString;
begin
  assert(ValidateMember('TRazdel_izdaniya', 'Nomera_stranic', 6, TBAString));
  Result := TBAString(BoldMembers[6]);
end;

function TRazdel_izdaniya._GetNomera_stranic: String;
begin
  Result := M_Nomera_stranic.AsString;
end;

procedure TRazdel_izdaniya._SetNomera_stranic(const NewValue: String);
begin
  M_Nomera_stranic.AsString := NewValue;
end;

function TRazdel_izdaniya._Get_M_Nomer_karty_izdaniya: TBAInteger;
begin
  assert(ValidateMember('TRazdel_izdaniya', 'Nomer_karty_izdaniya', 7, TBAInteger));
  Result := TBAInteger(BoldMembers[7]);
end;

function TRazdel_izdaniya._GetNomer_karty_izdaniya: Integer;
begin
  Result := M_Nomer_karty_izdaniya.AsInteger;
end;

procedure TRazdel_izdaniya._SetNomer_karty_izdaniya(const NewValue: Integer);
begin
  M_Nomer_karty_izdaniya.AsInteger := NewValue;
end;

function TRazdel_izdaniya._Get_M_otnositsya_k_izd: TBoldObjectReference;
begin
  assert(ValidateMember('TRazdel_izdaniya', 'otnositsya_k_izd', 8, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[8]);
end;

function TRazdel_izdaniya._Getotnositsya_k_izd: TIzdanie;
begin
  assert(not assigned(M_otnositsya_k_izd.BoldObject) or (M_otnositsya_k_izd.BoldObject is TIzdanie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_k_izd', M_otnositsya_k_izd.BoldObject.ClassName, 'TIzdanie']));
  Result := TIzdanie(M_otnositsya_k_izd.BoldObject);
end;

procedure TRazdel_izdaniya._Setotnositsya_k_izd(const value: TIzdanie);
begin
  M_otnositsya_k_izd.BoldObject := value;
end;

function TRazdel_izdaniya._Getyavl_mestom_reklamy: TRazmeshenie_reklamyList;
begin
  assert(ValidateMember('TRazdel_izdaniya', 'yavl_mestom_reklamy', 9, TRazmeshenie_reklamyList));
  Result := TRazmeshenie_reklamyList(BoldMembers[9]);
end;

procedure TRazdel_izdaniyaList.Add(NewObject: TRazdel_izdaniya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRazdel_izdaniyaList.IndexOf(anObject: TRazdel_izdaniya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRazdel_izdaniyaList.Includes(anObject: TRazdel_izdaniya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRazdel_izdaniyaList.AddNew: TRazdel_izdaniya;
begin
  result := TRazdel_izdaniya(InternalAddNew);
end;

procedure TRazdel_izdaniyaList.Insert(index: Integer; NewObject: TRazdel_izdaniya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRazdel_izdaniyaList.GetBoldObject(index: Integer): TRazdel_izdaniya;
begin
  result := TRazdel_izdaniya(GetElement(index));
end;

procedure TRazdel_izdaniyaList.SetBoldObject(index: Integer; NewObject: TRazdel_izdaniya);
begin;
  SetElement(index, NewObject);
end;

{ TRazmery }

function TRazmery._Get_M_Vysota: TBAFloat;
begin
  assert(ValidateMember('TRazmery', 'Vysota', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TRazmery._GetVysota: double;
begin
  Result := M_Vysota.AsFloat;
end;

procedure TRazmery._SetVysota(const NewValue: double);
begin
  M_Vysota.AsFloat := NewValue;
end;

function TRazmery._Get_M_Shirina: TBAFloat;
begin
  assert(ValidateMember('TRazmery', 'Shirina', 4, TBAFloat));
  Result := TBAFloat(BoldMembers[4]);
end;

function TRazmery._GetShirina: double;
begin
  Result := M_Shirina.AsFloat;
end;

procedure TRazmery._SetShirina(const NewValue: double);
begin
  M_Shirina.AsFloat := NewValue;
end;

function TRazmery._Get_M_Ploshadj: TBAFloat;
begin
  assert(ValidateMember('TRazmery', 'Ploshadj', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TRazmery._GetPloshadj: double;
begin
  Result := M_Ploshadj.AsFloat;
end;

function TRazmery._Getyavl_razmerom_dlya: TRazmeshenie_reklamyList;
begin
  assert(ValidateMember('TRazmery', 'yavl_razmerom_dlya', 6, TRazmeshenie_reklamyList));
  Result := TRazmeshenie_reklamyList(BoldMembers[6]);
end;

procedure TRazmeryList.Add(NewObject: TRazmery);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRazmeryList.IndexOf(anObject: TRazmery): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRazmeryList.Includes(anObject: TRazmery) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRazmeryList.AddNew: TRazmery;
begin
  result := TRazmery(InternalAddNew);
end;

procedure TRazmeryList.Insert(index: Integer; NewObject: TRazmery);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRazmeryList.GetBoldObject(index: Integer): TRazmery;
begin
  result := TRazmery(GetElement(index));
end;

procedure TRazmeryList.SetBoldObject(index: Integer; NewObject: TRazmery);
begin;
  SetElement(index, NewObject);
end;

{ TSkidka }

function TSkidka._Get_M_Bonus: TBABoolean;
begin
  assert(ValidateMember('TSkidka', 'Bonus', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TSkidka._GetBonus: Boolean;
begin
  Result := M_Bonus.AsBoolean;
end;

procedure TSkidka._SetBonus(const NewValue: Boolean);
begin
  M_Bonus.AsBoolean := NewValue;
end;

function TSkidka._Get_M_Opt_dlya_dolgih: TBABoolean;
begin
  assert(ValidateMember('TSkidka', 'Opt_dlya_dolgih', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TSkidka._GetOpt_dlya_dolgih: Boolean;
begin
  Result := M_Opt_dlya_dolgih.AsBoolean;
end;

procedure TSkidka._SetOpt_dlya_dolgih(const NewValue: Boolean);
begin
  M_Opt_dlya_dolgih.AsBoolean := NewValue;
end;

function TSkidka._Get_M_Za_chisl_strok: TBABoolean;
begin
  assert(ValidateMember('TSkidka', 'Za_chisl_strok', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TSkidka._GetZa_chisl_strok: Boolean;
begin
  Result := M_Za_chisl_strok.AsBoolean;
end;

procedure TSkidka._SetZa_chisl_strok(const NewValue: Boolean);
begin
  M_Za_chisl_strok.AsBoolean := NewValue;
end;

function TSkidka._Get_M_Chislo_strok: TBAFloat;
begin
  assert(ValidateMember('TSkidka', 'Chislo_strok', 6, TBAFloat));
  Result := TBAFloat(BoldMembers[6]);
end;

function TSkidka._GetChislo_strok: double;
begin
  Result := M_Chislo_strok.AsFloat;
end;

procedure TSkidka._SetChislo_strok(const NewValue: double);
begin
  M_Chislo_strok.AsFloat := NewValue;
end;

function TSkidka._Get_M_Opt_procent: TBAFloat;
begin
  assert(ValidateMember('TSkidka', 'Opt_procent', 7, TBAFloat));
  Result := TBAFloat(BoldMembers[7]);
end;

function TSkidka._GetOpt_procent: double;
begin
  Result := M_Opt_procent.AsFloat;
end;

procedure TSkidka._SetOpt_procent(const NewValue: double);
begin
  M_Opt_procent.AsFloat := NewValue;
end;

function TSkidka._Get_M_Bonus_vyhod: TBAFloat;
begin
  assert(ValidateMember('TSkidka', 'Bonus_vyhod', 8, TBAFloat));
  Result := TBAFloat(BoldMembers[8]);
end;

function TSkidka._GetBonus_vyhod: double;
begin
  Result := M_Bonus_vyhod.AsFloat;
end;

procedure TSkidka._SetBonus_vyhod(const NewValue: double);
begin
  M_Bonus_vyhod.AsFloat := NewValue;
end;

function TSkidka._Get_M_Stoim_stroki: TBAFloat;
begin
  assert(ValidateMember('TSkidka', 'Stoim_stroki', 9, TBAFloat));
  Result := TBAFloat(BoldMembers[9]);
end;

function TSkidka._GetStoim_stroki: double;
begin
  Result := M_Stoim_stroki.AsFloat;
end;

procedure TSkidka._SetStoim_stroki(const NewValue: double);
begin
  M_Stoim_stroki.AsFloat := NewValue;
end;

function TSkidka._Get_M_Avtomaticheski: TBABoolean;
begin
  assert(ValidateMember('TSkidka', 'Avtomaticheski', 10, TBABoolean));
  Result := TBABoolean(BoldMembers[10]);
end;

function TSkidka._GetAvtomaticheski: Boolean;
begin
  Result := M_Avtomaticheski.AsBoolean;
end;

procedure TSkidka._SetAvtomaticheski(const NewValue: Boolean);
begin
  M_Avtomaticheski.AsBoolean := NewValue;
end;

function TSkidka._Getformir_cenu_na: TRazmeshenie_reklamyList;
begin
  assert(ValidateMember('TSkidka', 'formir_cenu_na', 11, TRazmeshenie_reklamyList));
  Result := TRazmeshenie_reklamyList(BoldMembers[11]);
end;

function TSkidka._GetSootn_so_skidk: TSootn_so_skidkList;
begin
  assert(ValidateMember('TSkidka', 'Sootn_so_skidk', 12, TSootn_so_skidkList));
  Result := TSootn_so_skidkList(BoldMembers[12]);
end;

function TSkidka._Getharakt_skidk_tip_rekl: TTip_reklamyList;
begin
  assert(ValidateMember('TSkidka', 'harakt_skidk_tip_rekl', 13, TTip_reklamyList));
  Result := TTip_reklamyList(BoldMembers[13]);
end;

function TSkidka._GetSootn_tipa_so_skidk: TSootn_tipa_so_skidkList;
begin
  assert(ValidateMember('TSkidka', 'Sootn_tipa_so_skidk', 14, TSootn_tipa_so_skidkList));
  Result := TSootn_tipa_so_skidkList(BoldMembers[14]);
end;

procedure TSkidkaList.Add(NewObject: TSkidka);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSkidkaList.IndexOf(anObject: TSkidka): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSkidkaList.Includes(anObject: TSkidka) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSkidkaList.AddNew: TSkidka;
begin
  result := TSkidka(InternalAddNew);
end;

procedure TSkidkaList.Insert(index: Integer; NewObject: TSkidka);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSkidkaList.GetBoldObject(index: Integer): TSkidka;
begin
  result := TSkidka(GetElement(index));
end;

procedure TSkidkaList.SetBoldObject(index: Integer; NewObject: TSkidka);
begin;
  SetElement(index, NewObject);
end;

{ TSpecif_organizacii }

function TSpecif_organizacii._Getopisyv_specif_rab: TKlientList;
begin
  assert(ValidateMember('TSpecif_organizacii', 'opisyv_specif_rab', 3, TKlientList));
  Result := TKlientList(BoldMembers[3]);
end;

procedure TSpecif_organizaciiList.Add(NewObject: TSpecif_organizacii);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSpecif_organizaciiList.IndexOf(anObject: TSpecif_organizacii): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSpecif_organizaciiList.Includes(anObject: TSpecif_organizacii) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSpecif_organizaciiList.AddNew: TSpecif_organizacii;
begin
  result := TSpecif_organizacii(InternalAddNew);
end;

procedure TSpecif_organizaciiList.Insert(index: Integer; NewObject: TSpecif_organizacii);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSpecif_organizaciiList.GetBoldObject(index: Integer): TSpecif_organizacii;
begin
  result := TSpecif_organizacii(GetElement(index));
end;

procedure TSpecif_organizaciiList.SetBoldObject(index: Integer; NewObject: TSpecif_organizacii);
begin;
  SetElement(index, NewObject);
end;

{ TStoimostj }

function TStoimostj._Get_M_Stoimostj_1_kv_sm: TBAFloat;
begin
  assert(ValidateMember('TStoimostj', 'Stoimostj_1_kv_sm', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TStoimostj._GetStoimostj_1_kv_sm: double;
begin
  Result := M_Stoimostj_1_kv_sm.AsFloat;
end;

procedure TStoimostj._SetStoimostj_1_kv_sm(const NewValue: double);
begin
  M_Stoimostj_1_kv_sm.AsFloat := NewValue;
end;

function TStoimostj._Getopr_stoim_kv_sm_dya: TRazmeshenie_reklamyList;
begin
  assert(ValidateMember('TStoimostj', 'opr_stoim_kv_sm_dya', 4, TRazmeshenie_reklamyList));
  Result := TRazmeshenie_reklamyList(BoldMembers[4]);
end;

procedure TStoimostjList.Add(NewObject: TStoimostj);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TStoimostjList.IndexOf(anObject: TStoimostj): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TStoimostjList.Includes(anObject: TStoimostj) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TStoimostjList.AddNew: TStoimostj;
begin
  result := TStoimostj(InternalAddNew);
end;

procedure TStoimostjList.Insert(index: Integer; NewObject: TStoimostj);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TStoimostjList.GetBoldObject(index: Integer): TStoimostj;
begin
  result := TStoimostj(GetElement(index));
end;

procedure TStoimostjList.SetBoldObject(index: Integer; NewObject: TStoimostj);
begin;
  SetElement(index, NewObject);
end;

{ TTip_kontakta }

function TTip_kontakta._Get_M_Eng_description: TBAString;
begin
  assert(ValidateMember('TTip_kontakta', 'Eng_description', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TTip_kontakta._GetEng_description: String;
begin
  Result := M_Eng_description.AsString;
end;

procedure TTip_kontakta._SetEng_description(const NewValue: String);
begin
  M_Eng_description.AsString := NewValue;
end;

function TTip_kontakta._Getyavl_tipom_kont_dlya: TKontaktList;
begin
  assert(ValidateMember('TTip_kontakta', 'yavl_tipom_kont_dlya', 4, TKontaktList));
  Result := TKontaktList(BoldMembers[4]);
end;

function TTip_kontakta._Get_M_predpolag_sostoyaniya: TBoldObjectReference;
begin
  assert(ValidateMember('TTip_kontakta', 'predpolag_sostoyaniya', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TTip_kontakta._Getpredpolag_sostoyaniya: TSostoyanie_kontakta;
begin
  assert(not assigned(M_predpolag_sostoyaniya.BoldObject) or (M_predpolag_sostoyaniya.BoldObject is TSostoyanie_kontakta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'predpolag_sostoyaniya', M_predpolag_sostoyaniya.BoldObject.ClassName, 'TSostoyanie_kontakta']));
  Result := TSostoyanie_kontakta(M_predpolag_sostoyaniya.BoldObject);
end;

procedure TTip_kontakta._Setpredpolag_sostoyaniya(const value: TSostoyanie_kontakta);
begin
  M_predpolag_sostoyaniya.BoldObject := value;
end;

procedure TTip_kontaktaList.Add(NewObject: TTip_kontakta);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTip_kontaktaList.IndexOf(anObject: TTip_kontakta): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTip_kontaktaList.Includes(anObject: TTip_kontakta) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTip_kontaktaList.AddNew: TTip_kontakta;
begin
  result := TTip_kontakta(InternalAddNew);
end;

procedure TTip_kontaktaList.Insert(index: Integer; NewObject: TTip_kontakta);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTip_kontaktaList.GetBoldObject(index: Integer): TTip_kontakta;
begin
  result := TTip_kontakta(GetElement(index));
end;

procedure TTip_kontaktaList.SetBoldObject(index: Integer; NewObject: TTip_kontakta);
begin;
  SetElement(index, NewObject);
end;

{ TTip_reklamy }

function TTip_reklamy._Get_M_Avtomaticheski: TBABoolean;
begin
  assert(ValidateMember('TTip_reklamy', 'Avtomaticheski', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TTip_reklamy._GetAvtomaticheski: Boolean;
begin
  Result := M_Avtomaticheski.AsBoolean;
end;

procedure TTip_reklamy._SetAvtomaticheski(const NewValue: Boolean);
begin
  M_Avtomaticheski.AsBoolean := NewValue;
end;

function TTip_reklamy._Get_M_Razr__mnogitelj: TBABoolean;
begin
  assert(ValidateMember('TTip_reklamy', 'Razr__mnogitelj', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TTip_reklamy._GetRazr__mnogitelj: Boolean;
begin
  Result := M_Razr__mnogitelj.AsBoolean;
end;

procedure TTip_reklamy._SetRazr__mnogitelj(const NewValue: Boolean);
begin
  M_Razr__mnogitelj.AsBoolean := NewValue;
end;

function TTip_reklamy._Gettip_imeet_razmesheniya: TRazmeshenie_reklamyList;
begin
  assert(ValidateMember('TTip_reklamy', 'tip_imeet_razmesheniya', 5, TRazmeshenie_reklamyList));
  Result := TRazmeshenie_reklamyList(BoldMembers[5]);
end;

function TTip_reklamy._Gettip_rekl_imeet_skidki: TSkidkaList;
begin
  assert(ValidateMember('TTip_reklamy', 'tip_rekl_imeet_skidki', 6, TSkidkaList));
  Result := TSkidkaList(BoldMembers[6]);
end;

function TTip_reklamy._GetSootn_tipa_so_skidk: TSootn_tipa_so_skidkList;
begin
  assert(ValidateMember('TTip_reklamy', 'Sootn_tipa_so_skidk', 7, TSootn_tipa_so_skidkList));
  Result := TSootn_tipa_so_skidkList(BoldMembers[7]);
end;

procedure TTip_reklamyList.Add(NewObject: TTip_reklamy);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTip_reklamyList.IndexOf(anObject: TTip_reklamy): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTip_reklamyList.Includes(anObject: TTip_reklamy) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTip_reklamyList.AddNew: TTip_reklamy;
begin
  result := TTip_reklamy(InternalAddNew);
end;

procedure TTip_reklamyList.Insert(index: Integer; NewObject: TTip_reklamy);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTip_reklamyList.GetBoldObject(index: Integer): TTip_reklamy;
begin
  result := TTip_reklamy(GetElement(index));
end;

procedure TTip_reklamyList.SetBoldObject(index: Integer; NewObject: TTip_reklamy);
begin;
  SetElement(index, NewObject);
end;

{ TUsloviya }

function TUsloviya._Get_M_Uslovnoe_nazv: TBAString;
begin
  assert(ValidateMember('TUsloviya', 'Uslovnoe_nazv', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TUsloviya._GetUslovnoe_nazv: String;
begin
  Result := M_Uslovnoe_nazv.AsString;
end;

procedure TUsloviya._SetUslovnoe_nazv(const NewValue: String);
begin
  M_Uslovnoe_nazv.AsString := NewValue;
end;

function TUsloviya._Get_M_Srabotalo: TBABoolean;
begin
  assert(ValidateMember('TUsloviya', 'Srabotalo', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TUsloviya._GetSrabotalo: Boolean;
begin
  Result := M_Srabotalo.AsBoolean;
end;

procedure TUsloviya._SetSrabotalo(const NewValue: Boolean);
begin
  M_Srabotalo.AsBoolean := NewValue;
end;

function TUsloviya._Get_M_Data_srabatyvaniya: TBADateTime;
begin
  assert(ValidateMember('TUsloviya', 'Data_srabatyvaniya', 5, TBADateTime));
  Result := TBADateTime(BoldMembers[5]);
end;

function TUsloviya._GetData_srabatyvaniya: TDateTime;
begin
  Result := M_Data_srabatyvaniya.AsDateTime;
end;

procedure TUsloviya._SetData_srabatyvaniya(const NewValue: TDateTime);
begin
  M_Data_srabatyvaniya.AsDateTime := NewValue;
end;

function TUsloviya._Get_M_ootnositsya_k_prichine: TBoldObjectReference;
begin
  assert(ValidateMember('TUsloviya', 'ootnositsya_k_prichine', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TUsloviya._Getootnositsya_k_prichine: TRealjnaya_prichina;
begin
  assert(not assigned(M_ootnositsya_k_prichine.BoldObject) or (M_ootnositsya_k_prichine.BoldObject is TRealjnaya_prichina), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ootnositsya_k_prichine', M_ootnositsya_k_prichine.BoldObject.ClassName, 'TRealjnaya_prichina']));
  Result := TRealjnaya_prichina(M_ootnositsya_k_prichine.BoldObject);
end;

procedure TUsloviya._Setootnositsya_k_prichine(const value: TRealjnaya_prichina);
begin
  M_ootnositsya_k_prichine.BoldObject := value;
end;

function TUsloviya._Get_M_otnositsya_k_napomin: TBoldObjectReference;
begin
  assert(ValidateMember('TUsloviya', 'otnositsya_k_napomin', 7, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[7]);
end;

function TUsloviya._Getotnositsya_k_napomin: TNapominanie;
begin
  assert(not assigned(M_otnositsya_k_napomin.BoldObject) or (M_otnositsya_k_napomin.BoldObject is TNapominanie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_k_napomin', M_otnositsya_k_napomin.BoldObject.ClassName, 'TNapominanie']));
  Result := TNapominanie(M_otnositsya_k_napomin.BoldObject);
end;

procedure TUsloviya._Setotnositsya_k_napomin(const value: TNapominanie);
begin
  M_otnositsya_k_napomin.BoldObject := value;
end;

function TUsloviya._Get_M_otnositsya_k_stand_usl: TBoldObjectReference;
begin
  assert(ValidateMember('TUsloviya', 'otnositsya_k_stand_usl', 8, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[8]);
end;

function TUsloviya._Getotnositsya_k_stand_usl: TStandartnoe_uslovie;
begin
  assert(not assigned(M_otnositsya_k_stand_usl.BoldObject) or (M_otnositsya_k_stand_usl.BoldObject is TStandartnoe_uslovie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_k_stand_usl', M_otnositsya_k_stand_usl.BoldObject.ClassName, 'TStandartnoe_uslovie']));
  Result := TStandartnoe_uslovie(M_otnositsya_k_stand_usl.BoldObject);
end;

procedure TUsloviya._Setotnositsya_k_stand_usl(const value: TStandartnoe_uslovie);
begin
  M_otnositsya_k_stand_usl.BoldObject := value;
end;

procedure TUsloviyaList.Add(NewObject: TUsloviya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TUsloviyaList.IndexOf(anObject: TUsloviya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TUsloviyaList.Includes(anObject: TUsloviya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TUsloviyaList.AddNew: TUsloviya;
begin
  result := TUsloviya(InternalAddNew);
end;

procedure TUsloviyaList.Insert(index: Integer; NewObject: TUsloviya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TUsloviyaList.GetBoldObject(index: Integer): TUsloviya;
begin
  result := TUsloviya(GetElement(index));
end;

procedure TUsloviyaList.SetBoldObject(index: Integer; NewObject: TUsloviya);
begin;
  SetElement(index, NewObject);
end;

{ THarakteristika_klienta }

function THarakteristika_klienta._Get_M_Chernyi_spisok: TBABoolean;
begin
  assert(ValidateMember('THarakteristika_klienta', 'Chernyi_spisok', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function THarakteristika_klienta._GetChernyi_spisok: Boolean;
begin
  Result := M_Chernyi_spisok.AsBoolean;
end;

procedure THarakteristika_klienta._SetChernyi_spisok(const NewValue: Boolean);
begin
  M_Chernyi_spisok.AsBoolean := NewValue;
end;

function THarakteristika_klienta._Get_M_Vagnyi_klient: TBABoolean;
begin
  assert(ValidateMember('THarakteristika_klienta', 'Vagnyi_klient', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function THarakteristika_klienta._GetVagnyi_klient: Boolean;
begin
  Result := M_Vagnyi_klient.AsBoolean;
end;

procedure THarakteristika_klienta._SetVagnyi_klient(const NewValue: Boolean);
begin
  M_Vagnyi_klient.AsBoolean := NewValue;
end;

function THarakteristika_klienta._Get_M_Postoyannyi_klient: TBABoolean;
begin
  assert(ValidateMember('THarakteristika_klienta', 'Postoyannyi_klient', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function THarakteristika_klienta._GetPostoyannyi_klient: Boolean;
begin
  Result := M_Postoyannyi_klient.AsBoolean;
end;

procedure THarakteristika_klienta._SetPostoyannyi_klient(const NewValue: Boolean);
begin
  M_Postoyannyi_klient.AsBoolean := NewValue;
end;

function THarakteristika_klienta._Get_M_Uvagaemyi_klient: TBABoolean;
begin
  assert(ValidateMember('THarakteristika_klienta', 'Uvagaemyi_klient', 6, TBABoolean));
  Result := TBABoolean(BoldMembers[6]);
end;

function THarakteristika_klienta._GetUvagaemyi_klient: Boolean;
begin
  Result := M_Uvagaemyi_klient.AsBoolean;
end;

procedure THarakteristika_klienta._SetUvagaemyi_klient(const NewValue: Boolean);
begin
  M_Uvagaemyi_klient.AsBoolean := NewValue;
end;

function THarakteristika_klienta._Getharakterizuet_klienta: TKlientList;
begin
  assert(ValidateMember('THarakteristika_klienta', 'harakterizuet_klienta', 7, TKlientList));
  Result := TKlientList(BoldMembers[7]);
end;

function THarakteristika_klienta._GetLinkimeet_harakt_klientaharakterizuet_klienta: TLinkimeet_harakt_klientaharakterizuet_klientaList;
begin
  assert(ValidateMember('THarakteristika_klienta', 'Linkimeet_harakt_klientaharakterizuet_klienta', 8, TLinkimeet_harakt_klientaharakterizuet_klientaList));
  Result := TLinkimeet_harakt_klientaharakterizuet_klientaList(BoldMembers[8]);
end;

procedure THarakteristika_klientaList.Add(NewObject: THarakteristika_klienta);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function THarakteristika_klientaList.IndexOf(anObject: THarakteristika_klienta): Integer;
begin
  result := IndexOfElement(anObject);
end;

function THarakteristika_klientaList.Includes(anObject: THarakteristika_klienta) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function THarakteristika_klientaList.AddNew: THarakteristika_klienta;
begin
  result := THarakteristika_klienta(InternalAddNew);
end;

procedure THarakteristika_klientaList.Insert(index: Integer; NewObject: THarakteristika_klienta);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function THarakteristika_klientaList.GetBoldObject(index: Integer): THarakteristika_klienta;
begin
  result := THarakteristika_klienta(GetElement(index));
end;

procedure THarakteristika_klientaList.SetBoldObject(index: Integer; NewObject: THarakteristika_klienta);
begin;
  SetElement(index, NewObject);
end;

{ TKlient }

function TKlient._Get_M_Yavl_yur_licom: TBABoolean;
begin
  assert(ValidateMember('TKlient', 'Yavl_yur_licom', 32, TBABoolean));
  Result := TBABoolean(BoldMembers[32]);
end;

function TKlient._GetYavl_yur_licom: Boolean;
begin
  Result := M_Yavl_yur_licom.AsBoolean;
end;

procedure TKlient._SetYavl_yur_licom(const NewValue: Boolean);
begin
  M_Yavl_yur_licom.AsBoolean := NewValue;
end;

function TKlient._Get_M_Imenovanie: TBAString;
begin
  assert(ValidateMember('TKlient', 'Imenovanie', 33, TBAString));
  Result := TBAString(BoldMembers[33]);
end;

function TKlient._GetImenovanie: String;
begin
  Result := M_Imenovanie.AsString;
end;

function TKlient._Get_M_Adres: TBAString;
begin
  assert(ValidateMember('TKlient', 'Adres', 34, TBAString));
  Result := TBAString(BoldMembers[34]);
end;

function TKlient._GetAdres: String;
begin
  Result := M_Adres.AsString;
end;

function TKlient._Get_M_Telefony: TBAString;
begin
  assert(ValidateMember('TKlient', 'Telefony', 35, TBAString));
  Result := TBAString(BoldMembers[35]);
end;

function TKlient._GetTelefony: String;
begin
  Result := M_Telefony.AsString;
end;

function TKlient._Get_M_Na_perspektive: TBABoolean;
begin
  assert(ValidateMember('TKlient', 'Na_perspektive', 36, TBABoolean));
  Result := TBABoolean(BoldMembers[36]);
end;

function TKlient._GetNa_perspektive: Boolean;
begin
  Result := M_Na_perspektive.AsBoolean;
end;

procedure TKlient._SetNa_perspektive(const NewValue: Boolean);
begin
  M_Na_perspektive.AsBoolean := NewValue;
end;

function TKlient._Get_M_Ident_foto_lica: TBAInteger;
begin
  assert(ValidateMember('TKlient', 'Ident_foto_lica', 37, TBAInteger));
  Result := TBAInteger(BoldMembers[37]);
end;

function TKlient._GetIdent_foto_lica: Integer;
begin
  Result := M_Ident_foto_lica.AsInteger;
end;

procedure TKlient._SetIdent_foto_lica(const NewValue: Integer);
begin
  M_Ident_foto_lica.AsInteger := NewValue;
end;

function TKlient._Get_M_Identifikator_risunka: TBAInteger;
begin
  assert(ValidateMember('TKlient', 'Identifikator_risunka', 38, TBAInteger));
  Result := TBAInteger(BoldMembers[38]);
end;

function TKlient._GetIdentifikator_risunka: Integer;
begin
  Result := M_Identifikator_risunka.AsInteger;
end;

procedure TKlient._SetIdentifikator_risunka(const NewValue: Integer);
begin
  M_Identifikator_risunka.AsInteger := NewValue;
end;

function TKlient._Get_M_Vsego_dolg: TBAFloat;
begin
  assert(ValidateMember('TKlient', 'Vsego_dolg', 39, TBAFloat));
  Result := TBAFloat(BoldMembers[39]);
end;

function TKlient._GetVsego_dolg: double;
begin
  Result := M_Vsego_dolg.AsFloat;
end;

function TKlient._Get_M_Vsego_oplatil: TBAFloat;
begin
  assert(ValidateMember('TKlient', 'Vsego_oplatil', 40, TBAFloat));
  Result := TBAFloat(BoldMembers[40]);
end;

function TKlient._GetVsego_oplatil: double;
begin
  Result := M_Vsego_oplatil.AsFloat;
end;

function TKlient._Get_M_Vsego_zakazyval: TBAFloat;
begin
  assert(ValidateMember('TKlient', 'Vsego_zakazyval', 41, TBAFloat));
  Result := TBAFloat(BoldMembers[41]);
end;

function TKlient._GetVsego_zakazyval: double;
begin
  Result := M_Vsego_zakazyval.AsFloat;
end;

function TKlient._Get_M_Kolich_zakazov: TBAInteger;
begin
  assert(ValidateMember('TKlient', 'Kolich_zakazov', 42, TBAInteger));
  Result := TBAInteger(BoldMembers[42]);
end;

function TKlient._GetKolich_zakazov: Integer;
begin
  Result := M_Kolich_zakazov.AsInteger;
end;

function TKlient._Get_M_Data_zavedeniya: TBADateTime;
begin
  assert(ValidateMember('TKlient', 'Data_zavedeniya', 43, TBADateTime));
  Result := TBADateTime(BoldMembers[43]);
end;

function TKlient._GetData_zavedeniya: TDateTime;
begin
  Result := M_Data_zavedeniya.AsDateTime;
end;

procedure TKlient._SetData_zavedeniya(const NewValue: TDateTime);
begin
  M_Data_zavedeniya.AsDateTime := NewValue;
end;

function TKlient._Get_M_Dopolniteljno: TBAString;
begin
  assert(ValidateMember('TKlient', 'Dopolniteljno', 44, TBAString));
  Result := TBAString(BoldMembers[44]);
end;

function TKlient._GetDopolniteljno: String;
begin
  Result := M_Dopolniteljno.AsString;
end;

procedure TKlient._SetDopolniteljno(const NewValue: String);
begin
  M_Dopolniteljno.AsString := NewValue;
end;

function TKlient._Get_M_Celevoi: TBABoolean;
begin
  assert(ValidateMember('TKlient', 'Celevoi', 45, TBABoolean));
  Result := TBABoolean(BoldMembers[45]);
end;

function TKlient._GetCelevoi: Boolean;
begin
  Result := M_Celevoi.AsBoolean;
end;

procedure TKlient._SetCelevoi(const NewValue: Boolean);
begin
  M_Celevoi.AsBoolean := NewValue;
end;

function TKlient._Get_M_Vsego_dolg_beznal: TBAFloat;
begin
  assert(ValidateMember('TKlient', 'Vsego_dolg_beznal', 46, TBAFloat));
  Result := TBAFloat(BoldMembers[46]);
end;

function TKlient._GetVsego_dolg_beznal: double;
begin
  Result := M_Vsego_dolg_beznal.AsFloat;
end;

function TKlient._Get_M_Vsego_dolg_nal: TBAFloat;
begin
  assert(ValidateMember('TKlient', 'Vsego_dolg_nal', 47, TBAFloat));
  Result := TBAFloat(BoldMembers[47]);
end;

function TKlient._GetVsego_dolg_nal: double;
begin
  Result := M_Vsego_dolg_nal.AsFloat;
end;

function TKlient._Get_M_Vsego_oplatil_nal: TBAFloat;
begin
  assert(ValidateMember('TKlient', 'Vsego_oplatil_nal', 48, TBAFloat));
  Result := TBAFloat(BoldMembers[48]);
end;

function TKlient._GetVsego_oplatil_nal: double;
begin
  Result := M_Vsego_oplatil_nal.AsFloat;
end;

function TKlient._Get_M_Vsego_oplatil_beznal: TBAFloat;
begin
  assert(ValidateMember('TKlient', 'Vsego_oplatil_beznal', 49, TBAFloat));
  Result := TBAFloat(BoldMembers[49]);
end;

function TKlient._GetVsego_oplatil_beznal: double;
begin
  Result := M_Vsego_oplatil_beznal.AsFloat;
end;

function TKlient._Get_M_org_imeet_specif: TBoldObjectReference;
begin
  assert(ValidateMember('TKlient', 'org_imeet_specif', 50, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[50]);
end;

function TKlient._Getorg_imeet_specif: TSpecif_organizacii;
begin
  assert(not assigned(M_org_imeet_specif.BoldObject) or (M_org_imeet_specif.BoldObject is TSpecif_organizacii), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'org_imeet_specif', M_org_imeet_specif.BoldObject.ClassName, 'TSpecif_organizacii']));
  Result := TSpecif_organizacii(M_org_imeet_specif.BoldObject);
end;

procedure TKlient._Setorg_imeet_specif(const value: TSpecif_organizacii);
begin
  M_org_imeet_specif.BoldObject := value;
end;

function TKlient._Getimeet_kontakty: TKontaktList;
begin
  assert(ValidateMember('TKlient', 'imeet_kontakty', 51, TKontaktList));
  Result := TKontaktList(BoldMembers[51]);
end;

function TKlient._Getvnosit_oplaty: TOplataList;
begin
  assert(ValidateMember('TKlient', 'vnosit_oplaty', 52, TOplataList));
  Result := TOplataList(BoldMembers[52]);
end;

function TKlient._Getimeet_zadachi: TZadachaList;
begin
  assert(ValidateMember('TKlient', 'imeet_zadachi', 53, TZadachaList));
  Result := TZadachaList(BoldMembers[53]);
end;

function TKlient._Getrazmeshaet_reklamu: TRazmeshenie_reklamyList;
begin
  assert(ValidateMember('TKlient', 'razmeshaet_reklamu', 54, TRazmeshenie_reklamyList));
  Result := TRazmeshenie_reklamyList(BoldMembers[54]);
end;

function TKlient._Getimeet_harakt_klienta: THarakteristika_klientaList;
begin
  assert(ValidateMember('TKlient', 'imeet_harakt_klienta', 55, THarakteristika_klientaList));
  Result := THarakteristika_klientaList(BoldMembers[55]);
end;

function TKlient._GetLinkimeet_harakt_klientaharakterizuet_klienta: TLinkimeet_harakt_klientaharakterizuet_klientaList;
begin
  assert(ValidateMember('TKlient', 'Linkimeet_harakt_klientaharakterizuet_klienta', 56, TLinkimeet_harakt_klientaharakterizuet_klientaList));
  Result := TLinkimeet_harakt_klientaharakterizuet_klientaList(BoldMembers[56]);
end;

function TKlient._Get_M_imeet_reiting: TBoldObjectReference;
begin
  assert(ValidateMember('TKlient', 'imeet_reiting', 57, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[57]);
end;

function TKlient._Getimeet_reiting: TReiting_klienta;
begin
  assert(not assigned(M_imeet_reiting.BoldObject) or (M_imeet_reiting.BoldObject is TReiting_klienta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_reiting', M_imeet_reiting.BoldObject.ClassName, 'TReiting_klienta']));
  Result := TReiting_klienta(M_imeet_reiting.BoldObject);
end;

procedure TKlient._Setimeet_reiting(const value: TReiting_klienta);
begin
  M_imeet_reiting.BoldObject := value;
end;

function TKlient._Getreklama_vhod_v_schyot: TSchyotList;
begin
  assert(ValidateMember('TKlient', 'reklama_vhod_v_schyot', 58, TSchyotList));
  Result := TSchyotList(BoldMembers[58]);
end;

procedure TKlientList.Add(NewObject: TKlient);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TKlientList.IndexOf(anObject: TKlient): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TKlientList.Includes(anObject: TKlient) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TKlientList.AddNew: TKlient;
begin
  result := TKlient(InternalAddNew);
end;

procedure TKlientList.Insert(index: Integer; NewObject: TKlient);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TKlientList.GetBoldObject(index: Integer): TKlient;
begin
  result := TKlient(GetElement(index));
end;

procedure TKlientList.SetBoldObject(index: Integer; NewObject: TKlient);
begin;
  SetElement(index, NewObject);
end;

{ TPersonal }

function TPersonal._Get_M_Login: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Login', 32, TBAString));
  Result := TBAString(BoldMembers[32]);
end;

function TPersonal._GetLogin: String;
begin
  Result := M_Login.AsString;
end;

procedure TPersonal._SetLogin(const NewValue: String);
begin
  M_Login.AsString := NewValue;
end;

function TPersonal._Get_M_Parolj: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Parolj', 33, TBAString));
  Result := TBAString(BoldMembers[33]);
end;

function TPersonal._GetParolj: String;
begin
  Result := M_Parolj.AsString;
end;

procedure TPersonal._SetParolj(const NewValue: String);
begin
  M_Parolj.AsString := NewValue;
end;

function TPersonal._Get_M_Prava: TBAInteger;
begin
  assert(ValidateMember('TPersonal', 'Prava', 34, TBAInteger));
  Result := TBAInteger(BoldMembers[34]);
end;

function TPersonal._GetPrava: Integer;
begin
  Result := M_Prava.AsInteger;
end;

procedure TPersonal._SetPrava(const NewValue: Integer);
begin
  M_Prava.AsInteger := NewValue;
end;

function TPersonal._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Kommentarii', 35, TBAString));
  Result := TBAString(BoldMembers[35]);
end;

function TPersonal._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TPersonal._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TPersonal._Get_M_Razreshitj_vsyo: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_vsyo', 36, TBABoolean));
  Result := TBABoolean(BoldMembers[36]);
end;

function TPersonal._GetRazreshitj_vsyo: Boolean;
begin
  Result := M_Razreshitj_vsyo.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_vsyo(const NewValue: Boolean);
begin
  M_Razreshitj_vsyo.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razresh_administr: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razresh_administr', 37, TBABoolean));
  Result := TBABoolean(BoldMembers[37]);
end;

function TPersonal._GetRazresh_administr: Boolean;
begin
  Result := M_Razresh_administr.AsBoolean;
end;

procedure TPersonal._SetRazresh_administr(const NewValue: Boolean);
begin
  M_Razresh_administr.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razresh_nastroiku_raboty: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razresh_nastroiku_raboty', 38, TBABoolean));
  Result := TBABoolean(BoldMembers[38]);
end;

function TPersonal._GetRazresh_nastroiku_raboty: Boolean;
begin
  Result := M_Razresh_nastroiku_raboty.AsBoolean;
end;

procedure TPersonal._SetRazresh_nastroiku_raboty(const NewValue: Boolean);
begin
  M_Razresh_nastroiku_raboty.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_prosmotr_logov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_prosmotr_logov', 39, TBABoolean));
  Result := TBABoolean(BoldMembers[39]);
end;

function TPersonal._GetRazreshitj_prosmotr_logov: Boolean;
begin
  Result := M_Razreshitj_prosmotr_logov.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_prosmotr_logov(const NewValue: Boolean);
begin
  M_Razreshitj_prosmotr_logov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_udalenie_izdanii: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_udalenie_izdanii', 40, TBABoolean));
  Result := TBABoolean(BoldMembers[40]);
end;

function TPersonal._GetRazr_udalenie_izdanii: Boolean;
begin
  Result := M_Razr_udalenie_izdanii.AsBoolean;
end;

procedure TPersonal._SetRazr_udalenie_izdanii(const NewValue: Boolean);
begin
  M_Razr_udalenie_izdanii.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalenie_vypuskov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalenie_vypuskov', 41, TBABoolean));
  Result := TBABoolean(BoldMembers[41]);
end;

function TPersonal._GetRazreshitj_udalenie_vypuskov: Boolean;
begin
  Result := M_Razreshitj_udalenie_vypuskov.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalenie_vypuskov(const NewValue: Boolean);
begin
  M_Razreshitj_udalenie_vypuskov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_udalenie_razdelov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_udalenie_razdelov', 42, TBABoolean));
  Result := TBABoolean(BoldMembers[42]);
end;

function TPersonal._GetRazr_udalenie_razdelov: Boolean;
begin
  Result := M_Razr_udalenie_razdelov.AsBoolean;
end;

procedure TPersonal._SetRazr_udalenie_razdelov(const NewValue: Boolean);
begin
  M_Razr_udalenie_razdelov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalenie_objyavlenii: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalenie_objyavlenii', 43, TBABoolean));
  Result := TBABoolean(BoldMembers[43]);
end;

function TPersonal._GetRazreshitj_udalenie_objyavlenii: Boolean;
begin
  Result := M_Razreshitj_udalenie_objyavlenii.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalenie_objyavlenii(const NewValue: Boolean);
begin
  M_Razreshitj_udalenie_objyavlenii.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalenie_ostaljnogo: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalenie_ostaljnogo', 44, TBABoolean));
  Result := TBABoolean(BoldMembers[44]);
end;

function TPersonal._GetRazreshitj_udalenie_ostaljnogo: Boolean;
begin
  Result := M_Razreshitj_udalenie_ostaljnogo.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalenie_ostaljnogo(const NewValue: Boolean);
begin
  M_Razreshitj_udalenie_ostaljnogo.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prav_redkomen_sprav: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prav_redkomen_sprav', 45, TBABoolean));
  Result := TBABoolean(BoldMembers[45]);
end;

function TPersonal._GetRazr_prav_redkomen_sprav: Boolean;
begin
  Result := M_Razr_prav_redkomen_sprav.AsBoolean;
end;

procedure TPersonal._SetRazr_prav_redkomen_sprav(const NewValue: Boolean);
begin
  M_Razr_prav_redkomen_sprav.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prav_oper_razdelov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prav_oper_razdelov', 46, TBABoolean));
  Result := TBABoolean(BoldMembers[46]);
end;

function TPersonal._GetRazr_prav_oper_razdelov: Boolean;
begin
  Result := M_Razr_prav_oper_razdelov.AsBoolean;
end;

procedure TPersonal._SetRazr_prav_oper_razdelov(const NewValue: Boolean);
begin
  M_Razr_prav_oper_razdelov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Sokr_imya: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Sokr_imya', 47, TBAString));
  Result := TBAString(BoldMembers[47]);
end;

function TPersonal._GetSokr_imya: String;
begin
  Result := M_Sokr_imya.AsString;
end;

procedure TPersonal._SetSokr_imya(const NewValue: String);
begin
  M_Sokr_imya.AsString := NewValue;
end;

function TPersonal._Get_M_Razreshitj_smotr_ceny: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_smotr_ceny', 48, TBABoolean));
  Result := TBABoolean(BoldMembers[48]);
end;

function TPersonal._GetRazreshitj_smotr_ceny: Boolean;
begin
  Result := M_Razreshitj_smotr_ceny.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_smotr_ceny(const NewValue: Boolean);
begin
  M_Razreshitj_smotr_ceny.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_formir_izdanie: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_formir_izdanie', 49, TBABoolean));
  Result := TBABoolean(BoldMembers[49]);
end;

function TPersonal._GetRazreshitj_formir_izdanie: Boolean;
begin
  Result := M_Razreshitj_formir_izdanie.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_formir_izdanie(const NewValue: Boolean);
begin
  M_Razreshitj_formir_izdanie.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_rabotu_s_tipami: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_rabotu_s_tipami', 50, TBABoolean));
  Result := TBABoolean(BoldMembers[50]);
end;

function TPersonal._GetRazreshitj_rabotu_s_tipami: Boolean;
begin
  Result := M_Razreshitj_rabotu_s_tipami.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_rabotu_s_tipami(const NewValue: Boolean);
begin
  M_Razreshitj_rabotu_s_tipami.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_nastr_CRM: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_nastr_CRM', 51, TBABoolean));
  Result := TBABoolean(BoldMembers[51]);
end;

function TPersonal._GetRazr_nastr_CRM: Boolean;
begin
  Result := M_Razr_nastr_CRM.AsBoolean;
end;

procedure TPersonal._SetRazr_nastr_CRM(const NewValue: Boolean);
begin
  M_Razr_nastr_CRM.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razresh_rab_s_rekl_kamp: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razresh_rab_s_rekl_kamp', 52, TBABoolean));
  Result := TBABoolean(BoldMembers[52]);
end;

function TPersonal._GetRazresh_rab_s_rekl_kamp: Boolean;
begin
  Result := M_Razresh_rab_s_rekl_kamp.AsBoolean;
end;

procedure TPersonal._SetRazresh_rab_s_rekl_kamp(const NewValue: Boolean);
begin
  M_Razresh_rab_s_rekl_kamp.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prosm_istorii: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prosm_istorii', 53, TBABoolean));
  Result := TBABoolean(BoldMembers[53]);
end;

function TPersonal._GetRazr_prosm_istorii: Boolean;
begin
  Result := M_Razr_prosm_istorii.AsBoolean;
end;

procedure TPersonal._SetRazr_prosm_istorii(const NewValue: Boolean);
begin
  M_Razr_prosm_istorii.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_udalyatj_scheta: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_udalyatj_scheta', 54, TBABoolean));
  Result := TBABoolean(BoldMembers[54]);
end;

function TPersonal._GetRazr_udalyatj_scheta: Boolean;
begin
  Result := M_Razr_udalyatj_scheta.AsBoolean;
end;

procedure TPersonal._SetRazr_udalyatj_scheta(const NewValue: Boolean);
begin
  M_Razr_udalyatj_scheta.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalyatj_kontakty: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalyatj_kontakty', 55, TBABoolean));
  Result := TBABoolean(BoldMembers[55]);
end;

function TPersonal._GetRazreshitj_udalyatj_kontakty: Boolean;
begin
  Result := M_Razreshitj_udalyatj_kontakty.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalyatj_kontakty(const NewValue: Boolean);
begin
  M_Razreshitj_udalyatj_kontakty.AsBoolean := NewValue;
end;

function TPersonal._Getdeistviya_fiksiruyutsya_v: TLog_operaciiList;
begin
  assert(ValidateMember('TPersonal', 'deistviya_fiksiruyutsya_v', 56, TLog_operaciiList));
  Result := TLog_operaciiList(BoldMembers[56]);
end;

function TPersonal._Get_M_rabotaet_na_dolgn: TBoldObjectReference;
begin
  assert(ValidateMember('TPersonal', 'rabotaet_na_dolgn', 57, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[57]);
end;

function TPersonal._Getrabotaet_na_dolgn: TDolgnostj;
begin
  assert(not assigned(M_rabotaet_na_dolgn.BoldObject) or (M_rabotaet_na_dolgn.BoldObject is TDolgnostj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'rabotaet_na_dolgn', M_rabotaet_na_dolgn.BoldObject.ClassName, 'TDolgnostj']));
  Result := TDolgnostj(M_rabotaet_na_dolgn.BoldObject);
end;

procedure TPersonal._Setrabotaet_na_dolgn(const value: TDolgnostj);
begin
  M_rabotaet_na_dolgn.BoldObject := value;
end;

function TPersonal._Getmog_prosmatrivatj: TSostoyanie_kontaktaList;
begin
  assert(ValidateMember('TPersonal', 'mog_prosmatrivatj', 58, TSostoyanie_kontaktaList));
  Result := TSostoyanie_kontaktaList(BoldMembers[58]);
end;

function TPersonal._GetRazreshenie_prosmatrivatj: TRazreshenie_prosmatrivatjList;
begin
  assert(ValidateMember('TPersonal', 'Razreshenie_prosmatrivatj', 59, TRazreshenie_prosmatrivatjList));
  Result := TRazreshenie_prosmatrivatjList(BoldMembers[59]);
end;

function TPersonal._Getimeet_pravo_ustanavl: TSostoyanie_kontaktaList;
begin
  assert(ValidateMember('TPersonal', 'imeet_pravo_ustanavl', 60, TSostoyanie_kontaktaList));
  Result := TSostoyanie_kontaktaList(BoldMembers[60]);
end;

function TPersonal._GetRazreshenie_ustanavl: TRazreshenie_ustanavlList;
begin
  assert(ValidateMember('TPersonal', 'Razreshenie_ustanavl', 61, TRazreshenie_ustanavlList));
  Result := TRazreshenie_ustanavlList(BoldMembers[61]);
end;

function TPersonal._Getimeet_pravo_izmenyatj: TSostoyanie_kontaktaList;
begin
  assert(ValidateMember('TPersonal', 'imeet_pravo_izmenyatj', 62, TSostoyanie_kontaktaList));
  Result := TSostoyanie_kontaktaList(BoldMembers[62]);
end;

function TPersonal._GetRazreshenie_vyhoditj: TRazreshenie_vyhoditjList;
begin
  assert(ValidateMember('TPersonal', 'Razreshenie_vyhoditj', 63, TRazreshenie_vyhoditjList));
  Result := TRazreshenie_vyhoditjList(BoldMembers[63]);
end;

function TPersonal._Getimeet_napominaniya: TNapominanieList;
begin
  assert(ValidateMember('TPersonal', 'imeet_napominaniya', 64, TNapominanieList));
  Result := TNapominanieList(BoldMembers[64]);
end;

function TPersonal._Getvedyot_reklamu: TRazmeshenie_reklamyList;
begin
  assert(ValidateMember('TPersonal', 'vedyot_reklamu', 65, TRazmeshenie_reklamyList));
  Result := TRazmeshenie_reklamyList(BoldMembers[65]);
end;

procedure TPersonalList.Add(NewObject: TPersonal);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonalList.IndexOf(anObject: TPersonal): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonalList.Includes(anObject: TPersonal) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonalList.AddNew: TPersonal;
begin
  result := TPersonal(InternalAddNew);
end;

procedure TPersonalList.Insert(index: Integer; NewObject: TPersonal);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonalList.GetBoldObject(index: Integer): TPersonal;
begin
  result := TPersonal(GetElement(index));
end;

procedure TPersonalList.SetBoldObject(index: Integer; NewObject: TPersonal);
begin;
  SetElement(index, NewObject);
end;

{ TRealjnaya_prichina }

function TRealjnaya_prichina._Get_M_Vse_uslov_srab: TBABoolean;
begin
  assert(ValidateMember('TRealjnaya_prichina', 'Vse_uslov_srab', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TRealjnaya_prichina._GetVse_uslov_srab: Boolean;
begin
  Result := M_Vse_uslov_srab.AsBoolean;
end;

function TRealjnaya_prichina._Get_M_Prichina_nazrela: TBABoolean;
begin
  assert(ValidateMember('TRealjnaya_prichina', 'Prichina_nazrela', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TRealjnaya_prichina._GetPrichina_nazrela: Boolean;
begin
  Result := M_Prichina_nazrela.AsBoolean;
end;

procedure TRealjnaya_prichina._SetPrichina_nazrela(const NewValue: Boolean);
begin
  M_Prichina_nazrela.AsBoolean := NewValue;
end;

function TRealjnaya_prichina._Getimeet_usloviya: TUsloviyaList;
begin
  assert(ValidateMember('TRealjnaya_prichina', 'imeet_usloviya', 6, TUsloviyaList));
  Result := TUsloviyaList(BoldMembers[6]);
end;

function TRealjnaya_prichina._Get_M_otn_k_tipu_prichin: TBoldObjectReference;
begin
  assert(ValidateMember('TRealjnaya_prichina', 'otn_k_tipu_prichin', 7, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[7]);
end;

function TRealjnaya_prichina._Getotn_k_tipu_prichin: TStandartnaya_prichina;
begin
  assert(not assigned(M_otn_k_tipu_prichin.BoldObject) or (M_otn_k_tipu_prichin.BoldObject is TStandartnaya_prichina), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otn_k_tipu_prichin', M_otn_k_tipu_prichin.BoldObject.ClassName, 'TStandartnaya_prichina']));
  Result := TStandartnaya_prichina(M_otn_k_tipu_prichin.BoldObject);
end;

procedure TRealjnaya_prichina._Setotn_k_tipu_prichin(const value: TStandartnaya_prichina);
begin
  M_otn_k_tipu_prichin.BoldObject := value;
end;

function TRealjnaya_prichina._Getimeet_v_osnove_zadachi: TZadachaList;
begin
  assert(ValidateMember('TRealjnaya_prichina', 'imeet_v_osnove_zadachi', 8, TZadachaList));
  Result := TZadachaList(BoldMembers[8]);
end;

function TRealjnaya_prichina._GetLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi: TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList;
begin
  assert(ValidateMember('TRealjnaya_prichina', 'Linkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi', 9, TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList));
  Result := TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList(BoldMembers[9]);
end;

procedure TRealjnaya_prichinaList.Add(NewObject: TRealjnaya_prichina);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRealjnaya_prichinaList.IndexOf(anObject: TRealjnaya_prichina): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRealjnaya_prichinaList.Includes(anObject: TRealjnaya_prichina) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRealjnaya_prichinaList.AddNew: TRealjnaya_prichina;
begin
  result := TRealjnaya_prichina(InternalAddNew);
end;

procedure TRealjnaya_prichinaList.Insert(index: Integer; NewObject: TRealjnaya_prichina);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRealjnaya_prichinaList.GetBoldObject(index: Integer): TRealjnaya_prichina;
begin
  result := TRealjnaya_prichina(GetElement(index));
end;

procedure TRealjnaya_prichinaList.SetBoldObject(index: Integer; NewObject: TRealjnaya_prichina);
begin;
  SetElement(index, NewObject);
end;

function TRealjnaya_prichina.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Vse_uslov_srab) then result := _Vse_uslov_srab_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TRealjnaya_prichina.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TStandartnaya_zadacha }

function TStandartnaya_zadacha._Getharakterizuet_zadachi: TZadachaList;
begin
  assert(ValidateMember('TStandartnaya_zadacha', 'harakterizuet_zadachi', 4, TZadachaList));
  Result := TZadachaList(BoldMembers[4]);
end;

procedure TStandartnaya_zadachaList.Add(NewObject: TStandartnaya_zadacha);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TStandartnaya_zadachaList.IndexOf(anObject: TStandartnaya_zadacha): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TStandartnaya_zadachaList.Includes(anObject: TStandartnaya_zadacha) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TStandartnaya_zadachaList.AddNew: TStandartnaya_zadacha;
begin
  result := TStandartnaya_zadacha(InternalAddNew);
end;

procedure TStandartnaya_zadachaList.Insert(index: Integer; NewObject: TStandartnaya_zadacha);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TStandartnaya_zadachaList.GetBoldObject(index: Integer): TStandartnaya_zadacha;
begin
  result := TStandartnaya_zadacha(GetElement(index));
end;

procedure TStandartnaya_zadachaList.SetBoldObject(index: Integer; NewObject: TStandartnaya_zadacha);
begin;
  SetElement(index, NewObject);
end;

{ TStandartnaya_prichina }

function TStandartnaya_prichina._Getharakt_v_chastn_prich: TRealjnaya_prichinaList;
begin
  assert(ValidateMember('TStandartnaya_prichina', 'harakt_v_chastn_prich', 4, TRealjnaya_prichinaList));
  Result := TRealjnaya_prichinaList(BoldMembers[4]);
end;

function TStandartnaya_prichina._Getimeet_abstr_chastnostj: TPrichinaList;
begin
  assert(ValidateMember('TStandartnaya_prichina', 'imeet_abstr_chastnostj', 5, TPrichinaList));
  Result := TPrichinaList(BoldMembers[5]);
end;

function TStandartnaya_prichina._Getformir_iz_stand_usl: TStandartnoe_uslovieList;
begin
  assert(ValidateMember('TStandartnaya_prichina', 'formir_iz_stand_usl', 6, TStandartnoe_uslovieList));
  Result := TStandartnoe_uslovieList(BoldMembers[6]);
end;

function TStandartnaya_prichina._GetPrichina_uslov: TPrichina_uslovList;
begin
  assert(ValidateMember('TStandartnaya_prichina', 'Prichina_uslov', 7, TPrichina_uslovList));
  Result := TPrichina_uslovList(BoldMembers[7]);
end;

procedure TStandartnaya_prichinaList.Add(NewObject: TStandartnaya_prichina);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TStandartnaya_prichinaList.IndexOf(anObject: TStandartnaya_prichina): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TStandartnaya_prichinaList.Includes(anObject: TStandartnaya_prichina) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TStandartnaya_prichinaList.AddNew: TStandartnaya_prichina;
begin
  result := TStandartnaya_prichina(InternalAddNew);
end;

procedure TStandartnaya_prichinaList.Insert(index: Integer; NewObject: TStandartnaya_prichina);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TStandartnaya_prichinaList.GetBoldObject(index: Integer): TStandartnaya_prichina;
begin
  result := TStandartnaya_prichina(GetElement(index));
end;

procedure TStandartnaya_prichinaList.SetBoldObject(index: Integer; NewObject: TStandartnaya_prichina);
begin;
  SetElement(index, NewObject);
end;

{ TStandartnoe_napominanie }

function TStandartnoe_napominanie._Getimeet_stand_napom: TNapominanieList;
begin
  assert(ValidateMember('TStandartnoe_napominanie', 'imeet_stand_napom', 4, TNapominanieList));
  Result := TNapominanieList(BoldMembers[4]);
end;

procedure TStandartnoe_napominanieList.Add(NewObject: TStandartnoe_napominanie);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TStandartnoe_napominanieList.IndexOf(anObject: TStandartnoe_napominanie): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TStandartnoe_napominanieList.Includes(anObject: TStandartnoe_napominanie) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TStandartnoe_napominanieList.AddNew: TStandartnoe_napominanie;
begin
  result := TStandartnoe_napominanie(InternalAddNew);
end;

procedure TStandartnoe_napominanieList.Insert(index: Integer; NewObject: TStandartnoe_napominanie);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TStandartnoe_napominanieList.GetBoldObject(index: Integer): TStandartnoe_napominanie;
begin
  result := TStandartnoe_napominanie(GetElement(index));
end;

procedure TStandartnoe_napominanieList.SetBoldObject(index: Integer; NewObject: TStandartnoe_napominanie);
begin;
  SetElement(index, NewObject);
end;

{ TStandartnoe_uslovie }

function TStandartnoe_uslovie._Getimeet_stand_usl: TUsloviyaList;
begin
  assert(ValidateMember('TStandartnoe_uslovie', 'imeet_stand_usl', 4, TUsloviyaList));
  Result := TUsloviyaList(BoldMembers[4]);
end;

function TStandartnoe_uslovie._Getformir_stand_prich: TStandartnaya_prichinaList;
begin
  assert(ValidateMember('TStandartnoe_uslovie', 'formir_stand_prich', 5, TStandartnaya_prichinaList));
  Result := TStandartnaya_prichinaList(BoldMembers[5]);
end;

function TStandartnoe_uslovie._GetPrichina_uslov: TPrichina_uslovList;
begin
  assert(ValidateMember('TStandartnoe_uslovie', 'Prichina_uslov', 6, TPrichina_uslovList));
  Result := TPrichina_uslovList(BoldMembers[6]);
end;

procedure TStandartnoe_uslovieList.Add(NewObject: TStandartnoe_uslovie);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TStandartnoe_uslovieList.IndexOf(anObject: TStandartnoe_uslovie): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TStandartnoe_uslovieList.Includes(anObject: TStandartnoe_uslovie) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TStandartnoe_uslovieList.AddNew: TStandartnoe_uslovie;
begin
  result := TStandartnoe_uslovie(InternalAddNew);
end;

procedure TStandartnoe_uslovieList.Insert(index: Integer; NewObject: TStandartnoe_uslovie);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TStandartnoe_uslovieList.GetBoldObject(index: Integer): TStandartnoe_uslovie;
begin
  result := TStandartnoe_uslovie(GetElement(index));
end;

procedure TStandartnoe_uslovieList.SetBoldObject(index: Integer; NewObject: TStandartnoe_uslovie);
begin;
  SetElement(index, NewObject);
end;

{ TStandartnyi_effekt }

function TStandartnyi_effekt._Getimeet_chastnostj: TEffektList;
begin
  assert(ValidateMember('TStandartnyi_effekt', 'imeet_chastnostj', 4, TEffektList));
  Result := TEffektList(BoldMembers[4]);
end;

procedure TStandartnyi_effektList.Add(NewObject: TStandartnyi_effekt);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TStandartnyi_effektList.IndexOf(anObject: TStandartnyi_effekt): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TStandartnyi_effektList.Includes(anObject: TStandartnyi_effekt) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TStandartnyi_effektList.AddNew: TStandartnyi_effekt;
begin
  result := TStandartnyi_effekt(InternalAddNew);
end;

procedure TStandartnyi_effektList.Insert(index: Integer; NewObject: TStandartnyi_effekt);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TStandartnyi_effektList.GetBoldObject(index: Integer): TStandartnyi_effekt;
begin
  result := TStandartnyi_effekt(GetElement(index));
end;

procedure TStandartnyi_effektList.SetBoldObject(index: Integer; NewObject: TStandartnyi_effekt);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '168849773';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Linkimeet_harakt_klientaharakterizuet_klienta', TLinkimeet_harakt_klientaharakterizuet_klientaList);
  BoldObjectListClasses.AddObjectEntry('Linkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi', TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachiList);
  BoldObjectListClasses.AddObjectEntry('Vypusk_gazety', TVypusk_gazetyList);
  BoldObjectListClasses.AddObjectEntry('Vyhod', TVyhodList);
  BoldObjectListClasses.AddObjectEntry('Dokument', TDokumentList);
  BoldObjectListClasses.AddObjectEntry('Log_operacii', TLog_operaciiList);
  BoldObjectListClasses.AddObjectEntry('Nastroiki', TNastroikiList);
  BoldObjectListClasses.AddObjectEntry('Oplata', TOplataList);
  BoldObjectListClasses.AddObjectEntry('Persona', TPersonaList);
  BoldObjectListClasses.AddObjectEntry('Prichina', TPrichinaList);
  BoldObjectListClasses.AddObjectEntry('Prichina_uslov', TPrichina_uslovList);
  BoldObjectListClasses.AddObjectEntry('Proekt', TProektList);
  BoldObjectListClasses.AddObjectEntry('Razmeshenie_reklamy', TRazmeshenie_reklamyList);
  BoldObjectListClasses.AddObjectEntry('Razreshenie', TRazreshenieList);
  BoldObjectListClasses.AddObjectEntry('Reiting_klienta', TReiting_klientaList);
  BoldObjectListClasses.AddObjectEntry('Sootn_so_skidk', TSootn_so_skidkList);
  BoldObjectListClasses.AddObjectEntry('Sootn_tipa_so_skidk', TSootn_tipa_so_skidkList);
  BoldObjectListClasses.AddObjectEntry('Sostoyanie_kontakta', TSostoyanie_kontaktaList);
  BoldObjectListClasses.AddObjectEntry('Spravochnik', TSpravochnikList);
  BoldObjectListClasses.AddObjectEntry('Schyot', TSchyotList);
  BoldObjectListClasses.AddObjectEntry('Effekt', TEffektList);
  BoldObjectListClasses.AddObjectEntry('Organizaciya', TOrganizaciyaList);
  BoldObjectListClasses.AddObjectEntry('Razreshenie_vyhoditj', TRazreshenie_vyhoditjList);
  BoldObjectListClasses.AddObjectEntry('Razreshenie_prosmatrivatj', TRazreshenie_prosmatrivatjList);
  BoldObjectListClasses.AddObjectEntry('Razreshenie_ustanavl', TRazreshenie_ustanavlList);
  BoldObjectListClasses.AddObjectEntry('Abstraktnyi_standart', TAbstraktnyi_standartList);
  BoldObjectListClasses.AddObjectEntry('Dobavochnaya_stoim', TDobavochnaya_stoimList);
  BoldObjectListClasses.AddObjectEntry('Dolgnostj', TDolgnostjList);
  BoldObjectListClasses.AddObjectEntry('Zadacha', TZadachaList);
  BoldObjectListClasses.AddObjectEntry('Izdanie', TIzdanieList);
  BoldObjectListClasses.AddObjectEntry('Kontakt', TKontaktList);
  BoldObjectListClasses.AddObjectEntry('Napominanie', TNapominanieList);
  BoldObjectListClasses.AddObjectEntry('Pozic_schta', TPozic_schtaList);
  BoldObjectListClasses.AddObjectEntry('Razdel_izdaniya', TRazdel_izdaniyaList);
  BoldObjectListClasses.AddObjectEntry('Razmery', TRazmeryList);
  BoldObjectListClasses.AddObjectEntry('Skidka', TSkidkaList);
  BoldObjectListClasses.AddObjectEntry('Specif_organizacii', TSpecif_organizaciiList);
  BoldObjectListClasses.AddObjectEntry('Stoimostj', TStoimostjList);
  BoldObjectListClasses.AddObjectEntry('Tip_kontakta', TTip_kontaktaList);
  BoldObjectListClasses.AddObjectEntry('Tip_reklamy', TTip_reklamyList);
  BoldObjectListClasses.AddObjectEntry('Usloviya', TUsloviyaList);
  BoldObjectListClasses.AddObjectEntry('Harakteristika_klienta', THarakteristika_klientaList);
  BoldObjectListClasses.AddObjectEntry('Klient', TKlientList);
  BoldObjectListClasses.AddObjectEntry('Personal', TPersonalList);
  BoldObjectListClasses.AddObjectEntry('Realjnaya_prichina', TRealjnaya_prichinaList);
  BoldObjectListClasses.AddObjectEntry('Standartnaya_zadacha', TStandartnaya_zadachaList);
  BoldObjectListClasses.AddObjectEntry('Standartnaya_prichina', TStandartnaya_prichinaList);
  BoldObjectListClasses.AddObjectEntry('Standartnoe_napominanie', TStandartnoe_napominanieList);
  BoldObjectListClasses.AddObjectEntry('Standartnoe_uslovie', TStandartnoe_uslovieList);
  BoldObjectListClasses.AddObjectEntry('Standartnyi_effekt', TStandartnyi_effektList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Linkimeet_harakt_klientaharakterizuet_klienta', TLinkimeet_harakt_klientaharakterizuet_klienta);
  BoldObjectClasses.AddObjectEntry('Linkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi', TLinkotnos_kak_zadach_k_prichimeet_v_osnove_zadachi);
  BoldObjectClasses.AddObjectEntry('Vypusk_gazety', TVypusk_gazety);
  BoldObjectClasses.AddObjectEntry('Vyhod', TVyhod);
  BoldObjectClasses.AddObjectEntry('Dokument', TDokument);
  BoldObjectClasses.AddObjectEntry('Log_operacii', TLog_operacii);
  BoldObjectClasses.AddObjectEntry('Nastroiki', TNastroiki);
  BoldObjectClasses.AddObjectEntry('Oplata', TOplata);
  BoldObjectClasses.AddObjectEntry('Persona', TPersona);
  BoldObjectClasses.AddObjectEntry('Prichina', TPrichina);
  BoldObjectClasses.AddObjectEntry('Prichina_uslov', TPrichina_uslov);
  BoldObjectClasses.AddObjectEntry('Proekt', TProekt);
  BoldObjectClasses.AddObjectEntry('Razmeshenie_reklamy', TRazmeshenie_reklamy);
  BoldObjectClasses.AddObjectEntry('Razreshenie', TRazreshenie);
  BoldObjectClasses.AddObjectEntry('Reiting_klienta', TReiting_klienta);
  BoldObjectClasses.AddObjectEntry('Sootn_so_skidk', TSootn_so_skidk);
  BoldObjectClasses.AddObjectEntry('Sootn_tipa_so_skidk', TSootn_tipa_so_skidk);
  BoldObjectClasses.AddObjectEntry('Sostoyanie_kontakta', TSostoyanie_kontakta);
  BoldObjectClasses.AddObjectEntry('Spravochnik', TSpravochnik);
  BoldObjectClasses.AddObjectEntry('Schyot', TSchyot);
  BoldObjectClasses.AddObjectEntry('Effekt', TEffekt);
  BoldObjectClasses.AddObjectEntry('Organizaciya', TOrganizaciya);
  BoldObjectClasses.AddObjectEntry('Razreshenie_vyhoditj', TRazreshenie_vyhoditj);
  BoldObjectClasses.AddObjectEntry('Razreshenie_prosmatrivatj', TRazreshenie_prosmatrivatj);
  BoldObjectClasses.AddObjectEntry('Razreshenie_ustanavl', TRazreshenie_ustanavl);
  BoldObjectClasses.AddObjectEntry('Abstraktnyi_standart', TAbstraktnyi_standart);
  BoldObjectClasses.AddObjectEntry('Dobavochnaya_stoim', TDobavochnaya_stoim);
  BoldObjectClasses.AddObjectEntry('Dolgnostj', TDolgnostj);
  BoldObjectClasses.AddObjectEntry('Zadacha', TZadacha);
  BoldObjectClasses.AddObjectEntry('Izdanie', TIzdanie);
  BoldObjectClasses.AddObjectEntry('Kontakt', TKontakt);
  BoldObjectClasses.AddObjectEntry('Napominanie', TNapominanie);
  BoldObjectClasses.AddObjectEntry('Pozic_schta', TPozic_schta);
  BoldObjectClasses.AddObjectEntry('Razdel_izdaniya', TRazdel_izdaniya);
  BoldObjectClasses.AddObjectEntry('Razmery', TRazmery);
  BoldObjectClasses.AddObjectEntry('Skidka', TSkidka);
  BoldObjectClasses.AddObjectEntry('Specif_organizacii', TSpecif_organizacii);
  BoldObjectClasses.AddObjectEntry('Stoimostj', TStoimostj);
  BoldObjectClasses.AddObjectEntry('Tip_kontakta', TTip_kontakta);
  BoldObjectClasses.AddObjectEntry('Tip_reklamy', TTip_reklamy);
  BoldObjectClasses.AddObjectEntry('Usloviya', TUsloviya);
  BoldObjectClasses.AddObjectEntry('Harakteristika_klienta', THarakteristika_klienta);
  BoldObjectClasses.AddObjectEntry('Klient', TKlient);
  BoldObjectClasses.AddObjectEntry('Personal', TPersonal);
  BoldObjectClasses.AddObjectEntry('Realjnaya_prichina', TRealjnaya_prichina);
  BoldObjectClasses.AddObjectEntry('Standartnaya_zadacha', TStandartnaya_zadacha);
  BoldObjectClasses.AddObjectEntry('Standartnaya_prichina', TStandartnaya_prichina);
  BoldObjectClasses.AddObjectEntry('Standartnoe_napominanie', TStandartnoe_napominanie);
  BoldObjectClasses.AddObjectEntry('Standartnoe_uslovie', TStandartnoe_uslovie);
  BoldObjectClasses.AddObjectEntry('Standartnyi_effekt', TStandartnyi_effekt);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('BusinessClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

